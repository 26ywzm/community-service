{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst API = process.env.VUE_APP_API_URL;\nimport axios from 'axios';\nimport { verifyAuth } from '@/utils/auth';\nexport default {\n  data() {\n    return {\n      showAdminPanel: false,\n      users: [],\n      admins: [],\n      orders: [],\n      // 在数据中新增 orders 来存储用户订单\n      verificationInterval: null\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return !!localStorage.getItem('authToken'); // 检查是否有 token\n    },\n    // 计算属性，用于检查用户是否为管理员或超级管理员\n    isAdmin() {\n      const role = localStorage.getItem('userRole');\n      return role === 'admin'; // 仅普通管理员\n    },\n    isSuperAdmin() {\n      const role = localStorage.getItem('userRole');\n      return role === 'super_admin'; // 仅超级管理员\n    },\n    isAuthenticated() {\n      return !!localStorage.getItem('authToken'); // 检查是否登录\n    }\n  },\n  async created() {\n    // 只在登录状态下启动验证\n    if (this.isLoggedIn) {\n      this.startVerification();\n    }\n  },\n  watch: {\n    // 监听登录状态变化\n    isLoggedIn(newValue) {\n      if (newValue) {\n        // 登录后启动验证\n        this.startVerification();\n      } else {\n        // 登出后清除验证定时器\n        if (this.verificationInterval) {\n          clearInterval(this.verificationInterval);\n          this.verificationInterval = null;\n        }\n      }\n    }\n  },\n  beforeUnmount() {\n    // 组件销毁时清除定时器\n    if (this.verificationInterval) {\n      clearInterval(this.verificationInterval);\n    }\n  },\n  methods: {\n    startVerification() {\n      // 如果已经有定时器在运行，先清除它\n      if (this.verificationInterval) {\n        clearInterval(this.verificationInterval);\n      }\n\n      // 立即进行一次验证\n      this.verifyAndUpdate();\n\n      // 每5分钟验证一次\n      this.verificationInterval = setInterval(() => {\n        this.verifyAndUpdate();\n      }, 5 * 60 * 1000);\n    },\n    async verifyAndUpdate() {\n      // 如果未登录，不进行验证\n      if (!this.isLoggedIn) {\n        return;\n      }\n      const result = await verifyAuth();\n      if (!result.valid) {\n        switch (result.reason) {\n          case 'role-mismatch':\n            // 角色不匹配时，只更新角色不刷新页面\n            this.$forceUpdate();\n            break;\n          case 'no-token':\n          case 'invalid-token':\n          case 'unauthorized':\n            // 清除验证定时器\n            if (this.verificationInterval) {\n              clearInterval(this.verificationInterval);\n              this.verificationInterval = null;\n            }\n            break;\n          // 其他情况不做处理\n        }\n      }\n    },\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${API}/users`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.users = response.data.users; // 从 response.data.users 获取用户列表\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        if (error.response && error.response.status === 403) {\n          // 权限不足，清除认证信息并退出\n          this.handleAuthError();\n        }\n      }\n    },\n    async fetchAdmins() {\n      try {\n        const response = await axios.get(`${API}/admins`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.admins = response.data.admins; // 从 response.data.admins 获取管理员列表\n      } catch (error) {\n        console.error('获取管理员列表失败:', error);\n        if (error.response && error.response.status === 403) {\n          // 权限不足，清除认证信息并退出\n          this.handleAuthError();\n        }\n      }\n    },\n    handleAuthError() {\n      // 清除所有认证信息\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('username');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('email');\n\n      // 停止验证定时器\n      if (this.verificationInterval) {\n        clearInterval(this.verificationInterval);\n        this.verificationInterval = null;\n      }\n\n      // 跳转到登录页面\n      this.$router.push('/login');\n    },\n    async promoteUser(userId) {\n      // 仅超级管理员可以执行升降级操作\n      if (this.isSuperAdmin) {\n        await axios.post(`${API}/promote/${userId}`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.fetchUsers(); // 刷新用户列表\n        this.fetchAdmins(); // 刷新管理员列表\n      }\n    },\n    async demoteUser(adminId) {\n      // 仅超级管理员可以执行升降级操作\n      if (this.isSuperAdmin) {\n        await axios.post(`${API}/demote/${adminId}`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.fetchUsers(); // 刷新用户列表\n        this.fetchAdmins(); // 刷新管理员列表\n      }\n    },\n    async fetchUserOrders() {\n      try {\n        const response = await axios.get(`${API}/orders/user`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.orders = response.data; // 存储订单信息\n      } catch (error) {\n        console.error('获取订单失败:', error);\n        if (error.response && error.response.status === 403) {\n          // 权限不足，清除认证信息并退出\n          this.handleAuthError();\n        } else {\n          alert('获取订单失败，请重试。');\n        }\n      }\n    },\n    // 删除用户\n    async deleteUser(userId) {\n      if (this.isSuperAdmin) {\n        try {\n          await axios.delete(`${API}/users/${userId}`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`\n            }\n          });\n          this.fetchUsers(); // 刷新用户列表\n          this.fetchAdmins(); // 刷新管理员列表\n        } catch (error) {\n          console.error('删除用户失败:', error);\n          if (error.response && error.response.status === 403) {\n            // 权限不足，清除认证信息并退出\n            this.handleAuthError();\n          } else {\n            alert('删除用户失败，请重试。');\n          }\n        }\n      }\n    },\n    viewOrderDetails(orderId) {\n      this.$router.push({\n        name: 'OrderDetail',\n        params: {\n          orderId\n        }\n      });\n    },\n    formatDate(dateString) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(dateString).toLocaleDateString('zh-CN', options);\n    }\n  },\n  mounted() {\n    if (this.isAdmin || this.isSuperAdmin) {\n      this.fetchUsers();\n      this.fetchAdmins();\n    }\n  }\n};","map":{"version":3,"names":["API","process","env","VUE_APP_API_URL","axios","verifyAuth","data","showAdminPanel","users","admins","orders","verificationInterval","computed","isLoggedIn","localStorage","getItem","isAdmin","role","isSuperAdmin","isAuthenticated","created","startVerification","watch","newValue","clearInterval","beforeUnmount","methods","verifyAndUpdate","setInterval","result","valid","reason","$forceUpdate","fetchUsers","response","get","headers","Authorization","error","console","status","handleAuthError","fetchAdmins","removeItem","$router","push","promoteUser","userId","post","demoteUser","adminId","fetchUserOrders","alert","deleteUser","delete","viewOrderDetails","orderId","name","params","formatDate","dateString","options","year","month","day","hour","minute","Date","toLocaleDateString","mounted"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\DiscoverPage.vue"],"sourcesContent":["<!-- DiscoverPage.vue -->\n<template>\n  <div class=\"discover\">\n    <h2>发现</h2>\n\n    <!-- 检查用户是否已登录 -->\n    <div v-if=\"isLoggedIn\">\n\n      <!-- 普通用户可以看到的订餐按钮 -->\n      <div v-if=\"!isAdmin && !isSuperAdmin\">\n        <router-link to=\"/CanteenOrder\">\n          <button>社区食堂</button>\n        </router-link>\n      </div>\n\n      <!-- 用户的订单详细按钮 -->\n      <div v-if=\"!isAdmin && !isSuperAdmin\">\n        <button @click=\"fetchUserOrders\">查看我的订单</button>\n      </div>\n\n      <!-- 用户订单列表 -->\n      <div v-if=\"orders.length > 0\">\n        <h3>我的订单</h3>\n        <ul>\n          <li v-for=\"order in orders\" :key=\"order.id\">\n            订单 ID: {{ order.id }}, 总价格: {{ order.total_price }} 元, 创建时间: {{ formatDate(order.created_at) }}\n            <button @click=\"viewOrderDetails(order.id)\"> 查看详情 </button>\n          </li>\n        </ul>\n      </div>\n\n      <!-- 管理员和超级管理员可以看到的管理模块按钮 -->\n      <div v-if=\"isSuperAdmin || isAdmin\">\n        <router-link to=\"/articles/new\">\n          <button>文章编写</button>\n        </router-link>\n      </div>\n\n      <div v-if=\"isAdmin || isSuperAdmin\">\n        <button @click=\"showAdminPanel = true\">管理模块</button>\n      </div>\n\n      <div v-if=\"showAdminPanel\" class=\"admin-panel\">\n        <h3>管理员和用户列表</h3>\n        <button @click=\"showAdminPanel = false\">关闭</button>\n        <div>\n          <h4>管理员列表</h4>\n          <ul>\n            <li v-for=\"admin in admins\" :key=\"admin.id\">\n              {{ admin.username }}\n              <span v-if=\"isSuperAdmin\"> <!-- 仅超级管理员可以降级 -->\n                <button @click=\"demoteUser(admin.id)\">降为用户</button>\n                <button @click=\"deleteUser(admin.id)\">删除</button>\n              </span>\n            </li>\n          </ul>\n        </div>\n        <div>\n          <h4>用户列表</h4>\n          <ul>\n            <li v-for=\"user in users\" :key=\"user.id\">\n              {{ user.username }}\n              <span v-if=\"isSuperAdmin\"> <!-- 仅超级管理员可以升级 -->\n                <button @click=\"promoteUser(user.id)\">升为管理员</button>\n                <button @click=\"deleteUser(user.id)\">删除</button>\n              </span>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <!-- 管理员和超级管理员的食堂管理按钮 -->\n      <div v-if=\"isAdmin || isSuperAdmin\">\n        <router-link to=\"/canteenadmin\">\n          <button>食堂管理</button>\n        </router-link>\n      </div>\n      <!-- 订单管理 -->\n      <div v-if=\"isAdmin || isSuperAdmin\">\n        <router-link to=\"/canteen/orders\">\n          <button>订单管理</button>\n        </router-link>\n      </div>\n    </div>\n\n    <!-- 未登录用户 -->\n    <div v-else>\n      <p>请登录以查看内容。</p>\n    </div>\n  </div>\n\n</template>\n\n<script>\nconst API = process.env.VUE_APP_API_URL;\nimport axios from 'axios';\nimport { verifyAuth } from '@/utils/auth';\n\nexport default {\n  data() {\n    return {\n      showAdminPanel: false,\n      users: [],\n      admins: [],\n      orders: [], // 在数据中新增 orders 来存储用户订单\n      verificationInterval: null\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return !!localStorage.getItem('authToken'); // 检查是否有 token\n    },\n    // 计算属性，用于检查用户是否为管理员或超级管理员\n    isAdmin() {\n      const role = localStorage.getItem('userRole');\n      return role === 'admin'; // 仅普通管理员\n    },\n    isSuperAdmin() {\n      const role = localStorage.getItem('userRole');\n      return role === 'super_admin'; // 仅超级管理员\n    },\n    isAuthenticated() {\n      return !!localStorage.getItem('authToken'); // 检查是否登录\n    },\n  },\n  async created() {\n    // 只在登录状态下启动验证\n    if (this.isLoggedIn) {\n      this.startVerification();\n    }\n  },\n  watch: {\n    // 监听登录状态变化\n    isLoggedIn(newValue) {\n      if (newValue) {\n        // 登录后启动验证\n        this.startVerification();\n      } else {\n        // 登出后清除验证定时器\n        if (this.verificationInterval) {\n          clearInterval(this.verificationInterval);\n          this.verificationInterval = null;\n        }\n      }\n    }\n  },\n  beforeUnmount() {\n    // 组件销毁时清除定时器\n    if (this.verificationInterval) {\n      clearInterval(this.verificationInterval);\n    }\n  },\n  methods: {\n    startVerification() {\n      // 如果已经有定时器在运行，先清除它\n      if (this.verificationInterval) {\n        clearInterval(this.verificationInterval);\n      }\n      \n      // 立即进行一次验证\n      this.verifyAndUpdate();\n      \n      // 每5分钟验证一次\n      this.verificationInterval = setInterval(() => {\n        this.verifyAndUpdate();\n      }, 5 * 60 * 1000);\n    },\n    async verifyAndUpdate() {\n      // 如果未登录，不进行验证\n      if (!this.isLoggedIn) {\n        return;\n      }\n\n      const result = await verifyAuth();\n      if (!result.valid) {\n        switch (result.reason) {\n          case 'role-mismatch':\n            // 角色不匹配时，只更新角色不刷新页面\n            this.$forceUpdate();\n            break;\n          case 'no-token':\n          case 'invalid-token':\n          case 'unauthorized':\n            // 清除验证定时器\n            if (this.verificationInterval) {\n              clearInterval(this.verificationInterval);\n              this.verificationInterval = null;\n            }\n            break;\n          // 其他情况不做处理\n        }\n      }\n    },\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${API}/users`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\n          },\n        });\n        this.users = response.data.users; // 从 response.data.users 获取用户列表\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        if (error.response && error.response.status === 403) {\n          // 权限不足，清除认证信息并退出\n          this.handleAuthError();\n        }\n      }\n    },\n    async fetchAdmins() {\n      try {\n        const response = await axios.get(`${API}/admins`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\n          },\n        });\n        this.admins = response.data.admins; // 从 response.data.admins 获取管理员列表\n      } catch (error) {\n        console.error('获取管理员列表失败:', error);\n        if (error.response && error.response.status === 403) {\n          // 权限不足，清除认证信息并退出\n          this.handleAuthError();\n        }\n      }\n    },\n    handleAuthError() {\n      // 清除所有认证信息\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('username');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('email');\n      \n      // 停止验证定时器\n      if (this.verificationInterval) {\n        clearInterval(this.verificationInterval);\n        this.verificationInterval = null;\n      }\n      \n      // 跳转到登录页面\n      this.$router.push('/login');\n    },\n    async promoteUser(userId) {\n      // 仅超级管理员可以执行升降级操作\n      if (this.isSuperAdmin) {\n        await axios.post(`${API}/promote/${userId}`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\n          },\n        });\n        this.fetchUsers(); // 刷新用户列表\n        this.fetchAdmins(); // 刷新管理员列表\n      }\n    },\n    async demoteUser(adminId) {\n      // 仅超级管理员可以执行升降级操作\n      if (this.isSuperAdmin) {\n        await axios.post(`${API}/demote/${adminId}`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\n          },\n        });\n        this.fetchUsers(); // 刷新用户列表\n        this.fetchAdmins(); // 刷新管理员列表\n      }\n    },\n    async fetchUserOrders() {\n      try {\n        const response = await axios.get(`${API}/orders/user`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\n          },\n        });\n        this.orders = response.data; // 存储订单信息\n      } catch (error) {\n        console.error('获取订单失败:', error);\n        if (error.response && error.response.status === 403) {\n          // 权限不足，清除认证信息并退出\n          this.handleAuthError();\n        } else {\n          alert('获取订单失败，请重试。');\n        }\n      }\n    },\n    // 删除用户\n    async deleteUser(userId) {\n      if (this.isSuperAdmin) {\n        try {\n          await axios.delete(`${API}/users/${userId}`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`,\n            },\n          });\n          this.fetchUsers(); // 刷新用户列表\n          this.fetchAdmins(); // 刷新管理员列表\n        } catch (error) {\n          console.error('删除用户失败:', error);\n          if (error.response && error.response.status === 403) {\n            // 权限不足，清除认证信息并退出\n            this.handleAuthError();\n          } else {\n            alert('删除用户失败，请重试。');\n          }\n        }\n      }\n    },\n    viewOrderDetails(orderId) {\n      this.$router.push({ name: 'OrderDetail', params: { orderId } });\n    },\n    formatDate(dateString) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\n      return new Date(dateString).toLocaleDateString('zh-CN', options);\n    }\n  },\n\n  mounted() {\n    if (this.isAdmin || this.isSuperAdmin) {\n      this.fetchUsers();\n      this.fetchAdmins();\n    }\n  }\n\n};\n</script>\n\n<style scoped>\n.discover {\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n}\n\n.title {\n  font-size: 24px;\n  color: #333;\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.button-group {\n  text-align: center;\n  margin-bottom: 15px;\n}\n\n.admin-button,\n.article-button,\n.close-button,\n.action-button {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  margin: 5px;\n}\n\n.admin-button:hover,\n.article-button:hover,\n.close-button:hover,\n.action-button:hover {\n  background-color: #0056b3;\n}\n\n.admin-panel {\n  border: 1px solid #ccc;\n  padding: 15px;\n  margin-top: 20px;\n  border-radius: 8px;\n  background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nh3 {\n  text-align: center;\n  margin-bottom: 15px;\n}\n\nh4 {\n  margin-top: 10px;\n  color: #555;\n}\n\n.list {\n  list-style-type: none;\n  padding: 0;\n}\n\n.list li {\n  display: flex;\n  justify-content: space-between;\n  padding: 8px 0;\n  border-bottom: 1px solid #eee;\n}\n\n.list li:last-child {\n  border-bottom: none;\n}\n\n/* 按钮 */\n.admin-button,\n.article-button,\n.close-button,\n.action-button {\n  background: linear-gradient(135deg, #007bff, #0056b3);\n  color: white;\n  border: none;\n  padding: 15px 30px;\n  /* 增大按钮的内边距 */\n  border-radius: 8px;\n  /* 增加圆角 */\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin: 5px;\n  font-size: 18px;\n  /* 增大字体大小 */\n  box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);\n}\n\n.admin-button:hover,\n.article-button:hover,\n.close-button:hover,\n.action-button:hover {\n  background: linear-gradient(135deg, #0056b3, #004494);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 12px rgba(0, 123, 255, 0.3);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}