{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport { verifyAuth } from \"../utils/auth\";\nimport { handleApiError } from \"../utils/errorHandler\";\nimport { ElMessage } from 'element-plus';\nconst API = process.env.VUE_APP_API_URL;\nexport default {\n  data() {\n    return {\n      dialogVisible: false,\n      showAdminPanel: false,\n      users: [],\n      admins: [],\n      orders: [],\n      verificationInterval: null,\n      loading: false,\n      error: null,\n      isMobile: window.innerWidth <= 768\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return !!localStorage.getItem(\"authToken\");\n    },\n    isAdmin() {\n      const role = localStorage.getItem(\"userRole\");\n      return role === \"admin\";\n    },\n    isSuperAdmin() {\n      const role = localStorage.getItem(\"userRole\");\n      return role === \"super_admin\";\n    }\n  },\n  created() {\n    if (this.isLoggedIn) {\n      this.startVerification();\n    }\n    window.addEventListener('resize', this.handleResize);\n  },\n  beforeUnmount() {\n    if (this.verificationInterval) {\n      clearInterval(this.verificationInterval);\n    }\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    handleResize() {\n      this.isMobile = window.innerWidth <= 768;\n    },\n    startVerification() {\n      if (this.verificationInterval) {\n        clearInterval(this.verificationInterval);\n      }\n      this.verifyAndUpdate();\n      this.verificationInterval = setInterval(this.verifyAndUpdate, 300000);\n    },\n    async verifyAndUpdate() {\n      if (!this.isLoggedIn) return;\n      const result = await verifyAuth();\n      if (!result.valid) {\n        this.handleAuthError(result.reason);\n      }\n    },\n    handleAuthError(reason) {\n      if ([\"no-token\", \"invalid-token\", \"unauthorized\"].includes(reason)) {\n        localStorage.clear();\n        if (this.verificationInterval) {\n          clearInterval(this.verificationInterval);\n        }\n        this.$router.push(\"/login\");\n      }\n    },\n    async fetchUserOrders() {\n      try {\n        const response = await axios.get(`${API}/orders/user`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n          }\n        });\n        this.orders = response.data.orders || response.data || [];\n        if (this.orders.length === 0) {\n          ElMessage.info('暂无订单记录');\n        }\n      } catch (error) {\n        console.error('获取订单失败:', error);\n        ElMessage.error('获取订单列表失败，请重试');\n      }\n    },\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${API}/users`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n          }\n        });\n        this.users = response.data.users || response.data;\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        if (error.response?.status === 403) {\n          ElMessage.warning('您只有查看权限');\n        } else {\n          ElMessage.error('获取用户列表失败，请重试');\n        }\n      }\n    },\n    async fetchAdmins() {\n      try {\n        // 使用users接口，但是过滤出管理员\n        const response = await axios.get(`${API}/users`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n          },\n          params: {\n            role: 'admin'\n          } // 添加查询参数来获取管理员\n        });\n        const allUsers = response.data.users || response.data;\n        // 过滤出管理员和超级管理员\n        this.admins = allUsers.filter(user => user.role === 'admin' || user.role === 'super_admin');\n      } catch (error) {\n        console.error('获取管理员列表失败:', error);\n        if (error.response?.status === 403) {\n          ElMessage.warning('您只有查看权限');\n        } else {\n          ElMessage.error('获取管理员列表失败，请重试');\n        }\n      }\n    },\n    async openAdminPanel() {\n      this.dialogVisible = true;\n      await this.loadAdminData();\n    },\n    async loadAdminData() {\n      this.loading = true;\n      this.error = null;\n      try {\n        const results = await Promise.allSettled([this.fetchUsers(), this.fetchAdmins()]);\n\n        // 检查是否所有请求都失败了\n        const allFailed = results.every(result => result.status === 'rejected');\n        if (allFailed) {\n          this.error = '加载数据失败，请重试';\n        }\n      } catch (error) {\n        console.error('加载数据失败:', error);\n        this.error = '加载数据失败，请重试';\n      } finally {\n        this.loading = false;\n      }\n    },\n    closeDialog() {\n      this.dialogVisible = false;\n      this.error = null;\n    },\n    handleClose(done) {\n      this.error = null;\n      done();\n    },\n    async promoteUser(userId) {\n      if (this.isSuperAdmin) {\n        try {\n          await axios.post(`${API}/promote/${userId}`, {}, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n            }\n          });\n          ElMessage.success('用户已成功升级为管理员');\n          await this.loadAdminData();\n        } catch (error) {\n          handleApiError(error);\n          ElMessage.error('升级管理员失败，请稍后重试');\n        }\n      }\n    },\n    async demoteUser(adminId) {\n      if (this.isSuperAdmin) {\n        try {\n          await axios.post(`${API}/demote/${adminId}`, {}, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n            }\n          });\n          ElMessage.success('管理员已成功降级为普通用户');\n          await this.loadAdminData();\n        } catch (error) {\n          handleApiError(error);\n          ElMessage.error('降级管理员失败，请稍后重试');\n        }\n      }\n    },\n    async deleteUser(userId) {\n      if (this.isSuperAdmin) {\n        try {\n          await axios.delete(`${API}/users/${userId}`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n            }\n          });\n          await this.loadAdminData();\n        } catch (error) {\n          handleApiError(error);\n        }\n      }\n    },\n    viewOrderDetails(orderId) {\n      this.$router.push({\n        name: \"OrderDetail\",\n        params: {\n          orderId\n        }\n      });\n    },\n    formatDate(dateString) {\n      if (!dateString) return '感谢使用';\n      try {\n        const date = new Date(dateString);\n        if (isNaN(date.getTime())) return '--';\n        const options = {\n          year: \"numeric\",\n          month: \"2-digit\",\n          day: \"2-digit\",\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          hour12: false\n        };\n        return date.toLocaleString(\"zh-CN\", options).replace(/\\//g, '-');\n      } catch (error) {\n        console.error('日期格式化错误:', error);\n        return '--';\n      }\n    },\n    getOrderStatusText(status) {\n      const statusMap = {\n        0: '待处理',\n        1: '处理中',\n        2: '已完成',\n        3: '已取消'\n      };\n      return statusMap[status] || '未知状态';\n    }\n  },\n  mounted() {\n    if (this.isSuperAdmin) {\n      this.fetchUsers();\n      this.fetchAdmins();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}