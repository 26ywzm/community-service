{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { toArray, createNamespace, isFunction } from \"../utils/index.mjs\";\nconst [name, bem, t] = createNamespace(\"uploader\");\nfunction readFileContent(file, resultType) {\n  return new Promise(resolve => {\n    if (resultType === \"file\") {\n      resolve();\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = event => {\n      resolve(event.target.result);\n    };\n    if (resultType === \"dataUrl\") {\n      reader.readAsDataURL(file);\n    } else if (resultType === \"text\") {\n      reader.readAsText(file);\n    }\n  });\n}\nfunction isOversize(items, maxSize) {\n  return toArray(items).some(item => {\n    if (item.file) {\n      if (isFunction(maxSize)) {\n        return maxSize(item.file);\n      }\n      return item.file.size > +maxSize;\n    }\n    return false;\n  });\n}\nfunction filterFiles(items, maxSize) {\n  const valid = [];\n  const invalid = [];\n  items.forEach(item => {\n    if (isOversize(item, maxSize)) {\n      invalid.push(item);\n    } else {\n      valid.push(item);\n    }\n  });\n  return {\n    valid,\n    invalid\n  };\n}\nconst IMAGE_REGEXP = /\\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg|avif)/i;\nconst isImageUrl = url => IMAGE_REGEXP.test(url);\nfunction isImageFile(item) {\n  if (item.isImage) {\n    return true;\n  }\n  if (item.file && item.file.type) {\n    return item.file.type.indexOf(\"image\") === 0;\n  }\n  if (item.url) {\n    return isImageUrl(item.url);\n  }\n  if (typeof item.content === \"string\") {\n    return item.content.indexOf(\"data:image\") === 0;\n  }\n  return false;\n}\nexport { bem, filterFiles, isImageFile, isImageUrl, isOversize, name, readFileContent, t };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}