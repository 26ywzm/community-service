{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = process.env.VUE_APP_BASE_URL;\nexport default {\n  data() {\n    return {\n      users: [],\n      // 用户列表\n      selectedUser: null,\n      // 当前选择的用户\n      chatMessages: [],\n      // 当前用户的聊天记录\n      adminReply: '',\n      // 管理员输入的回复内容\n      message: {\n        show: false,\n        content: '',\n        type: 'success'\n      },\n      isSending: false // 防止重复发送\n    };\n  },\n  mounted() {\n    this.fetchUsers(); // 获取用户列表\n  },\n  methods: {\n    // 显示提示消息\n    showMessage(content, type = 'success') {\n      this.message = {\n        show: true,\n        content,\n        type\n      };\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/canteen/users`);\n        this.users = response.data;\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        this.showMessage('获取用户列表失败，请稍后重试', 'error');\n      }\n    },\n    // 选择与某个用户对话\n    async selectUser(user) {\n      this.selectedUser = user;\n      this.chatMessages = [];\n      this.fetchChatMessages(user.id); // 获取该用户的聊天记录\n    },\n    // 获取与选定用户的聊天记录\n    async fetchChatMessages(userId) {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/canteen/feedback/${userId}`);\n        this.chatMessages = response.data.map(msg => ({\n          ...msg,\n          isAdmin: msg.user_id !== userId // 区分管理员和用户的消息\n        }));\n      } catch (error) {\n        console.error('获取聊天记录失败:', error);\n        this.showMessage('获取聊天记录失败，请稍后重试', 'error');\n      }\n    },\n    // 发送管理员回复\n    async sendReply() {\n      if (!this.adminReply.trim()) {\n        this.showMessage('回复内容不能为空', 'error');\n        return;\n      }\n      this.isSending = true;\n      try {\n        const response = await axios.put(`${BASE_URL}/api/canteen/feedback/${this.selectedUser.id}/reply`, {\n          admin_reply: this.adminReply\n        });\n        this.showMessage('回复成功');\n        this.adminReply = ''; // 清空输入框\n        await this.fetchChatMessages(this.selectedUser.id); // 刷新聊天记录\n      } catch (error) {\n        console.error('发送回复失败:', error);\n        this.showMessage('发送回复失败，请稍后重试', 'error');\n      } finally {\n        this.isSending = false;\n      }\n    },\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n    }\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","VUE_APP_BASE_URL","data","users","selectedUser","chatMessages","adminReply","message","show","content","type","isSending","mounted","fetchUsers","methods","showMessage","setTimeout","response","get","error","console","selectUser","user","fetchChatMessages","id","userId","map","msg","isAdmin","user_id","sendReply","trim","put","admin_reply","formatTimestamp","timestamp","date","Date","toLocaleDateString","toLocaleTimeString"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\ManageFeedback.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <div class=\"user-list\">\n      <h3>用户列表</h3>\n      <ul>\n        <li v-for=\"user in users\" :key=\"user.id\" @click=\"selectUser(user)\">\n          {{ user.username }}\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"chat-box\" v-if=\"selectedUser\">\n      <h3>与 {{ selectedUser.username }} 的对话</h3>\n      <div class=\"messages\">\n        <div v-for=\"message in chatMessages\" :key=\"message.id\" :class=\"['message', message.isAdmin ? 'admin' : 'user']\">\n          <div class=\"message-content\">{{ message.message }}</div>\n          <div class=\"timestamp\">{{ formatTimestamp(message.created_at) }}</div>\n        </div>\n      </div>\n\n      <textarea v-model=\"adminReply\" placeholder=\"输入回复...\" rows=\"3\"></textarea>\n      <button @click=\"sendReply\" :disabled=\"isSending\">发送</button>\n    </div>\n\n    <!-- 提示消息 -->\n    <div v-if=\"message.show\" :class=\"['message', message.type]\">\n      {{ message.content }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nconst BASE_URL = process.env.VUE_APP_BASE_URL;\n\nexport default {\n  data() {\n    return {\n      users: [],  // 用户列表\n      selectedUser: null,  // 当前选择的用户\n      chatMessages: [],  // 当前用户的聊天记录\n      adminReply: '',  // 管理员输入的回复内容\n      message: {\n        show: false,\n        content: '',\n        type: 'success'\n      },\n      isSending: false  // 防止重复发送\n    };\n  },\n  mounted() {\n    this.fetchUsers();  // 获取用户列表\n  },\n  methods: {\n    // 显示提示消息\n    showMessage(content, type = 'success') {\n      this.message = {\n        show: true,\n        content,\n        type\n      };\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/canteen/users`);\n        this.users = response.data;\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        this.showMessage('获取用户列表失败，请稍后重试', 'error');\n      }\n    },\n\n    // 选择与某个用户对话\n    async selectUser(user) {\n      this.selectedUser = user;\n      this.chatMessages = [];\n      this.fetchChatMessages(user.id);  // 获取该用户的聊天记录\n    },\n\n    // 获取与选定用户的聊天记录\n    async fetchChatMessages(userId) {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/canteen/feedback/${userId}`);\n        this.chatMessages = response.data.map(msg => ({\n          ...msg,\n          isAdmin: msg.user_id !== userId  // 区分管理员和用户的消息\n        }));\n      } catch (error) {\n        console.error('获取聊天记录失败:', error);\n        this.showMessage('获取聊天记录失败，请稍后重试', 'error');\n      }\n    },\n\n    // 发送管理员回复\n    async sendReply() {\n      if (!this.adminReply.trim()) {\n        this.showMessage('回复内容不能为空', 'error');\n        return;\n      }\n      this.isSending = true;\n\n      try {\n        const response = await axios.put(`${BASE_URL}/api/canteen/feedback/${this.selectedUser.id}/reply`, {\n          admin_reply: this.adminReply,\n        });\n        this.showMessage('回复成功');\n        this.adminReply = '';  // 清空输入框\n        await this.fetchChatMessages(this.selectedUser.id);  // 刷新聊天记录\n      } catch (error) {\n        console.error('发送回复失败:', error);\n        this.showMessage('发送回复失败，请稍后重试', 'error');\n      } finally {\n        this.isSending = false;\n      }\n    },\n\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  justify-content: space-between;\n  padding: 20px;\n}\n\n.user-list {\n  width: 25%;\n}\n\n.user-list ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.user-list li {\n  padding: 10px;\n  cursor: pointer;\n  border-bottom: 1px solid #ccc;\n}\n\n.user-list li:hover {\n  background-color: #f0f0f0;\n}\n\n.chat-box {\n  width: 70%;\n  display: flex;\n  flex-direction: column;\n}\n\n.messages {\n  flex: 1;\n  overflow-y: auto;\n  margin-bottom: 10px;\n}\n\n.message {\n  padding: 10px;\n  border-radius: 8px;\n  margin-bottom: 10px;\n  max-width: 70%;\n}\n\n.message.admin {\n  background-color: #e0f7fa;\n  margin-left: auto;\n  text-align: right;\n}\n\n.message.user {\n  background-color: #e8e8e8;\n  margin-right: auto;\n}\n\n.message-content {\n  font-size: 14px;\n}\n\n.timestamp {\n  font-size: 12px;\n  color: #888;\n}\n\ntextarea {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 10px;\n  resize: vertical;\n}\n\nbutton {\n  padding: 8px 16px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.message {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  padding: 10px 20px;\n  border-radius: 4px;\n  color: white;\n  animation: slideIn 0.3s ease-out;\n}\n\n.message.success {\n  background-color: #4CAF50;\n}\n\n.message.error {\n  background-color: #f44336;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}