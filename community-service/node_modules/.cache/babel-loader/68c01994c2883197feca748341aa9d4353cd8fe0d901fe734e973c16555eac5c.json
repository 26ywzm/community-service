{"ast":null,"code":"import { computed, defineComponent, createVNode as _createVNode } from \"vue\";\nimport { createNamespace, HAPTICS_FEEDBACK, makeStringProp } from \"../utils/index.mjs\";\nimport { t, bem, compareMonth, getPrevMonth, getPrevYear, getNextMonth, getNextYear } from \"./utils.mjs\";\nimport { Icon } from \"../icon/index.mjs\";\nconst [name] = createNamespace(\"calendar-header\");\nvar stdin_default = defineComponent({\n  name,\n  props: {\n    date: Date,\n    minDate: Date,\n    maxDate: Date,\n    title: String,\n    subtitle: String,\n    showTitle: Boolean,\n    showSubtitle: Boolean,\n    firstDayOfWeek: Number,\n    switchMode: makeStringProp(\"none\")\n  },\n  emits: [\"clickSubtitle\", \"panelChange\"],\n  setup(props, {\n    slots,\n    emit\n  }) {\n    const prevMonthDisabled = computed(() => props.date && props.minDate && compareMonth(getPrevMonth(props.date), props.minDate) < 0);\n    const prevYearDisabled = computed(() => props.date && props.minDate && compareMonth(getPrevYear(props.date), props.minDate) < 0);\n    const nextMonthDisabled = computed(() => props.date && props.maxDate && compareMonth(getNextMonth(props.date), props.maxDate) > 0);\n    const nextYearDisabled = computed(() => props.date && props.maxDate && compareMonth(getNextYear(props.date), props.maxDate) > 0);\n    const renderTitle = () => {\n      if (props.showTitle) {\n        const text = props.title || t(\"title\");\n        const title = slots.title ? slots.title() : text;\n        return _createVNode(\"div\", {\n          \"class\": bem(\"header-title\")\n        }, [title]);\n      }\n    };\n    const onClickSubtitle = event => emit(\"clickSubtitle\", event);\n    const onPanelChange = date => emit(\"panelChange\", date);\n    const renderAction = isNext => {\n      const showYearAction = props.switchMode === \"year-month\";\n      const monthSlot = slots[isNext ? \"next-month\" : \"prev-month\"];\n      const yearSlot = slots[isNext ? \"next-year\" : \"prev-year\"];\n      const monthDisabled = isNext ? nextMonthDisabled.value : prevMonthDisabled.value;\n      const yearDisabled = isNext ? nextYearDisabled.value : prevYearDisabled.value;\n      const monthIconName = isNext ? \"arrow\" : \"arrow-left\";\n      const yearIconName = isNext ? \"arrow-double-right\" : \"arrow-double-left\";\n      const onMonthChange = () => onPanelChange((isNext ? getNextMonth : getPrevMonth)(props.date));\n      const onYearChange = () => onPanelChange((isNext ? getNextYear : getPrevYear)(props.date));\n      const MonthAction = _createVNode(\"view\", {\n        \"class\": bem(\"header-action\", {\n          disabled: monthDisabled\n        }),\n        \"onClick\": monthDisabled ? void 0 : onMonthChange\n      }, [monthSlot ? monthSlot({\n        disabled: monthDisabled\n      }) : _createVNode(Icon, {\n        \"class\": {\n          [HAPTICS_FEEDBACK]: !monthDisabled\n        },\n        \"name\": monthIconName\n      }, null)]);\n      const YearAction = showYearAction && _createVNode(\"view\", {\n        \"class\": bem(\"header-action\", {\n          disabled: yearDisabled\n        }),\n        \"onClick\": yearDisabled ? void 0 : onYearChange\n      }, [yearSlot ? yearSlot({\n        disabled: yearDisabled\n      }) : _createVNode(Icon, {\n        \"class\": {\n          [HAPTICS_FEEDBACK]: !yearDisabled\n        },\n        \"name\": yearIconName\n      }, null)]);\n      return isNext ? [MonthAction, YearAction] : [YearAction, MonthAction];\n    };\n    const renderSubtitle = () => {\n      if (props.showSubtitle) {\n        const title = slots.subtitle ? slots.subtitle({\n          date: props.date,\n          text: props.subtitle\n        }) : props.subtitle;\n        const canSwitch = props.switchMode !== \"none\";\n        return _createVNode(\"div\", {\n          \"class\": bem(\"header-subtitle\", {\n            \"with-switch\": canSwitch\n          }),\n          \"onClick\": onClickSubtitle\n        }, [canSwitch ? [renderAction(), _createVNode(\"div\", {\n          \"class\": bem(\"header-subtitle-text\")\n        }, [title]), renderAction(true)] : title]);\n      }\n    };\n    const renderWeekDays = () => {\n      const {\n        firstDayOfWeek\n      } = props;\n      const weekdays = t(\"weekdays\");\n      const renderWeekDays2 = [...weekdays.slice(firstDayOfWeek, 7), ...weekdays.slice(0, firstDayOfWeek)];\n      return _createVNode(\"div\", {\n        \"class\": bem(\"weekdays\")\n      }, [renderWeekDays2.map(text => _createVNode(\"span\", {\n        \"class\": bem(\"weekday\")\n      }, [text]))]);\n    };\n    return () => _createVNode(\"div\", {\n      \"class\": bem(\"header\")\n    }, [renderTitle(), renderSubtitle(), renderWeekDays()]);\n  }\n});\nexport { stdin_default as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}