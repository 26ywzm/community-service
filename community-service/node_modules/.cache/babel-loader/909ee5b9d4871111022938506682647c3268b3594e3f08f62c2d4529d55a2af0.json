{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios'; // 导入 axios\nconst API = process.env.VUE_APP_API_URL;\nexport default {\n  data() {\n    return {\n      users: [],\n      // 用户列表\n      selectedUser: null,\n      // 当前选中的用户\n      chatMessages: [],\n      // 当前用户的留言列表\n      selectedMessage: null,\n      // 当前选中要回复的留言\n      adminReply: '',\n      // 管理员回复内容\n      isSending: false,\n      // 是否正在发送消息\n      loading: false,\n      // 加载状态\n      message: {\n        show: false,\n        content: '',\n        type: ''\n      } // 消息提示\n    };\n  },\n  methods: {\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        const response = await axios.get(`${API}/api/users`, {\n          headers\n        });\n        console.log('获取到的用户列表:', response.data);\n        this.users = response.data || [];\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        alert('获取用户列表失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 选择用户，查看留言记录\n    selectUser(user) {\n      console.log('选择用户:', user);\n      this.selectedUser = user;\n      this.selectedMessage = null; // 清空选中的消息\n      this.adminReply = ''; // 清空回复框\n      if (user) {\n        this.fetchUserMessages(user.id);\n      } else {\n        this.chatMessages = [];\n      }\n    },\n    // 获取用户留言记录\n    async fetchUserMessages(userId) {\n      if (!userId) {\n        console.log('未选择用户');\n        return;\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        const response = await axios.get(`${API}/api/feedback/${userId}`, {\n          headers\n        });\n        this.chatMessages = response.data.map(msg => ({\n          ...msg,\n          isAdmin: msg.admin_reply !== null\n        }));\n      } catch (error) {\n        alert('获取留言记录失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 选择要回复的留言\n    selectMessage(message) {\n      this.selectedMessage = message;\n      this.adminReply = ''; // 清空回复内容\n    },\n    // 发送消息\n    async sendMessage() {\n      if (!this.adminReply.trim()) {\n        alert('请输入回复内容');\n        return;\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        if (this.selectedMessage) {\n          // 回复特定留言\n          await axios.put(`${API}/api/feedback/${this.selectedMessage.id}/reply`, {\n            admin_reply: this.adminReply\n          }, {\n            headers\n          });\n        } else if (this.selectedUser) {\n          // 发送新消息\n          await axios.post(`${API}/api/feedback/admin-message`, {\n            user_id: this.selectedUser.id,\n            message: this.adminReply\n          }, {\n            headers\n          });\n        }\n        alert('消息发送成功');\n        await this.fetchUserMessages(this.selectedUser.id);\n        this.adminReply = '';\n        this.selectedMessage = null;\n      } catch (error) {\n        alert('发送消息失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 取消回复\n    cancelReply() {\n      this.selectedMessage = null;\n      this.adminReply = '';\n    },\n    // 删除留言\n    async deleteMessage(message) {\n      if (!confirm('确定要删除这条留言吗？')) return;\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        await axios.delete(`${API}/api/feedback/${message.id}`, {\n          headers\n        });\n        alert('留言已删除');\n        await this.fetchUserMessages(this.selectedUser.id);\n      } catch (error) {\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 删除整个用户的对话\n    async deleteUserConversation() {\n      if (!confirm('确定要删除与该用户的所有留言吗？')) {\n        return;\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        await axios.delete(`${API}/api/feedback`, {\n          data: {\n            user_id: this.selectedUser.id\n          },\n          headers\n        });\n        alert('该用户的留言已删除');\n        this.selectedUser = null; // 清空选中的用户\n        this.chatMessages = []; // 清空聊天记录\n      } catch (error) {\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 显示消息提示\n    showMessage(content, type) {\n      this.message.content = content;\n      this.message.type = type;\n      this.message.show = true;\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    }\n  },\n  mounted() {\n    // 检查用户角色\n    const userRole = localStorage.getItem('userRole');\n    if (userRole !== 'admin' && userRole !== 'super_admin') {\n      this.$router.push('/');\n      return;\n    }\n    // 只获取用户列表，不自动获取留言\n    this.fetchUsers();\n    this.chatMessages = []; // 初始化为空数组\n  }\n};","map":{"version":3,"names":["axios","API","process","env","VUE_APP_API_URL","data","users","selectedUser","chatMessages","selectedMessage","adminReply","isSending","loading","message","show","content","type","methods","fetchUsers","token","localStorage","getItem","userRole","$router","push","headers","response","get","console","log","error","alert","selectUser","user","fetchUserMessages","id","userId","map","msg","isAdmin","admin_reply","selectMessage","sendMessage","trim","put","post","user_id","cancelReply","deleteMessage","confirm","delete","deleteUserConversation","showMessage","setTimeout","formatTimestamp","timestamp","date","Date","toLocaleString","mounted"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\ManageFeedback.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 用户列表 -->\n    <div class=\"user-list\">\n      <h3>用户列表</h3>\n      <ul>\n        <li v-for=\"user in users\" :key=\"user.id\" @click=\"selectUser(user)\"\n            :class=\"{ active: selectedUser && selectedUser.id === user.id }\">\n          {{ user.username }}\n          <span class=\"message-count\">{{ user.messageCount }}</span>\n        </li>\n      </ul>\n      <div v-if=\"users.length === 0\" class=\"no-users\">暂无用户</div>\n    </div>\n\n    <!-- 留言记录 -->\n    <div class=\"chat-box\">\n      <h3>{{ selectedUser ? `与 ${selectedUser.username} 的留言记录` : '所有用户留言记录' }}</h3>\n      <div v-if=\"!selectedUser\" class=\"no-selection\">请选择一个用户</div>\n      <div v-else class=\"messages\">\n        <div v-for=\"message in chatMessages\" :key=\"message.id\" \n             :class=\"['message', message.isAdmin ? 'admin' : 'user']\">\n          <div class=\"message-header\">\n            <span class=\"username\">{{ message.username }}</span>\n            <div class=\"message-actions\">\n              <button class=\"action-btn delete\" @click=\"deleteMessage(message)\">\n                删除\n              </button>\n              <button v-if=\"!message.admin_reply\" \n                      class=\"action-btn reply\" \n                      @click=\"selectMessage(message)\">\n                回复\n              </button>\n            </div>\n          </div>\n          <div class=\"message-content\">{{ message.message }}</div>\n          <div class=\"message-reply\" v-if=\"message.admin_reply\">\n            <strong>管理员回复：</strong> {{ message.admin_reply }}\n          </div>\n          <div class=\"timestamp\">{{ formatTimestamp(message.created_at) }}</div>\n        </div>\n        <div v-if=\"chatMessages.length === 0\" class=\"no-messages\">暂无留言</div>\n      </div>\n\n      <!-- 管理员回复区域 -->\n      <div class=\"reply-area\">\n        <div v-if=\"selectedMessage\" class=\"selected-message\">\n          正在回复: {{ selectedMessage.message }}\n          <button @click=\"cancelReply\" class=\"cancel-btn small\">取消回复</button>\n        </div>\n        <div class=\"input-area\">\n          <textarea v-model=\"adminReply\" \n                    :placeholder=\"selectedMessage ? '输入回复...' : (selectedUser ? '发送新消息给该用户...' : '请先选择一个用户')\" \n                    rows=\"3\"\n                    :disabled=\"!selectedUser && !selectedMessage\"></textarea>\n          <div class=\"button-group\">\n            <button @click=\"sendMessage\" \n                    :disabled=\"isSending || !adminReply.trim() || (!selectedUser && !selectedMessage)\">\n              {{ isSending ? '发送中...' : '发送' }}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <!-- 删除对话按钮 -->\n      <div v-if=\"selectedUser\" class=\"delete-conversation-btn\">\n        <button @click=\"deleteUserConversation\">\n          删除该用户的所有留言\n        </button>\n      </div>\n    </div>\n\n    <!-- 提示消息 -->\n    <div v-if=\"message.show\" :class=\"['message-toast', message.type]\">\n      {{ message.content }}\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';  // 导入 axios\nconst API = process.env.VUE_APP_API_URL;\nexport default {\n  data() {\n    return {\n      users: [],           // 用户列表\n      selectedUser: null,  // 当前选中的用户\n      chatMessages: [],    // 当前用户的留言列表\n      selectedMessage: null, // 当前选中要回复的留言\n      adminReply: '',      // 管理员回复内容\n      isSending: false,    // 是否正在发送消息\n      loading: false,      // 加载状态\n      message: { show: false, content: '', type: '' }  // 消息提示\n    };\n  },\n  methods: {\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        const response = await axios.get(`${API}/api/users`, { headers });\n        console.log('获取到的用户列表:', response.data);\n        this.users = response.data || [];\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        alert('获取用户列表失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 选择用户，查看留言记录\n    selectUser(user) {\n      console.log('选择用户:', user);\n      this.selectedUser = user;\n      this.selectedMessage = null;  // 清空选中的消息\n      this.adminReply = '';        // 清空回复框\n      if (user) {\n        this.fetchUserMessages(user.id);\n      } else {\n        this.chatMessages = [];\n      }\n    },\n\n    // 获取用户留言记录\n    async fetchUserMessages(userId) {\n      if (!userId) {\n        console.log('未选择用户');\n        return;\n      }\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        const response = await axios.get(`${API}/api/feedback/${userId}`, { headers });\n        this.chatMessages = response.data.map(msg => ({\n          ...msg,\n          isAdmin: msg.admin_reply !== null\n        }));\n      } catch (error) {\n        alert('获取留言记录失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 选择要回复的留言\n    selectMessage(message) {\n      this.selectedMessage = message;\n      this.adminReply = '';  // 清空回复内容\n    },\n\n    // 发送消息\n    async sendMessage() {\n      if (!this.adminReply.trim()) {\n        alert('请输入回复内容');\n        return;\n      }\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        \n        if (this.selectedMessage) {\n          // 回复特定留言\n          await axios.put(`${API}/api/feedback/${this.selectedMessage.id}/reply`, \n            { admin_reply: this.adminReply },\n            { headers }\n          );\n        } else if (this.selectedUser) {\n          // 发送新消息\n          await axios.post(`${API}/api/feedback/admin-message`, {\n            user_id: this.selectedUser.id,\n            message: this.adminReply\n          }, { headers });\n        }\n\n        alert('消息发送成功');\n        await this.fetchUserMessages(this.selectedUser.id);\n        this.adminReply = '';\n        this.selectedMessage = null;\n      } catch (error) {\n        alert('发送消息失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 取消回复\n    cancelReply() {\n      this.selectedMessage = null;\n      this.adminReply = '';\n    },\n\n    // 删除留言\n    async deleteMessage(message) {\n      if (!confirm('确定要删除这条留言吗？')) return;\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        await axios.delete(`${API}/api/feedback/${message.id}`, { headers });\n        alert('留言已删除');\n        await this.fetchUserMessages(this.selectedUser.id);\n      } catch (error) {\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 删除整个用户的对话\n    async deleteUserConversation() {\n      if (!confirm('确定要删除与该用户的所有留言吗？')) {\n        return;\n      }\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        await axios.delete(`${API}/api/feedback`, {\n          data: { user_id: this.selectedUser.id },\n          headers\n        });\n\n        alert('该用户的留言已删除');\n        this.selectedUser = null;  // 清空选中的用户\n        this.chatMessages = [];  // 清空聊天记录\n      } catch (error) {\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 显示消息提示\n    showMessage(content, type) {\n      this.message.content = content;\n      this.message.type = type;\n      this.message.show = true;\n\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    }\n  },\n\n  mounted() {\n    // 检查用户角色\n    const userRole = localStorage.getItem('userRole');\n    if (userRole !== 'admin' && userRole !== 'super_admin') {\n      this.$router.push('/');\n      return;\n    }\n    // 只获取用户列表，不自动获取留言\n    this.fetchUsers();\n    this.chatMessages = [];  // 初始化为空数组\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  height: 100%;\n  padding: 20px;\n  gap: 20px;\n}\n\n.user-list {\n  width: 250px;\n  border-right: 1px solid #ddd;\n  padding-right: 20px;\n}\n\n.user-list h3 {\n  margin-bottom: 15px;\n  color: #333;\n}\n\n.user-list ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.user-list li {\n  padding: 10px;\n  margin-bottom: 5px;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.user-list li:hover {\n  background-color: #f5f5f5;\n}\n\n.user-list li.active {\n  background-color: #e3f2fd;\n  color: #1976d2;\n}\n\n.message-count {\n  font-size: 12px;\n  color: #666;\n}\n\n.no-users {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n\n.chat-box {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.no-selection {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  margin-top: 20px;\n}\n\n.messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 10px;\n}\n\n.message {\n  margin-bottom: 15px;\n  padding: 10px;\n  border-radius: 4px;\n  background-color: #f5f5f5;\n}\n\n.message.admin {\n  background-color: #e3f2fd;\n}\n\n.message-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.username {\n  font-weight: bold;\n  color: #333;\n}\n\n.message-content {\n  margin: 10px 0;\n}\n\n.message-reply {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #fff;\n  border-radius: 4px;\n}\n\n.timestamp {\n  font-size: 12px;\n  color: #666;\n  text-align: right;\n}\n\n.reply-area {\n  margin-top: 20px;\n  padding-top: 20px;\n  border-top: 1px solid #ddd;\n}\n\n.input-area {\n  display: flex;\n  gap: 10px;\n}\n\ntextarea {\n  flex: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  resize: vertical;\n}\n\n.action-btn {\n  padding: 5px 10px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 12px;\n  transition: background-color 0.2s;\n}\n\n.action-btn.delete {\n  background-color: #ef5350;\n  color: white;\n}\n\n.action-btn.reply {\n  background-color: #66bb6a;\n  color: white;\n}\n\n.action-btn:hover {\n  opacity: 0.9;\n}\n\n.selected-message {\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.cancel-btn {\n  padding: 5px 10px;\n  background-color: #9e9e9e;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.send-btn {\n  padding: 10px 20px;\n  background-color: #1976d2;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.send-btn:hover {\n  background-color: #1565c0;\n}\n\n.no-messages {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}