{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nconst API_URL = process.env.VUE_APP_API_URL;\nconsole.log('Current API_URL:', API_URL);\nexport default {\n  created() {\n    // 强制清除该页面的缓存\n    if (window.caches) {\n      caches.keys().then(names => {\n        names.forEach(name => {\n          caches.delete(name);\n        });\n      });\n    }\n  },\n  data() {\n    return {\n      orders: [],\n      // 存储所有订单信息\n      showDialog: false,\n      dialogMessage: '',\n      lastActionTime: 0,\n      // 记录上一次操作的时间戳\n      loading: false,\n      // 状态显示文本\n      statusText: {\n        0: '待处理',\n        1: '处理中',\n        2: '已完成',\n        3: '已取消'\n      }\n    };\n  },\n  async mounted() {\n    await this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        this.loading = true;\n        const token = localStorage.getItem('authToken');\n        if (!token) {\n          ElMessage.error('请先登录');\n          return;\n        }\n\n        // 添加时间戳防止缓存\n        const timestamp = new Date().getTime();\n        const response = await axios.get(`${API_URL}/canteen/orders?_t=${timestamp}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Cache-Control': 'no-cache',\n            'Pragma': 'no-cache'\n          }\n        });\n        if (response.data.orders) {\n          this.orders = response.data.orders.map(order => ({\n            ...order,\n            lastActionTime: 0,\n            items: order.items || [] // 确保 items 存在\n          }));\n        }\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        if (error.response?.status === 403) {\n          ElMessage.error('没有权限访问订单列表');\n        } else {\n          ElMessage.error(error.response?.data?.message || '获取订单列表失败');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    async handleButtonClick(order) {\n      if (!this.canPerformAction(order)) {\n        ElMessage.warning('操作太频繁，请稍后再试');\n        return;\n      }\n      try {\n        let newStatus;\n        const currentStatus = parseInt(order.status);\n        switch (currentStatus) {\n          case 0:\n            // pending\n            newStatus = 1; // confirmed\n            break;\n          case 1:\n            // confirmed\n            newStatus = 2; // completed\n            break;\n          default:\n            ElMessage.error(`当前状态 ${this.statusText[order.status]} 无法进行操作`);\n            return;\n        }\n        await this.updateOrderStatus(order, newStatus);\n        // 操作成功后刷新订单列表\n        await this.fetchOrders();\n      } catch (error) {\n        console.error('操作失败:', error);\n        ElMessage.error('操作失败，请重试');\n      }\n    },\n    canPerformAction(order) {\n      const now = Date.now();\n      // 如果是第一次操作，或者距离上次操作超过3秒\n      if (!order.lastActionTime || now - order.lastActionTime > 3000) {\n        return true;\n      }\n      return false;\n    },\n    async updateOrderStatus(order, status) {\n      try {\n        console.log('Updating order status:', {\n          orderId: order.id,\n          status: status\n        });\n        await axios.put(`${API_URL}/canteen/orders/${order.id}`, {\n          status\n        }, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        ElMessage.success(`订单状态已更新为${this.statusText[status]}`);\n        order.lastActionTime = Date.now(); // 更新最后操作时间\n        order.status = status; // 更新本地状态\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        ElMessage.error(error.response?.data?.message || '更新订单状态失败，请重试');\n        throw error;\n      }\n    },\n    async handleDeleteOrder(order) {\n      try {\n        if (!confirm('确定要删除这个订单吗？此操作不可撤销。')) {\n          return;\n        }\n        await axios.delete(`${API_URL}/canteen/orders/${order.id}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        ElMessage.success('订单已删除');\n        // 从列表中移除该订单\n        this.orders = this.orders.filter(o => o.id !== order.id);\n      } catch (error) {\n        console.error('删除订单失败:', error);\n        ElMessage.error(error.response?.data?.message || '删除订单失败，请重试');\n      }\n    },\n    closeDialog() {\n      this.showDialog = false;\n      this.dialogMessage = '';\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return {\n        date: date.toLocaleDateString('zh-CN', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit'\n        }),\n        time: date.toLocaleTimeString('zh-CN', {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","API_URL","process","env","VUE_APP_API_URL","console","log","created","window","caches","keys","then","names","forEach","name","delete","data","orders","showDialog","dialogMessage","lastActionTime","loading","statusText","mounted","fetchOrders","methods","token","localStorage","getItem","error","timestamp","Date","getTime","response","get","headers","map","order","items","status","message","handleButtonClick","canPerformAction","warning","newStatus","currentStatus","parseInt","updateOrderStatus","now","orderId","id","put","success","handleDeleteOrder","confirm","filter","o","closeDialog","formatDate","dateString","date","toLocaleDateString","year","month","day","time","toLocaleTimeString","hour","minute"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\OrderManagement.vue"],"sourcesContent":["<template>\n  <div class=\"order-management\">\n    <h2>订单管理</h2>\n    <div v-if=\"loading\" class=\"loading\">加载中...</div>\n    <div v-else>\n      <!-- 订单卡片布局 -->\n      <div class=\"order-cards\">\n        <div v-for=\"order in orders\" :key=\"order.id\" class=\"order-card\">\n          <h3>订单ID: {{ order.id }}</h3>\n          <div class=\"order-info\">\n            <div class=\"user-info\">\n              <div>{{ order.username }}</div>\n              <div class=\"email\">{{ order.email }}</div>\n            </div>\n            <div class=\"order-items\">\n              <div v-for=\"item in order.items\" :key=\"item.menu_item_id\" class=\"order-item\">\n                <span class=\"item-name\">{{ item.name }}</span>\n                <div class=\"item-details\">\n                  <span>数量: {{ item.quantity }}</span>\n                  <span>单价: ¥{{ item.price }}</span>\n                  <span>小计: ¥{{ item.quantity * item.price }}</span>\n                </div>\n              </div>\n            </div>\n            <div class=\"price\">总价: ¥{{ order.total_price }}</div>\n            <div class=\"status\">\n              <span :class=\"['status-tag', 'status-' + order.status]\">\n                {{ statusText[order.status] }}\n              </span>\n            </div>\n            <div class=\"time-info\">\n              <div>{{ formatDate(order.created_at).date }}</div>\n              <div class=\"time\">{{ formatDate(order.created_at).time }}</div>\n            </div>\n            <div class=\"order-actions\">\n              <button \n                v-if=\"parseInt(order.status) === 0\" \n                class=\"btn-confirm\"\n                @click=\"handleButtonClick(order)\"\n              >开始处理</button>\n              <button \n                v-if=\"parseInt(order.status) === 1\" \n                class=\"btn-complete\"\n                @click=\"handleButtonClick(order)\"\n              >完成订单</button>\n              <button \n                v-if=\"parseInt(order.status) === 2\" \n                class=\"btn-delete\"\n                @click=\"handleDeleteOrder(order)\"\n              >删除订单</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div v-if=\"orders.length === 0 && !loading\">\n      <p class=\"empty-message\">没有找到订单。</p>\n    </div>\n\n    <!-- 对话框 -->\n    <div v-if=\"showDialog\" class=\"dialog-overlay\">\n      <div class=\"dialog\">\n        <p>{{ dialogMessage }}</p>\n        <button @click=\"closeDialog\">确定</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\n\nconst API_URL = process.env.VUE_APP_API_URL;\nconsole.log('Current API_URL:', API_URL);\n\nexport default {\n  created() {\n    // 强制清除该页面的缓存\n    if (window.caches) {\n      caches.keys().then(names => {\n        names.forEach(name => {\n          caches.delete(name);\n        });\n      });\n    }\n  },\n  data() {\n    return {\n      orders: [], // 存储所有订单信息\n      showDialog: false,\n      dialogMessage: '',\n      lastActionTime: 0, // 记录上一次操作的时间戳\n      loading: false,\n      // 状态显示文本\n      statusText: {\n        0: '待处理',\n        1: '处理中',\n        2: '已完成',\n        3: '已取消'\n      }\n    };\n  },\n  async mounted() {\n    await this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        this.loading = true;\n        const token = localStorage.getItem('authToken');\n        \n        if (!token) {\n          ElMessage.error('请先登录');\n          return;\n        }\n\n        // 添加时间戳防止缓存\n        const timestamp = new Date().getTime();\n        const response = await axios.get(`${API_URL}/canteen/orders?_t=${timestamp}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Cache-Control': 'no-cache',\n            'Pragma': 'no-cache'\n          }\n        });\n\n        if (response.data.orders) {\n          this.orders = response.data.orders.map(order => ({\n            ...order,\n            lastActionTime: 0,\n            items: order.items || [] // 确保 items 存在\n          }));\n        }\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        if (error.response?.status === 403) {\n          ElMessage.error('没有权限访问订单列表');\n        } else {\n          ElMessage.error(error.response?.data?.message || '获取订单列表失败');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    async handleButtonClick(order) {\n      if (!this.canPerformAction(order)) {\n        ElMessage.warning('操作太频繁，请稍后再试');\n        return;\n      }\n\n      try {\n        let newStatus;\n        const currentStatus = parseInt(order.status);\n        switch (currentStatus) {\n          case 0:  // pending\n            newStatus = 1;  // confirmed\n            break;\n          case 1:  // confirmed\n            newStatus = 2;  // completed\n            break;\n          default:\n            ElMessage.error(`当前状态 ${this.statusText[order.status]} 无法进行操作`);\n            return;\n        }\n\n        await this.updateOrderStatus(order, newStatus);\n        // 操作成功后刷新订单列表\n        await this.fetchOrders();\n      } catch (error) {\n        console.error('操作失败:', error);\n        ElMessage.error('操作失败，请重试');\n      }\n    },\n\n    canPerformAction(order) {\n      const now = Date.now();\n      // 如果是第一次操作，或者距离上次操作超过3秒\n      if (!order.lastActionTime || now - order.lastActionTime > 3000) {\n        return true;\n      }\n      return false;\n    },\n\n    async updateOrderStatus(order, status) {\n      try {\n        console.log('Updating order status:', { orderId: order.id, status: status });\n        await axios.put(\n          `${API_URL}/canteen/orders/${order.id}`, \n          { status }, \n          {\n            headers: {\n              'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n              'Content-Type': 'application/json'\n            }\n          }\n        );\n        \n        ElMessage.success(`订单状态已更新为${this.statusText[status]}`);\n        order.lastActionTime = Date.now(); // 更新最后操作时间\n        order.status = status; // 更新本地状态\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        ElMessage.error(error.response?.data?.message || '更新订单状态失败，请重试');\n        throw error;\n      }\n    },\n\n    async handleDeleteOrder(order) {\n      try {\n        if (!confirm('确定要删除这个订单吗？此操作不可撤销。')) {\n          return;\n        }\n        \n        await axios.delete(`${API_URL}/canteen/orders/${order.id}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        \n        ElMessage.success('订单已删除');\n        // 从列表中移除该订单\n        this.orders = this.orders.filter(o => o.id !== order.id);\n      } catch (error) {\n        console.error('删除订单失败:', error);\n        ElMessage.error(error.response?.data?.message || '删除订单失败，请重试');\n      }\n    },\n\n    closeDialog() {\n      this.showDialog = false;\n      this.dialogMessage = '';\n    },\n\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return {\n        date: date.toLocaleDateString('zh-CN', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit'\n        }),\n        time: date.toLocaleTimeString('zh-CN', {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      };\n    }\n  }\n};\n</script>\n\n<style scoped>\n.order-management {\n  padding: 16px;\n}\n\nh2 {\n  color: #303133;\n  margin-bottom: 16px;\n  font-size: 24px;\n}\n\n.order-cards {\n  display: flex;\n  flex-wrap: wrap; /* 允许换行 */\n  gap: 16px;\n  justify-content: flex-start; /* 所有订单对齐到左边 */\n}\n\n.order-card {\n  background-color: white;\n  border-radius: 8px;\n  padding: 16px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n  width: 300px; /* 固定宽度 */\n  box-sizing: border-box;\n  flex-grow: 1; /* 允许订单卡片在没有足够空间时扩展 */\n}\n\n.order-info {\n  margin-top: 16px;\n}\n\n.order-items {\n  padding: 8px 0;\n}\n\n.order-item {\n  background-color: #f8f9fa;\n  padding: 8px;\n  margin-bottom: 8px;\n}\n\n.item-info {\n  display: flex;\n  flex-direction: column; /* 垂直排列 */\n  gap: 4px; /* 为每个信息项提供间距 */\n}\n\n.item-name {\n  font-weight: bold;\n  color: #303133;\n}\n\n.item-details {\n  font-size: 14px;\n  color: #606266;\n}\n\n.item-quantity,\n.item-price,\n.item-total {\n  margin-bottom: 4px; /* 让数量、单价和小计之间有间距 */\n}\n\n.price {\n  font-weight: bold;\n  margin-top: 12px;\n}\n\n.status-tag {\n  padding: 2px 6px;\n  border-radius: 4px;\n  font-size: 12px;\n}\n\n.time-info {\n  display: flex;\n  flex-direction: column;\n  margin-top: 8px;\n}\n\n.time {\n  font-size: 14px;\n  color: #909399;\n}\n\n.order-actions {\n  margin-top: 12px;\n  display: flex;\n  gap: 8px;\n  flex-direction: column;\n}\n\nbutton {\n  padding: 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: 0.3s;\n  margin: 4px 0;\n  font-size: 14px;\n  width: 100%;\n}\n\n.btn-confirm {\n  background-color: #67C23A;\n  color: white;\n}\n\n.btn-complete {\n  background-color: #409EFF;\n  color: white;\n}\n\n.btn-delete {\n  background-color: #F56C6C;\n  color: white;\n}\n\n.empty-message {\n  text-align: center;\n  color: #909399;\n  margin-top: 40px;\n}\n\n/* Mobile Optimization */\n@media screen and (max-width: 768px) {\n  table {\n    display: none; /* 隐藏桌面端表格 */\n  }\n\n  .order-cards {\n    flex-direction: column; /* 垂直排列 */\n    align-items: flex-start; /* 所有订单左对齐 */\n    gap: 16px; /* 提供一定的间距 */\n  }\n\n  .order-card {\n    width: 100%; /* 在小屏幕上每个订单卡片宽度占满父容器 */\n    flex-grow: 0; /* 不扩展 */\n    margin-bottom: 16px;\n  }\n\n  .order-info {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .user-info {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 8px; /* 用户信息之间有间距 */\n  }\n\n  .email {\n    font-size: 14px;\n    color: #909399;\n  }\n\n  .item-info {\n    gap: 6px;\n  }\n\n  .item-name {\n    font-size: 16px;\n    color: #303133;\n  }\n\n  .item-details {\n    font-size: 12px;\n    color: #606266;\n  }\n\n  .item-quantity,\n  .item-price,\n  .item-total {\n    font-size: 13px;\n  }\n\n  .btn-confirm,\n  .btn-complete,\n  .btn-delete {\n    width: 100%;\n    padding: 12px;\n  }\n\n  .empty-message {\n    font-size: 14px;\n  }\n}\n\n/* Large screen optimization (above 768px) */\n@media screen and (min-width: 769px) {\n  .order-cards {\n    flex-wrap: wrap;\n    gap: 16px;\n  }\n\n  .order-card {\n    width: 300px; /* 固定宽度 */\n    flex-grow: 1; /* 自动填充空间 */\n  }\n}\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}