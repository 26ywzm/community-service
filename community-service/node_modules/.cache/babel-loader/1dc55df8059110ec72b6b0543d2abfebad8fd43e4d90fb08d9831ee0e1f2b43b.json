{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, computed, createVNode as _createVNode } from \"vue\";\nimport { createNamespace, makeRequiredProp, makeStringProp, truthProp } from \"../utils/index.mjs\";\nconst [name, bem] = createNamespace(\"highlight\");\nconst highlightProps = {\n  autoEscape: truthProp,\n  caseSensitive: Boolean,\n  highlightClass: String,\n  highlightTag: makeStringProp(\"span\"),\n  keywords: makeRequiredProp([String, Array]),\n  sourceString: makeStringProp(\"\"),\n  tag: makeStringProp(\"div\"),\n  unhighlightClass: String,\n  unhighlightTag: makeStringProp(\"span\")\n};\nvar stdin_default = defineComponent({\n  name,\n  props: highlightProps,\n  setup(props) {\n    const highlightChunks = computed(() => {\n      const {\n        autoEscape,\n        caseSensitive,\n        keywords,\n        sourceString\n      } = props;\n      const flags = caseSensitive ? \"g\" : \"gi\";\n      const _keywords = Array.isArray(keywords) ? keywords : [keywords];\n      let chunks = _keywords.filter(keyword => keyword).reduce((chunks2, keyword) => {\n        if (autoEscape) {\n          keyword = keyword.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n        }\n        const regex = new RegExp(keyword, flags);\n        let match;\n        while (match = regex.exec(sourceString)) {\n          const start = match.index;\n          const end = regex.lastIndex;\n          if (start >= end) {\n            regex.lastIndex++;\n            continue;\n          }\n          chunks2.push({\n            start,\n            end,\n            highlight: true\n          });\n        }\n        return chunks2;\n      }, []);\n      chunks = chunks.sort((a, b) => a.start - b.start).reduce((chunks2, currentChunk) => {\n        const prevChunk = chunks2[chunks2.length - 1];\n        if (!prevChunk || currentChunk.start > prevChunk.end) {\n          const unhighlightStart = prevChunk ? prevChunk.end : 0;\n          const unhighlightEnd = currentChunk.start;\n          if (unhighlightStart !== unhighlightEnd) {\n            chunks2.push({\n              start: unhighlightStart,\n              end: unhighlightEnd,\n              highlight: false\n            });\n          }\n          chunks2.push(currentChunk);\n        } else {\n          prevChunk.end = Math.max(prevChunk.end, currentChunk.end);\n        }\n        return chunks2;\n      }, []);\n      const lastChunk = chunks[chunks.length - 1];\n      if (!lastChunk) {\n        chunks.push({\n          start: 0,\n          end: sourceString.length,\n          highlight: false\n        });\n      }\n      if (lastChunk && lastChunk.end < sourceString.length) {\n        chunks.push({\n          start: lastChunk.end,\n          end: sourceString.length,\n          highlight: false\n        });\n      }\n      return chunks;\n    });\n    const renderContent = () => {\n      const {\n        sourceString,\n        highlightClass,\n        unhighlightClass,\n        highlightTag,\n        unhighlightTag\n      } = props;\n      return highlightChunks.value.map(chunk => {\n        const {\n          start,\n          end,\n          highlight\n        } = chunk;\n        const text = sourceString.slice(start, end);\n        if (highlight) {\n          return _createVNode(highlightTag, {\n            \"class\": [bem(\"tag\"), highlightClass]\n          }, {\n            default: () => [text]\n          });\n        }\n        return _createVNode(unhighlightTag, {\n          \"class\": unhighlightClass\n        }, {\n          default: () => [text]\n        });\n      });\n    };\n    return () => {\n      const {\n        tag\n      } = props;\n      return _createVNode(tag, {\n        \"class\": bem()\n      }, {\n        default: () => [renderContent()]\n      });\n    };\n  }\n});\nexport { stdin_default as default, highlightProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}