{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isDef, clamp, extend, createNamespace } from \"../utils/index.mjs\";\nconst [name, bem, t] = createNamespace(\"picker\");\nconst getFirstEnabledOption = options => options.find(option => !option.disabled) || options[0];\nfunction getColumnsType(columns, fields) {\n  const firstColumn = columns[0];\n  if (firstColumn) {\n    if (Array.isArray(firstColumn)) {\n      return \"multiple\";\n    }\n    if (fields.children in firstColumn) {\n      return \"cascade\";\n    }\n  }\n  return \"default\";\n}\nfunction findIndexOfEnabledOption(options, index) {\n  index = clamp(index, 0, options.length);\n  for (let i = index; i < options.length; i++) {\n    if (!options[i].disabled) return i;\n  }\n  for (let i = index - 1; i >= 0; i--) {\n    if (!options[i].disabled) return i;\n  }\n  return 0;\n}\nconst isOptionExist = (options, value, fields) => value !== void 0 && !!options.find(option => option[fields.value] === value);\nfunction findOptionByValue(options, value, fields) {\n  const index = options.findIndex(option => option[fields.value] === value);\n  const enabledIndex = findIndexOfEnabledOption(options, index);\n  return options[enabledIndex];\n}\nfunction formatCascadeColumns(columns, fields, selectedValues) {\n  const formatted = [];\n  let cursor = {\n    [fields.children]: columns\n  };\n  let columnIndex = 0;\n  while (cursor && cursor[fields.children]) {\n    const options = cursor[fields.children];\n    const value = selectedValues.value[columnIndex];\n    cursor = isDef(value) ? findOptionByValue(options, value, fields) : void 0;\n    if (!cursor && options.length) {\n      const firstValue = getFirstEnabledOption(options)[fields.value];\n      cursor = findOptionByValue(options, firstValue, fields);\n    }\n    columnIndex++;\n    formatted.push(options);\n  }\n  return formatted;\n}\nfunction getElementTranslateY(element) {\n  const {\n    transform\n  } = window.getComputedStyle(element);\n  const translateY = transform.slice(7, transform.length - 1).split(\", \")[5];\n  return Number(translateY);\n}\nfunction assignDefaultFields(fields) {\n  return extend({\n    text: \"text\",\n    value: \"value\",\n    children: \"children\"\n  }, fields);\n}\nexport { assignDefaultFields, bem, findIndexOfEnabledOption, findOptionByValue, formatCascadeColumns, getColumnsType, getElementTranslateY, getFirstEnabledOption, isOptionExist, name, t };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}