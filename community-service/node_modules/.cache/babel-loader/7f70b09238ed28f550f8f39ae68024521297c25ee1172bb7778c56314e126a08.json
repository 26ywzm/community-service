{"ast":null,"code":"import axios from 'axios';\nconst API = process.env.VUE_APP_API_URL;\n\n// 创建axios实例\nconst authAxios = axios.create({\n  baseURL: API,\n  withCredentials: true // 允许跨域请求携带cookies\n});\n\n// 添加响应拦截器处理token过期\nauthAxios.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // 如果是401错误且不是刷新token的请求\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // 尝试刷新token\n      await refreshToken();\n\n      // 重试原始请求\n      return authAxios(originalRequest);\n    } catch (refreshError) {\n      // 如果刷新token失败，清除认证信息并跳转到登录页\n      clearAuth();\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// 刷新token\nexport const refreshToken = async () => {\n  try {\n    await authAxios.post('/refresh-token');\n    return true;\n  } catch (error) {\n    console.error('刷新token失败:', error);\n    throw error;\n  }\n};\n\n// 验证用户认证状态\nexport const verifyAuth = async () => {\n  try {\n    const response = await authAxios.get('/verify');\n    if (response.data.valid) {\n      // 如果验证成功，更新本地存储的角色（以防角色已更改）\n      localStorage.setItem('userRole', response.data.role);\n      return {\n        valid: true,\n        role: response.data.role\n      };\n    }\n\n    // 如果角色不匹配，更新为正确的角色\n    if (response.data.correctRole) {\n      localStorage.setItem('userRole', response.data.correctRole);\n      return {\n        valid: false,\n        reason: 'role-mismatch',\n        newRole: response.data.correctRole\n      };\n    }\n    return {\n      valid: false,\n      reason: response.data.message\n    };\n  } catch (error) {\n    console.error('验证失败:', error);\n    if (error.response && error.response.status === 401) {\n      clearAuth();\n      return {\n        valid: false,\n        reason: 'unauthorized'\n      };\n    }\n    return {\n      valid: false,\n      reason: 'error'\n    };\n  }\n};\n\n// 登录\nexport const login = async (email, password) => {\n  try {\n    const response = await authAxios.post('/login', {\n      email,\n      password\n    });\n\n    // 只存储用户信息，token现在存储在HTTP-only cookies中\n    const {\n      user\n    } = response.data;\n    localStorage.setItem('userId', user.id);\n    localStorage.setItem('username', user.username);\n    localStorage.setItem('email', user.email);\n    localStorage.setItem('userRole', user.role);\n    return {\n      success: true,\n      user\n    };\n  } catch (error) {\n    console.error('登录失败:', error);\n    throw error;\n  }\n};\n\n// 登出\nexport const logout = async () => {\n  try {\n    await authAxios.post('/logout');\n    clearAuth();\n    return true;\n  } catch (error) {\n    console.error('登出失败:', error);\n    throw error;\n  }\n};\n\n// 清除认证信息\nexport const clearAuth = () => {\n  localStorage.removeItem('userId');\n  localStorage.removeItem('username');\n  localStorage.removeItem('email');\n  localStorage.removeItem('userRole');\n};\n\n// 获取认证头\nexport const getAuthHeaders = () => {\n  return {\n    withCredentials: true // cookies会自动包含在请求中\n  };\n};","map":{"version":3,"names":["axios","API","process","env","VUE_APP_API_URL","authAxios","create","baseURL","withCredentials","interceptors","response","use","error","originalRequest","config","status","_retry","refreshToken","refreshError","clearAuth","window","location","href","Promise","reject","post","console","verifyAuth","get","data","valid","localStorage","setItem","role","correctRole","reason","newRole","message","login","email","password","user","id","username","success","logout","removeItem","getAuthHeaders"],"sources":["C:/Users/拯救者/Desktop/text/community-service/src/utils/auth.js"],"sourcesContent":["import axios from 'axios';\n\nconst API = process.env.VUE_APP_API_URL;\n\n// 创建axios实例\nconst authAxios = axios.create({\n  baseURL: API,\n  withCredentials: true // 允许跨域请求携带cookies\n});\n\n// 添加响应拦截器处理token过期\nauthAxios.interceptors.response.use(\n  response => response,\n  async error => {\n    const originalRequest = error.config;\n\n    // 如果是401错误且不是刷新token的请求\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        // 尝试刷新token\n        await refreshToken();\n        \n        // 重试原始请求\n        return authAxios(originalRequest);\n      } catch (refreshError) {\n        // 如果刷新token失败，清除认证信息并跳转到登录页\n        clearAuth();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// 刷新token\nexport const refreshToken = async () => {\n  try {\n    await authAxios.post('/refresh-token');\n    return true;\n  } catch (error) {\n    console.error('刷新token失败:', error);\n    throw error;\n  }\n};\n\n// 验证用户认证状态\nexport const verifyAuth = async () => {\n  try {\n    const response = await authAxios.get('/verify');\n    \n    if (response.data.valid) {\n      // 如果验证成功，更新本地存储的角色（以防角色已更改）\n      localStorage.setItem('userRole', response.data.role);\n      return { valid: true, role: response.data.role };\n    }\n\n    // 如果角色不匹配，更新为正确的角色\n    if (response.data.correctRole) {\n      localStorage.setItem('userRole', response.data.correctRole);\n      return { valid: false, reason: 'role-mismatch', newRole: response.data.correctRole };\n    }\n\n    return { valid: false, reason: response.data.message };\n  } catch (error) {\n    console.error('验证失败:', error);\n    if (error.response && error.response.status === 401) {\n      clearAuth();\n      return { valid: false, reason: 'unauthorized' };\n    }\n    return { valid: false, reason: 'error' };\n  }\n};\n\n// 登录\nexport const login = async (email, password) => {\n  try {\n    const response = await authAxios.post('/login', { email, password });\n    \n    // 只存储用户信息，token现在存储在HTTP-only cookies中\n    const { user } = response.data;\n    localStorage.setItem('userId', user.id);\n    localStorage.setItem('username', user.username);\n    localStorage.setItem('email', user.email);\n    localStorage.setItem('userRole', user.role);\n\n    return { success: true, user };\n  } catch (error) {\n    console.error('登录失败:', error);\n    throw error;\n  }\n};\n\n// 登出\nexport const logout = async () => {\n  try {\n    await authAxios.post('/logout');\n    clearAuth();\n    return true;\n  } catch (error) {\n    console.error('登出失败:', error);\n    throw error;\n  }\n};\n\n// 清除认证信息\nexport const clearAuth = () => {\n  localStorage.removeItem('userId');\n  localStorage.removeItem('username');\n  localStorage.removeItem('email');\n  localStorage.removeItem('userRole');\n};\n\n// 获取认证头\nexport const getAuthHeaders = () => {\n  return {\n    withCredentials: true // cookies会自动包含在请求中\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}