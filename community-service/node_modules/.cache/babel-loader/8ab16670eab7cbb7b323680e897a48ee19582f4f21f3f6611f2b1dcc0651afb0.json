{"ast":null,"code":"import { isDef, isObject } from \"./basic.mjs\";\nconst {\n  hasOwnProperty\n} = Object.prototype;\nfunction assignKey(to, from, key) {\n  const val = from[key];\n  if (!isDef(val)) {\n    return;\n  }\n  if (!hasOwnProperty.call(to, key) || !isObject(val)) {\n    to[key] = val;\n  } else {\n    to[key] = deepAssign(Object(to[key]), val);\n  }\n}\nfunction deepAssign(to, from) {\n  Object.keys(from).forEach(key => {\n    assignKey(to, from, key);\n  });\n  return to;\n}\nexport { deepAssign };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}