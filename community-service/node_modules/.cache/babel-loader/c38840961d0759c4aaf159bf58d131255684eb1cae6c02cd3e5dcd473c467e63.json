{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"order-management\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  class: \"order-actions\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  key: 1\n};\nconst _hoisted_8 = {\n  key: 2,\n  class: \"dialog-overlay\"\n};\nconst _hoisted_9 = {\n  class: \"dialog\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"订单管理\", -1 /* HOISTED */)), $data.orders.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"table\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"订单 ID\"), _createElementVNode(\"th\", null, \"用户\"), _createElementVNode(\"th\", null, \"邮箱\"), _createElementVNode(\"th\", null, \"总价格\"), _createElementVNode(\"th\", null, \"创建时间\"), _createElementVNode(\"th\", null, \"状态\"), _createElementVNode(\"th\", null, \"详细内容\"), _createElementVNode(\"th\", null, \"操作\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.orders, order => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: order.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(order.id), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.username), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.email), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.total_price) + \" 元\", 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.formatDate(order.created_at)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($data.statusText[order.status]), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(order.items, item => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: item.menu_item_id\n      }, _toDisplayString(item.name) + \" (\" + _toDisplayString(item.quantity) + \"): \" + _toDisplayString(item.total) + \" 元 \", 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"td\", _hoisted_3, [order.status === '0' ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      class: \"btn-confirm\",\n      onClick: $event => $options.handleButtonClick(order)\n    }, \"开始处理\", 8 /* PROPS */, _hoisted_4)) : _createCommentVNode(\"v-if\", true), order.status === '1' ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 1,\n      class: \"btn-complete\",\n      onClick: $event => $options.handleButtonClick(order)\n    }, \"完成订单\", 8 /* PROPS */, _hoisted_5)) : _createCommentVNode(\"v-if\", true), order.status === '2' ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 2,\n      class: \"btn-delete\",\n      onClick: $event => $options.handleButtonClick(order)\n    }, \"取消订单\", 8 /* PROPS */, _hoisted_6)) : _createCommentVNode(\"v-if\", true)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_7, _cache[2] || (_cache[2] = [_createElementVNode(\"p\", {\n    class: \"empty-message\"\n  }, \"没有找到订单。\", -1 /* HOISTED */)]))), _createCommentVNode(\" 对话框 \"), $data.showDialog ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"p\", null, _toDisplayString($data.dialogMessage), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.closeDialog && $options.closeDialog(...args))\n  }, \"确定\")])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","$data","orders","length","_hoisted_2","_Fragment","_renderList","order","id","_toDisplayString","username","email","total_price","$options","formatDate","created_at","statusText","status","items","item","menu_item_id","name","quantity","total","_hoisted_3","onClick","$event","handleButtonClick","_hoisted_4","_createCommentVNode","_hoisted_5","_hoisted_6","_hoisted_7","_cache","showDialog","_hoisted_8","_hoisted_9","dialogMessage","args","closeDialog"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\OrderManagement.vue"],"sourcesContent":["<template>\n    <div class=\"order-management\">\n      <h2>订单管理</h2>\n  \n      <div v-if=\"orders.length > 0\">\n        <table>\n          <thead>\n            <tr>\n              <th>订单 ID</th>\n              <th>用户</th>\n              <th>邮箱</th>\n              <th>总价格</th>\n              <th>创建时间</th>\n              <th>状态</th>\n              <th>详细内容</th>\n              <th>操作</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"order in orders\" :key=\"order.id\">\n              <td>{{ order.id }}</td>\n              <td>{{ order.username }}</td>\n              <td>{{ order.email }}</td>\n              <td>{{ order.total_price }} 元</td>\n              <td>{{ formatDate(order.created_at) }}</td>\n              <td>{{ statusText[order.status] }}</td>\n              <td>\n                <ul>\n                  <li v-for=\"item in order.items\" :key=\"item.menu_item_id\">\n                    {{ item.name }} ({{ item.quantity }}): {{ item.total }} 元\n                  </li>\n                </ul>\n              </td>\n              <td class=\"order-actions\">\n                <button \n                  v-if=\"order.status === '0'\" \n                  class=\"btn-confirm\"\n                  @click=\"handleButtonClick(order)\"\n                >开始处理</button>\n  \n                <button \n                  v-if=\"order.status === '1'\" \n                  class=\"btn-complete\"\n                  @click=\"handleButtonClick(order)\"\n                >完成订单</button>\n  \n                <button \n                  v-if=\"order.status === '2'\" \n                  class=\"btn-delete\"\n                  @click=\"handleButtonClick(order)\"\n                >取消订单</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n  \n      <div v-else>\n        <p class=\"empty-message\">没有找到订单。</p>\n      </div>\n\n      <!-- 对话框 -->\n      <div v-if=\"showDialog\" class=\"dialog-overlay\">\n        <div class=\"dialog\">\n          <p>{{ dialogMessage }}</p>\n          <button @click=\"closeDialog\">确定</button>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  const API = process.env.VUE_APP_API_URL;\n  import axios from 'axios';\n  import { ElMessage } from 'element-plus';\n  \n  export default {\n    data() {\n      return {\n        orders: [], // 存储所有订单信息\n        showDialog: false,\n        dialogMessage: '',\n        lastActionTime: 0, // 记录上一次操作的时间戳\n        loading: false,\n        // 状态显示文本\n        statusText: {\n          '0': '待处理',\n          '1': '处理中',\n          '2': '已完成',\n          '3': '已取消'\n        }\n      };\n    },\n    mounted() {\n      this.fetchOrders(); // 加载所有订单\n    },\n    methods: {\n      async fetchOrders() {\n        this.loading = true;\n        try {\n          const response = await axios.get(`${API}/canteen/orders`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`\n            }\n          });\n          \n          // 确保响应数据是数组\n          const ordersData = Array.isArray(response.data) ? response.data : \n                           Array.isArray(response.data.orders) ? response.data.orders : [];\n          \n          this.orders = ordersData.map(order => ({\n            ...order,\n            lastActionTime: 0\n          }));\n\n          if (this.orders.length === 0) {\n            ElMessage.info('暂无订单记录');\n          }\n        } catch (error) {\n          console.error('获取订单列表失败:', error);\n          if (error.response?.status === 403) {\n            ElMessage.warning('您没有权限访问订单管理');\n          } else {\n            ElMessage.error('获取订单列表失败，请重试');\n          }\n        } finally {\n          this.loading = false;\n        }\n      },\n      \n      async handleButtonClick(order) {\n        if (!this.canPerformAction(order)) {\n          ElMessage.warning('操作太频繁，请稍后再试');\n          return;\n        }\n\n        try {\n          let newStatus;\n          const currentStatus = parseInt(order.status);\n          switch (currentStatus) {\n            case 0:  // pending\n              newStatus = 1;  // confirmed\n              break;\n            case 1:  // confirmed\n              newStatus = 2;  // completed\n              break;\n            case 2:  // completed\n              newStatus = 3;  // cancelled\n              break;\n            default:\n              ElMessage.error(`当前状态 ${this.statusText[order.status]} 无法进行操作`);\n              return;\n          }\n\n          await this.updateOrderStatus(order, newStatus);\n          // 操作成功后刷新订单列表\n          await this.fetchOrders();\n        } catch (error) {\n          console.error('操作失败:', error);\n          ElMessage.error('操作失败，请重试');\n        }\n      },\n\n      canPerformAction(order) {\n        const currentTime = Date.now();\n        const timeElapsed = currentTime - order.lastActionTime;\n        const delay = 2 * 60 * 1000; // 2分钟\n        return timeElapsed >= delay;\n      },\n\n      async updateOrderStatus(order, status) {\n        try {\n          console.log('Updating order status:', { orderId: order.id, status: status });\n          const response = await axios.put(\n            `${API}/canteen/orders/${order.id}`, \n            { status }, \n            {\n              headers: {\n                'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n                'Content-Type': 'application/json'\n              }\n            }\n          );\n          \n          ElMessage.success(`订单状态已更新为${this.statusText[status]}`);\n          order.lastActionTime = Date.now();\n          order.status = status; // 更新本地状态\n          await this.fetchOrders(); // 刷新订单列表\n        } catch (error) {\n          console.error('更新订单状态失败:', error);\n          console.error('错误详情:', error.response?.data);\n          ElMessage.error(error.response?.data?.message || '更新订单状态失败，请重试');\n          throw error;\n        }\n      },\n\n      async deleteOrder(orderId) {\n        try {\n          await axios.delete(`${API}/canteen/orders/${orderId}`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`\n            }\n          });\n          ElMessage.success('订单已删除');\n          this.orders = this.orders.filter(order => order.id !== orderId);\n        } catch (error) {\n          console.error('删除订单失败:', error);\n          throw error;\n        }\n      },\n\n      closeDialog() {\n        this.showDialog = false;\n        this.dialogMessage = '';\n      },\n\n      formatDate(dateString) {\n        const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\n        return new Date(dateString).toLocaleDateString('zh-CN', options);\n      }\n    }\n  };\n  </script>\n  \n  <style scoped>\n  .order-management {\n    padding: 20px;\n  }\n\n  h2 {\n    color: #303133;\n    margin-bottom: 20px;\n  }\n\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 20px;\n    background-color: white;\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  }\n\n  th, td {\n    padding: 12px 15px;\n    text-align: left;\n    border-bottom: 1px solid #EBEEF5;\n  }\n\n  th {\n    background-color: #F5F7FA;\n    color: #606266;\n    font-weight: 500;\n  }\n\n  tr:hover {\n    background-color: #F5F7FA;\n  }\n\n  button {\n    padding: 6px 12px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: all 0.3s;\n    margin: 0 5px;\n  }\n\n  button:hover {\n    opacity: 0.8;\n  }\n\n  .dialog-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1000;\n  }\n\n  .dialog {\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n    text-align: center;\n  }\n\n  .dialog p {\n    margin-bottom: 15px;\n    color: #606266;\n  }\n\n  .dialog button {\n    background-color: #409EFF;\n    color: white;\n    padding: 8px 20px;\n  }\n\n  .order-actions {\n    display: flex;\n    gap: 8px;\n  }\n\n  .btn-confirm {\n    background-color: #67C23A;\n    color: white;\n  }\n\n  .btn-complete {\n    background-color: #409EFF;\n    color: white;\n  }\n\n  .btn-delete {\n    background-color: #F56C6C;\n    color: white;\n  }\n\n  .empty-message {\n    text-align: center;\n    color: #909399;\n    margin-top: 40px;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n\n  li {\n    margin: 5px 0;\n    color: #606266;\n  }\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}