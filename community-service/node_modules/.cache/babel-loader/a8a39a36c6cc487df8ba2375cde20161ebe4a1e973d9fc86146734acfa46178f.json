{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nconst API = 'http://localhost:3000/api/auth'; // 直接定义 API 地址\n\nexport default {\n  data() {\n    return {\n      orders: [],\n      // 存储所有订单信息\n      showDialog: false,\n      dialogMessage: '',\n      lastActionTime: 0,\n      // 记录上一次操作的时间戳\n      loading: false,\n      // 状态显示文本\n      statusText: {\n        0: '待处理',\n        1: '处理中',\n        2: '已完成',\n        3: '已取消'\n      }\n    };\n  },\n  mounted() {\n    this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${API}/canteen/orders`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        console.log('获取到的订单数据:', response.data);\n        // 初始化 lastActionTime\n        this.orders = response.data.orders.map(order => ({\n          ...order,\n          lastActionTime: 0\n        }));\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        ElMessage.error('获取订单列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async handleButtonClick(order) {\n      if (!this.canPerformAction(order)) {\n        ElMessage.warning('操作太频繁，请稍后再试');\n        return;\n      }\n      try {\n        let newStatus;\n        const currentStatus = parseInt(order.status);\n        switch (currentStatus) {\n          case 0:\n            // pending\n            newStatus = 1; // confirmed\n            break;\n          case 1:\n            // confirmed\n            newStatus = 2; // completed\n            break;\n          default:\n            ElMessage.error(`当前状态 ${this.statusText[order.status]} 无法进行操作`);\n            return;\n        }\n        await this.updateOrderStatus(order, newStatus);\n        // 操作成功后刷新订单列表\n        await this.fetchOrders();\n      } catch (error) {\n        console.error('操作失败:', error);\n        ElMessage.error('操作失败，请重试');\n      }\n    },\n    canPerformAction(order) {\n      const now = Date.now();\n      // 如果是第一次操作，或者距离上次操作超过3秒\n      if (!order.lastActionTime || now - order.lastActionTime > 3000) {\n        return true;\n      }\n      return false;\n    },\n    async updateOrderStatus(order, status) {\n      try {\n        console.log('Updating order status:', {\n          orderId: order.id,\n          status: status\n        });\n        await axios.put(`${API}/canteen/orders/${order.id}`, {\n          status\n        }, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        ElMessage.success(`订单状态已更新为${this.statusText[status]}`);\n        order.lastActionTime = Date.now(); // 更新最后操作时间\n        order.status = status; // 更新本地状态\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        ElMessage.error(error.response?.data?.message || '更新订单状态失败，请重试');\n        throw error;\n      }\n    },\n    async handleDeleteOrder(order) {\n      try {\n        if (!confirm('确定要删除这个订单吗？此操作不可撤销。')) {\n          return;\n        }\n        await axios.delete(`${API}/canteen/orders/${order.id}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        ElMessage.success('订单已删除');\n        // 从列表中移除该订单\n        this.orders = this.orders.filter(o => o.id !== order.id);\n      } catch (error) {\n        console.error('删除订单失败:', error);\n        ElMessage.error(error.response?.data?.message || '删除订单失败，请重试');\n      }\n    },\n    closeDialog() {\n      this.showDialog = false;\n      this.dialogMessage = '';\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return {\n        date: date.toLocaleDateString('zh-CN', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit'\n        }),\n        time: date.toLocaleTimeString('zh-CN', {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","API","data","orders","showDialog","dialogMessage","lastActionTime","loading","statusText","mounted","fetchOrders","methods","response","get","headers","localStorage","getItem","console","log","map","order","error","handleButtonClick","canPerformAction","warning","newStatus","currentStatus","parseInt","status","updateOrderStatus","now","Date","orderId","id","put","success","message","handleDeleteOrder","confirm","delete","filter","o","closeDialog","formatDate","dateString","date","toLocaleDateString","year","month","day","time","toLocaleTimeString","hour","minute"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\OrderManagement.vue"],"sourcesContent":["<template>\n  <div class=\"order-management\">\n    <h2>订单管理</h2>\n    <div v-if=\"loading\" class=\"loading\">加载中...</div>\n    <div v-else>\n      <table>\n        <thead>\n          <tr>\n            <th>订单ID</th>\n            <th>用户名</th>\n            <th>订单详情</th>\n            <th>总价</th>\n            <th>状态</th>\n            <th>创建时间</th>\n            <th>操作</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"order in orders\" :key=\"order.id\">\n            <td>{{ order.id }}</td>\n            <td>\n              <div class=\"user-info\">\n                <div>{{ order.username }}</div>\n                <div class=\"email\">{{ order.email }}</div>\n              </div>\n            </td>\n            <td>\n              <div class=\"order-items\">\n                <div v-for=\"item in order.items\" :key=\"item.menu_item_id\" class=\"order-item\">\n                  <span class=\"item-name\">{{ item.name }}</span>\n                  <span class=\"item-quantity\">x{{ item.quantity }}</span>\n                  <span class=\"item-price\">¥{{ item.price }}</span>\n                </div>\n              </div>\n            </td>\n            <td class=\"price\">¥{{ order.total_price }}</td>\n            <td>\n              <span :class=\"['status-tag', 'status-' + order.status]\">\n                {{ statusText[order.status] }}\n              </span>\n            </td>\n            <td>\n              <div class=\"time-info\">\n                <div>{{ formatDate(order.created_at).date }}</div>\n                <div class=\"time\">{{ formatDate(order.created_at).time }}</div>\n              </div>\n            </td>\n            <td class=\"order-actions\">\n              <button \n                v-if=\"parseInt(order.status) === 0\" \n                class=\"btn-confirm\"\n                @click=\"handleButtonClick(order)\"\n              >开始处理</button>\n\n              <button \n                v-if=\"parseInt(order.status) === 1\" \n                class=\"btn-complete\"\n                @click=\"handleButtonClick(order)\"\n              >完成订单</button>\n\n              <button \n                v-if=\"parseInt(order.status) === 2\" \n                class=\"btn-delete\"\n                @click=\"handleDeleteOrder(order)\"\n              >删除订单</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div v-if=\"orders.length === 0 && !loading\">\n      <p class=\"empty-message\">没有找到订单。</p>\n    </div>\n\n    <!-- 对话框 -->\n    <div v-if=\"showDialog\" class=\"dialog-overlay\">\n      <div class=\"dialog\">\n        <p>{{ dialogMessage }}</p>\n        <button @click=\"closeDialog\">确定</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\n\nconst API = 'http://localhost:3000/api/auth';  // 直接定义 API 地址\n\nexport default {\n  data() {\n    return {\n      orders: [], // 存储所有订单信息\n      showDialog: false,\n      dialogMessage: '',\n      lastActionTime: 0, // 记录上一次操作的时间戳\n      loading: false,\n      // 状态显示文本\n      statusText: {\n        0: '待处理',\n        1: '处理中',\n        2: '已完成',\n        3: '已取消'\n      }\n    };\n  },\n  mounted() {\n    this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${API}/canteen/orders`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        console.log('获取到的订单数据:', response.data);\n        // 初始化 lastActionTime\n        this.orders = response.data.orders.map(order => ({\n          ...order,\n          lastActionTime: 0\n        }));\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        ElMessage.error('获取订单列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    async handleButtonClick(order) {\n      if (!this.canPerformAction(order)) {\n        ElMessage.warning('操作太频繁，请稍后再试');\n        return;\n      }\n\n      try {\n        let newStatus;\n        const currentStatus = parseInt(order.status);\n        switch (currentStatus) {\n          case 0:  // pending\n            newStatus = 1;  // confirmed\n            break;\n          case 1:  // confirmed\n            newStatus = 2;  // completed\n            break;\n          default:\n            ElMessage.error(`当前状态 ${this.statusText[order.status]} 无法进行操作`);\n            return;\n        }\n\n        await this.updateOrderStatus(order, newStatus);\n        // 操作成功后刷新订单列表\n        await this.fetchOrders();\n      } catch (error) {\n        console.error('操作失败:', error);\n        ElMessage.error('操作失败，请重试');\n      }\n    },\n\n    canPerformAction(order) {\n      const now = Date.now();\n      // 如果是第一次操作，或者距离上次操作超过3秒\n      if (!order.lastActionTime || now - order.lastActionTime > 3000) {\n        return true;\n      }\n      return false;\n    },\n\n    async updateOrderStatus(order, status) {\n      try {\n        console.log('Updating order status:', { orderId: order.id, status: status });\n        await axios.put(\n          `${API}/canteen/orders/${order.id}`, \n          { status }, \n          {\n            headers: {\n              'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n              'Content-Type': 'application/json'\n            }\n          }\n        );\n        \n        ElMessage.success(`订单状态已更新为${this.statusText[status]}`);\n        order.lastActionTime = Date.now(); // 更新最后操作时间\n        order.status = status; // 更新本地状态\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        ElMessage.error(error.response?.data?.message || '更新订单状态失败，请重试');\n        throw error;\n      }\n    },\n\n    async handleDeleteOrder(order) {\n      try {\n        if (!confirm('确定要删除这个订单吗？此操作不可撤销。')) {\n          return;\n        }\n        \n        await axios.delete(`${API}/canteen/orders/${order.id}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        \n        ElMessage.success('订单已删除');\n        // 从列表中移除该订单\n        this.orders = this.orders.filter(o => o.id !== order.id);\n      } catch (error) {\n        console.error('删除订单失败:', error);\n        ElMessage.error(error.response?.data?.message || '删除订单失败，请重试');\n      }\n    },\n\n    closeDialog() {\n      this.showDialog = false;\n      this.dialogMessage = '';\n    },\n\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return {\n        date: date.toLocaleDateString('zh-CN', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit'\n        }),\n        time: date.toLocaleTimeString('zh-CN', {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      };\n    }\n  }\n};\n</script>\n\n<style scoped>\n.order-management {\n  padding: 20px;\n}\n\nh2 {\n  color: #303133;\n  margin-bottom: 20px;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n  background-color: white;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n}\n\nth, td {\n  padding: 12px 15px;\n  text-align: left;\n  border-bottom: 1px solid #EBEEF5;\n}\n\nth {\n  background-color: #F5F7FA;\n  color: #606266;\n  font-weight: 500;\n}\n\ntr:hover {\n  background-color: #F5F7FA;\n}\n\nbutton {\n  padding: 6px 12px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s;\n  margin: 0 5px;\n}\n\nbutton:hover {\n  opacity: 0.8;\n}\n\n.dialog-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.dialog {\n  background-color: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  text-align: center;\n}\n\n.dialog p {\n  margin-bottom: 15px;\n  color: #606266;\n}\n\n.dialog button {\n  background-color: #409EFF;\n  color: white;\n  padding: 8px 20px;\n}\n\n.order-actions {\n  display: flex;\n  gap: 8px;\n}\n\n.btn-confirm {\n  background-color: #67C23A;\n  color: white;\n}\n\n.btn-complete {\n  background-color: #409EFF;\n  color: white;\n}\n\n.btn-delete {\n  background-color: #F56C6C;\n  color: white;\n}\n\n.empty-message {\n  text-align: center;\n  color: #909399;\n  margin-top: 40px;\n}\n\n.user-info {\n  display: flex;\n  flex-direction: column;\n}\n\n.email {\n  font-size: 14px;\n  color: #909399;\n}\n\n.order-items {\n  display: flex;\n  flex-direction: column;\n}\n\n.order-item {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n}\n\n.item-name {\n  font-weight: bold;\n}\n\n.item-quantity {\n  font-size: 14px;\n  color: #909399;\n}\n\n.item-price {\n  font-size: 14px;\n  color: #909399;\n}\n\n.price {\n  font-weight: bold;\n}\n\n.status-tag {\n  padding: 2px 6px;\n  border-radius: 4px;\n  font-size: 12px;\n}\n\n.status-0 {\n  background-color: #F56C6C;\n  color: white;\n}\n\n.status-1 {\n  background-color: #67C23A;\n  color: white;\n}\n\n.status-2 {\n  background-color: #409EFF;\n  color: white;\n}\n\n.status-3 {\n  background-color: #909399;\n  color: white;\n}\n\n.time-info {\n  display: flex;\n  flex-direction: column;\n}\n\n.time {\n  font-size: 14px;\n  color: #909399;\n}\n\n.loading {\n  text-align: center;\n  margin-top: 40px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}