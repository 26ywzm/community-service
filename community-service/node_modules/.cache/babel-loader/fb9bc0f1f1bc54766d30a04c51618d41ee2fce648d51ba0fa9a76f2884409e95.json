{"ast":null,"code":"import axios from 'axios';\nconst API = process.env.VUE_APP_API_URL;\nexport const verifyAuth = async () => {\n  try {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      return false;\n    }\n    const response = await axios.get(`${API}/verify`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.data.valid) {\n      // 如果角色不匹配，更新为正确的角色\n      if (response.data.correctRole) {\n        localStorage.setItem('userRole', response.data.correctRole);\n      } else {\n        // 如果验证失败，清除所有认证信息\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userRole');\n        localStorage.removeItem('username');\n        localStorage.removeItem('userId');\n        localStorage.removeItem('email');\n      }\n      return false;\n    }\n    return true;\n  } catch (error) {\n    console.error('验证失败:', error);\n    // 出错时清除认证信息\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userRole');\n    localStorage.removeItem('username');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('email');\n    return false;\n  }\n};","map":{"version":3,"names":["axios","API","process","env","VUE_APP_API_URL","verifyAuth","token","localStorage","getItem","response","get","headers","Authorization","data","valid","correctRole","setItem","removeItem","error","console"],"sources":["C:/Users/拯救者/Desktop/text/community-service/src/utils/auth.js"],"sourcesContent":["import axios from 'axios';\n\nconst API = process.env.VUE_APP_API_URL;\n\nexport const verifyAuth = async () => {\n  try {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      return false;\n    }\n\n    const response = await axios.get(`${API}/verify`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.data.valid) {\n      // 如果角色不匹配，更新为正确的角色\n      if (response.data.correctRole) {\n        localStorage.setItem('userRole', response.data.correctRole);\n      } else {\n        // 如果验证失败，清除所有认证信息\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userRole');\n        localStorage.removeItem('username');\n        localStorage.removeItem('userId');\n        localStorage.removeItem('email');\n      }\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    console.error('验证失败:', error);\n    // 出错时清除认证信息\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userRole');\n    localStorage.removeItem('username');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('email');\n    return false;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe;AAEvC,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAI,CAACF,KAAK,EAAE;MACV,OAAO,KAAK;IACd;IAEA,MAAMG,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,GAAGT,GAAG,SAAS,EAAE;MAChDU,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUN,KAAK;MAChC;IACF,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,IAAI,CAACC,KAAK,EAAE;MACxB;MACA,IAAIL,QAAQ,CAACI,IAAI,CAACE,WAAW,EAAE;QAC7BR,YAAY,CAACS,OAAO,CAAC,UAAU,EAAEP,QAAQ,CAACI,IAAI,CAACE,WAAW,CAAC;MAC7D,CAAC,MAAM;QACL;QACAR,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC;QACpCV,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;QACnCV,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;QACnCV,YAAY,CAACU,UAAU,CAAC,QAAQ,CAAC;QACjCV,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;MAClC;MACA,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;IAC7B;IACAX,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC;IACpCV,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;IACnCV,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;IACnCV,YAAY,CAACU,UAAU,CAAC,QAAQ,CAAC;IACjCV,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAChC,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}