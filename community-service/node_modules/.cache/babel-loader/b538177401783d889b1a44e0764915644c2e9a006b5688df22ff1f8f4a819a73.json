{"ast":null,"code":"const API = process.env.VUE_APP_API_URL;\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      orders: [],\n      // 存储所有订单信息\n      showDialog: false,\n      dialogMessage: '',\n      lastActionTime: 0 // 记录上一次操作的时间戳\n    };\n  },\n  mounted() {\n    this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await axios.get(`${API}/orders/all`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.orders = (response.data.orders || response.data || []).map(order => ({\n          ...order,\n          lastActionTime: 0\n        }));\n        if (this.orders.length === 0) {\n          this.showDialog = true;\n          this.dialogMessage = '暂无订单记录';\n        }\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        if (error.response?.status === 403) {\n          this.showDialog = true;\n          this.dialogMessage = '您没有权限访问订单管理';\n        } else {\n          this.showDialog = true;\n          this.dialogMessage = '获取订单列表失败，请重试';\n        }\n      }\n    },\n    handleButtonClick(order, newStatus) {\n      const currentTime = Date.now();\n      const timeElapsed = currentTime - order.lastActionTime;\n      const delay = 2 * 60 * 1000; // 2分钟\n\n      if (timeElapsed < delay) {\n        // 弹出对话框提示操作太频繁\n        this.dialogMessage = '操作太频繁，请稍后再试';\n        this.showDialog = true;\n        return;\n      }\n      const actionFn = async () => {\n        try {\n          if (newStatus === 'deleted') {\n            await this.deleteOrder(order.id);\n          } else {\n            await this.updateOrderStatus(order, newStatus);\n          }\n        } catch (error) {\n          console.error('操作失败:', error);\n        }\n      };\n      order.lastActionTime = currentTime; // 更新订单的上一次操作时间\n      actionFn();\n    },\n    async updateOrderStatus(order, status) {\n      try {\n        await axios.put(`${API}/canteen/orders/${order.id}`, {\n          status\n        }, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        alert('订单状态已更新');\n        order.status = status; // 更新本地状态以避免重新获取\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        alert('更新订单状态失败，请重试。');\n      }\n    },\n    async deleteOrder(orderId) {\n      try {\n        await axios.delete(`${API}/canteen/orders/${orderId}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        alert('订单已删除');\n        this.orders = this.orders.filter(order => order.id !== orderId); // 更新本地订单列表\n      } catch (error) {\n        console.error('删除订单失败:', error);\n        alert('删除订单失败，请重试。');\n      }\n    },\n    closeDialog() {\n      this.showDialog = false;\n      this.dialogMessage = '';\n    },\n    formatDate(dateString) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(dateString).toLocaleDateString('zh-CN', options);\n    }\n  }\n};","map":{"version":3,"names":["API","process","env","VUE_APP_API_URL","axios","data","orders","showDialog","dialogMessage","lastActionTime","mounted","fetchOrders","methods","response","get","headers","Authorization","localStorage","getItem","map","order","length","error","console","status","handleButtonClick","newStatus","currentTime","Date","now","timeElapsed","delay","actionFn","deleteOrder","id","updateOrderStatus","put","alert","orderId","delete","filter","closeDialog","formatDate","dateString","options","year","month","day","hour","minute","toLocaleDateString"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\OrderManagement.vue"],"sourcesContent":["<template>\n    <div class=\"order-management\">\n      <h2>订单管理</h2>\n  \n      <div v-if=\"orders.length > 0\">\n        <table>\n          <thead>\n            <tr>\n              <th>订单 ID</th>\n              <th>用户</th>\n              <th>邮箱</th>\n              <th>总价格</th>\n              <th>创建时间</th>\n              <th>状态</th>\n              <th>详细内容</th>\n              <th>操作</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"order in orders\" :key=\"order.id\">\n              <td>{{ order.id }}</td>\n              <td>{{ order.username }}</td>\n              <td>{{ order.email }}</td>\n              <td>{{ order.total_price }} 元</td>\n              <td>{{ formatDate(order.created_at) }}</td>\n              <td>{{ order.status }}</td>\n              <td>\n                <ul>\n                  <li v-for=\"item in order.items\" :key=\"item.menu_item_id\">\n                    {{ item.name }} ({{ item.quantity }}): {{ item.total }} 元\n                  </li>\n                </ul>\n              </td>\n              <td>\n                <button \n                  v-if=\"order.status === 'pending'\" \n                  @click=\"handleButtonClick(order, 'confirmed')\"\n                >确定订单</button>\n  \n                <button \n                  v-if=\"order.status === 'confirmed'\" \n                  @click=\"handleButtonClick(order, 'completed')\"\n                >完成订单</button>\n  \n                <button \n                  v-if=\"order.status === 'completed'\" \n                  @click=\"handleButtonClick(order, 'deleted')\"\n                >删除订单</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n  \n      <div v-else>\n        <p>没有找到订单。</p>\n      </div>\n\n      <!-- 对话框 -->\n      <div v-if=\"showDialog\" class=\"dialog-overlay\">\n        <div class=\"dialog\">\n          <p>{{ dialogMessage }}</p>\n          <button @click=\"closeDialog\">确定</button>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  const API = process.env.VUE_APP_API_URL;\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        orders: [], // 存储所有订单信息\n        showDialog: false,\n        dialogMessage: '',\n        lastActionTime: 0 // 记录上一次操作的时间戳\n      };\n    },\n    mounted() {\n      this.fetchOrders(); // 加载所有订单\n    },\n    methods: {\n      async fetchOrders() {\n        try {\n          const response = await axios.get(`${API}/orders/all`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`\n            }\n          });\n          this.orders = (response.data.orders || response.data || []).map(order => ({ \n            ...order, \n            lastActionTime: 0 \n          }));\n          \n          if (this.orders.length === 0) {\n            this.showDialog = true;\n            this.dialogMessage = '暂无订单记录';\n          }\n        } catch (error) {\n          console.error('获取订单列表失败:', error);\n          if (error.response?.status === 403) {\n            this.showDialog = true;\n            this.dialogMessage = '您没有权限访问订单管理';\n          } else {\n            this.showDialog = true;\n            this.dialogMessage = '获取订单列表失败，请重试';\n          }\n        }\n      },\n      handleButtonClick(order, newStatus) {\n        const currentTime = Date.now();\n        const timeElapsed = currentTime - order.lastActionTime;\n        const delay = 2 * 60 * 1000; // 2分钟\n  \n        if (timeElapsed < delay) {\n          // 弹出对话框提示操作太频繁\n          this.dialogMessage = '操作太频繁，请稍后再试';\n          this.showDialog = true;\n          return;\n        }\n  \n        const actionFn = async () => {\n          try {\n            if (newStatus === 'deleted') {\n              await this.deleteOrder(order.id);\n            } else {\n              await this.updateOrderStatus(order, newStatus);\n            }\n          } catch (error) {\n            console.error('操作失败:', error);\n          }\n        };\n  \n        order.lastActionTime = currentTime; // 更新订单的上一次操作时间\n        actionFn();\n      },\n      async updateOrderStatus(order, status) {\n        try {\n          await axios.put(\n            `${API}/canteen/orders/${order.id}`, \n            { status }, \n            {\n              headers: {\n                Authorization: `Bearer ${localStorage.getItem('authToken')}`\n              }\n            }\n          );\n          alert('订单状态已更新');\n          order.status = status; // 更新本地状态以避免重新获取\n        } catch (error) {\n          console.error('更新订单状态失败:', error);\n          alert('更新订单状态失败，请重试。');\n        }\n      },\n      async deleteOrder(orderId) {\n        try {\n          await axios.delete(`${API}/canteen/orders/${orderId}`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`\n            }\n          });\n          alert('订单已删除');\n          this.orders = this.orders.filter(order => order.id !== orderId); // 更新本地订单列表\n        } catch (error) {\n          console.error('删除订单失败:', error);\n          alert('删除订单失败，请重试。');\n        }\n      },\n      closeDialog() {\n        this.showDialog = false;\n        this.dialogMessage = '';\n      },\n      formatDate(dateString) {\n        const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\n        return new Date(dateString).toLocaleDateString('zh-CN', options);\n      }\n    }\n  };\n  </script>\n  \n  <style scoped>\n  .order-management {\n    padding: 20px;\n  }\n  table {\n    width: 100%;\n    border-collapse: collapse;\n  }\n  th, td {\n    border: 1px solid #ddd;\n    padding: 8px;\n  }\n  th {\n    background-color: #f2f2f2;\n  }\n  button {\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    padding: 5px 10px;\n    cursor: pointer;\n    border-radius: 3px;\n    margin-right: 5px;\n  }\n  button[disabled] {\n    background-color: #ddd;\n    cursor: not-allowed;\n  }\n  button:hover:not([disabled]) {\n    background-color: #45a049;\n  }\n  .dialog-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .dialog {\n    background: white;\n    padding: 20px;\n    border-radius: 8px;\n    text-align: center;\n  }\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}