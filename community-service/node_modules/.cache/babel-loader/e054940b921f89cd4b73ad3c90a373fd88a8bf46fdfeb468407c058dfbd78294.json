{"ast":null,"code":"import { get, isFunction } from \"./basic.mjs\";\nimport { camelize } from \"./format.mjs\";\nimport locale from \"../locale/index.mjs\";\nfunction createTranslate(name) {\n  const prefix = camelize(name) + \".\";\n  return (path, ...args) => {\n    const messages = locale.messages();\n    const message = get(messages, prefix + path) || get(messages, path);\n    return isFunction(message) ? message(...args) : message;\n  };\n}\nfunction genBem(name, mods) {\n  if (!mods) {\n    return \"\";\n  }\n  if (typeof mods === \"string\") {\n    return ` ${name}--${mods}`;\n  }\n  if (Array.isArray(mods)) {\n    return mods.reduce((ret, item) => ret + genBem(name, item), \"\");\n  }\n  return Object.keys(mods).reduce((ret, key) => ret + (mods[key] ? genBem(name, key) : \"\"), \"\");\n}\nfunction createBEM(name) {\n  return (el, mods) => {\n    if (el && typeof el !== \"string\") {\n      mods = el;\n      el = \"\";\n    }\n    el = el ? `${name}__${el}` : name;\n    return `${el}${genBem(el, mods)}`;\n  };\n}\nfunction createNamespace(name) {\n  const prefixedName = `van-${name}`;\n  return [prefixedName, createBEM(prefixedName), createTranslate(prefixedName)];\n}\nexport { createBEM, createNamespace, createTranslate };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}