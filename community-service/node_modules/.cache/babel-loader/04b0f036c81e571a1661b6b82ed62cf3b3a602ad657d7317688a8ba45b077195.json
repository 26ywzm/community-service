{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { verifyAuth } from '../utils/auth';\nimport { handleApiError } from '../utils/errorHandler';\nconst API = process.env.VUE_APP_API_URL;\nexport default {\n  data() {\n    return {\n      showAdminPanel: false,\n      users: [],\n      admins: [],\n      orders: [],\n      // 在数据中新增 orders 来存储用户订单\n      verificationInterval: null\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return !!localStorage.getItem('authToken'); // 检查是否有 token\n    },\n    // 计算属性，用于检查用户是否为管理员或超级管理员\n    isAdmin() {\n      const role = localStorage.getItem('userRole');\n      return role === 'admin'; // 仅普通管理员\n    },\n    isSuperAdmin() {\n      const role = localStorage.getItem('userRole');\n      return role === 'super_admin'; // 仅超级管理员\n    },\n    isAuthenticated() {\n      return !!localStorage.getItem('authToken'); // 检查是否登录\n    }\n  },\n  async created() {\n    // 只在登录状态下启动验证\n    if (this.isLoggedIn) {\n      this.startVerification();\n    }\n  },\n  watch: {\n    // 监听登录状态变化\n    isLoggedIn(newValue) {\n      if (newValue) {\n        // 登录后启动验证\n        this.startVerification();\n      } else {\n        // 登出后清除验证定时器\n        if (this.verificationInterval) {\n          clearInterval(this.verificationInterval);\n          this.verificationInterval = null;\n        }\n      }\n    }\n  },\n  beforeUnmount() {\n    // 组件销毁时清除定时器\n    if (this.verificationInterval) {\n      clearInterval(this.verificationInterval);\n    }\n  },\n  methods: {\n    startVerification() {\n      // 如果已经有定时器在运行，先清除它\n      if (this.verificationInterval) {\n        clearInterval(this.verificationInterval);\n      }\n\n      // 立即进行一次验证\n      this.verifyAndUpdate();\n\n      // 每5分钟验证一次\n      this.verificationInterval = setInterval(() => {\n        this.verifyAndUpdate();\n      }, 5 * 60 * 1000);\n    },\n    async verifyAndUpdate() {\n      // 如果未登录，不进行验证\n      if (!this.isLoggedIn) {\n        return;\n      }\n      const result = await verifyAuth();\n      if (!result.valid) {\n        switch (result.reason) {\n          case 'role-mismatch':\n            // 角色不匹配时，只更新角色不刷新页面\n            this.$forceUpdate();\n            break;\n          case 'no-token':\n          case 'invalid-token':\n          case 'unauthorized':\n            // 清除验证定时器\n            if (this.verificationInterval) {\n              clearInterval(this.verificationInterval);\n              this.verificationInterval = null;\n            }\n            break;\n          // 其他情况不做处理\n        }\n      }\n    },\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${API}/users`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.users = response.data.users; // 从 response.data.users 获取用户列表\n      } catch (error) {\n        handleApiError(error);\n      }\n    },\n    async fetchAdmins() {\n      try {\n        const response = await axios.get(`${API}/admins`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.admins = response.data.admins; // 从 response.data.admins 获取管理员列表\n      } catch (error) {\n        handleApiError(error);\n      }\n    },\n    async fetchUserOrders() {\n      try {\n        const response = await axios.get(`${API}/orders/user`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.orders = response.data; // 存储订单信息\n      } catch (error) {\n        handleApiError(error);\n      }\n    },\n    handleAuthError() {\n      // 清除所有认证信息\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('username');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('email');\n\n      // 停止验证定时器\n      if (this.verificationInterval) {\n        clearInterval(this.verificationInterval);\n        this.verificationInterval = null;\n      }\n\n      // 跳转到登录页面\n      this.$router.push('/login');\n    },\n    async promoteUser(userId) {\n      // 仅超级管理员可以执行升降级操作\n      if (this.isSuperAdmin) {\n        await axios.post(`${API}/promote/${userId}`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.fetchUsers(); // 刷新用户列表\n        this.fetchAdmins(); // 刷新管理员列表\n      }\n    },\n    async demoteUser(adminId) {\n      // 仅超级管理员可以执行升降级操作\n      if (this.isSuperAdmin) {\n        await axios.post(`${API}/demote/${adminId}`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.fetchUsers(); // 刷新用户列表\n        this.fetchAdmins(); // 刷新管理员列表\n      }\n    },\n    async deleteUser(userId) {\n      if (this.isSuperAdmin) {\n        try {\n          await axios.delete(`${API}/users/${userId}`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`\n            }\n          });\n          this.fetchUsers(); // 刷新用户列表\n          this.fetchAdmins(); // 刷新管理员列表\n        } catch (error) {\n          handleApiError(error);\n        }\n      }\n    },\n    viewOrderDetails(orderId) {\n      this.$router.push({\n        name: 'OrderDetail',\n        params: {\n          orderId\n        }\n      });\n    },\n    formatDate(dateString) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(dateString).toLocaleDateString('zh-CN', options);\n    }\n  },\n  mounted() {\n    if (this.isAdmin || this.isSuperAdmin) {\n      this.fetchUsers();\n      this.fetchAdmins();\n    }\n  }\n};","map":{"version":3,"names":["axios","verifyAuth","handleApiError","API","process","env","VUE_APP_API_URL","data","showAdminPanel","users","admins","orders","verificationInterval","computed","isLoggedIn","localStorage","getItem","isAdmin","role","isSuperAdmin","isAuthenticated","created","startVerification","watch","newValue","clearInterval","beforeUnmount","methods","verifyAndUpdate","setInterval","result","valid","reason","$forceUpdate","fetchUsers","response","get","headers","Authorization","error","fetchAdmins","fetchUserOrders","handleAuthError","removeItem","$router","push","promoteUser","userId","post","demoteUser","adminId","deleteUser","delete","viewOrderDetails","orderId","name","params","formatDate","dateString","options","year","month","day","hour","minute","Date","toLocaleDateString","mounted"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\DiscoverPage.vue"],"sourcesContent":["<!-- DiscoverPage.vue -->\r\n<template>\r\n  <div class=\"discover\">\r\n    <h2>发现</h2>\r\n\r\n    <!-- 检查用户是否已登录 -->\r\n    <div v-if=\"isLoggedIn\">\r\n\r\n      <!-- 普通用户可以看到的订餐按钮 -->\r\n      <div v-if=\"!isAdmin && !isSuperAdmin\">\r\n        <router-link to=\"/CanteenOrder\">\r\n          <button>社区食堂</button>\r\n        </router-link>\r\n      </div>\r\n\r\n      <!-- 用户的订单详细按钮 -->\r\n      <div v-if=\"!isAdmin && !isSuperAdmin\">\r\n        <button @click=\"fetchUserOrders\">查看我的订单</button>\r\n      </div>\r\n\r\n      <!-- 用户订单列表 -->\r\n      <div v-if=\"orders.length > 0\">\r\n        <h3>我的订单</h3>\r\n        <ul>\r\n          <li v-for=\"order in orders\" :key=\"order.id\">\r\n            订单 ID: {{ order.id }}, 总价格: {{ order.total_price }} 元, 创建时间: {{ formatDate(order.created_at) }}\r\n            <button @click=\"viewOrderDetails(order.id)\"> 查看详情 </button>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- 管理员和超级管理员可以看到的管理模块按钮 -->\r\n      <div v-if=\"isSuperAdmin || isAdmin\">\r\n        <router-link to=\"/articles/new\">\r\n          <button>文章编写</button>\r\n        </router-link>\r\n      </div>\r\n\r\n      <div v-if=\"isAdmin || isSuperAdmin\">\r\n        <button @click=\"showAdminPanel = true\">管理模块</button>\r\n      </div>\r\n\r\n      <div v-if=\"showAdminPanel\" class=\"admin-panel\">\r\n        <h3>管理员和用户列表</h3>\r\n        <button @click=\"showAdminPanel = false\">关闭</button>\r\n        <div>\r\n          <h4>管理员列表</h4>\r\n          <ul>\r\n            <li v-for=\"admin in admins\" :key=\"admin.id\">\r\n              {{ admin.username }}\r\n              <span v-if=\"isSuperAdmin\"> <!-- 仅超级管理员可以降级 -->\r\n                <button @click=\"demoteUser(admin.id)\">降为用户</button>\r\n                <button @click=\"deleteUser(admin.id)\">删除</button>\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div>\r\n          <h4>用户列表</h4>\r\n          <ul>\r\n            <li v-for=\"user in users\" :key=\"user.id\">\r\n              {{ user.username }}\r\n              <span v-if=\"isSuperAdmin\"> <!-- 仅超级管理员可以升级 -->\r\n                <button @click=\"promoteUser(user.id)\">升为管理员</button>\r\n                <button @click=\"deleteUser(user.id)\">删除</button>\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <!-- 管理员和超级管理员的食堂管理按钮 -->\r\n      <div v-if=\"isAdmin || isSuperAdmin\">\r\n        <router-link to=\"/canteenadmin\">\r\n          <button>食堂管理</button>\r\n        </router-link>\r\n      </div>\r\n      <!-- 订单管理 -->\r\n      <div v-if=\"isAdmin || isSuperAdmin\">\r\n        <router-link to=\"/canteen/orders\">\r\n          <button>订单管理</button>\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 未登录用户 -->\r\n    <div v-else>\r\n      <p>请登录以查看内容。</p>\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { verifyAuth } from '../utils/auth';\r\nimport { handleApiError } from '../utils/errorHandler';\r\nconst API = process.env.VUE_APP_API_URL;\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      showAdminPanel: false,\r\n      users: [],\r\n      admins: [],\r\n      orders: [], // 在数据中新增 orders 来存储用户订单\r\n      verificationInterval: null\r\n    };\r\n  },\r\n  computed: {\r\n    isLoggedIn() {\r\n      return !!localStorage.getItem('authToken'); // 检查是否有 token\r\n    },\r\n    // 计算属性，用于检查用户是否为管理员或超级管理员\r\n    isAdmin() {\r\n      const role = localStorage.getItem('userRole');\r\n      return role === 'admin'; // 仅普通管理员\r\n    },\r\n    isSuperAdmin() {\r\n      const role = localStorage.getItem('userRole');\r\n      return role === 'super_admin'; // 仅超级管理员\r\n    },\r\n    isAuthenticated() {\r\n      return !!localStorage.getItem('authToken'); // 检查是否登录\r\n    },\r\n  },\r\n  async created() {\r\n    // 只在登录状态下启动验证\r\n    if (this.isLoggedIn) {\r\n      this.startVerification();\r\n    }\r\n  },\r\n  watch: {\r\n    // 监听登录状态变化\r\n    isLoggedIn(newValue) {\r\n      if (newValue) {\r\n        // 登录后启动验证\r\n        this.startVerification();\r\n      } else {\r\n        // 登出后清除验证定时器\r\n        if (this.verificationInterval) {\r\n          clearInterval(this.verificationInterval);\r\n          this.verificationInterval = null;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    // 组件销毁时清除定时器\r\n    if (this.verificationInterval) {\r\n      clearInterval(this.verificationInterval);\r\n    }\r\n  },\r\n  methods: {\r\n    startVerification() {\r\n      // 如果已经有定时器在运行，先清除它\r\n      if (this.verificationInterval) {\r\n        clearInterval(this.verificationInterval);\r\n      }\r\n      \r\n      // 立即进行一次验证\r\n      this.verifyAndUpdate();\r\n      \r\n      // 每5分钟验证一次\r\n      this.verificationInterval = setInterval(() => {\r\n        this.verifyAndUpdate();\r\n      }, 5 * 60 * 1000);\r\n    },\r\n    async verifyAndUpdate() {\r\n      // 如果未登录，不进行验证\r\n      if (!this.isLoggedIn) {\r\n        return;\r\n      }\r\n\r\n      const result = await verifyAuth();\r\n      if (!result.valid) {\r\n        switch (result.reason) {\r\n          case 'role-mismatch':\r\n            // 角色不匹配时，只更新角色不刷新页面\r\n            this.$forceUpdate();\r\n            break;\r\n          case 'no-token':\r\n          case 'invalid-token':\r\n          case 'unauthorized':\r\n            // 清除验证定时器\r\n            if (this.verificationInterval) {\r\n              clearInterval(this.verificationInterval);\r\n              this.verificationInterval = null;\r\n            }\r\n            break;\r\n          // 其他情况不做处理\r\n        }\r\n      }\r\n    },\r\n    async fetchUsers() {\r\n      try {\r\n        const response = await axios.get(`${API}/users`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\r\n          },\r\n        });\r\n        this.users = response.data.users; // 从 response.data.users 获取用户列表\r\n      } catch (error) {\r\n        handleApiError(error);\r\n      }\r\n    },\r\n    async fetchAdmins() {\r\n      try {\r\n        const response = await axios.get(`${API}/admins`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\r\n          },\r\n        });\r\n        this.admins = response.data.admins; // 从 response.data.admins 获取管理员列表\r\n      } catch (error) {\r\n        handleApiError(error);\r\n      }\r\n    },\r\n    async fetchUserOrders() {\r\n      try {\r\n        const response = await axios.get(`${API}/orders/user`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\r\n          },\r\n        });\r\n        this.orders = response.data; // 存储订单信息\r\n      } catch (error) {\r\n        handleApiError(error);\r\n      }\r\n    },\r\n    handleAuthError() {\r\n      // 清除所有认证信息\r\n      localStorage.removeItem('authToken');\r\n      localStorage.removeItem('userRole');\r\n      localStorage.removeItem('username');\r\n      localStorage.removeItem('userId');\r\n      localStorage.removeItem('email');\r\n      \r\n      // 停止验证定时器\r\n      if (this.verificationInterval) {\r\n        clearInterval(this.verificationInterval);\r\n        this.verificationInterval = null;\r\n      }\r\n      \r\n      // 跳转到登录页面\r\n      this.$router.push('/login');\r\n    },\r\n    async promoteUser(userId) {\r\n      // 仅超级管理员可以执行升降级操作\r\n      if (this.isSuperAdmin) {\r\n        await axios.post(`${API}/promote/${userId}`, {}, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\r\n          },\r\n        });\r\n        this.fetchUsers(); // 刷新用户列表\r\n        this.fetchAdmins(); // 刷新管理员列表\r\n      }\r\n    },\r\n    async demoteUser(adminId) {\r\n      // 仅超级管理员可以执行升降级操作\r\n      if (this.isSuperAdmin) {\r\n        await axios.post(`${API}/demote/${adminId}`, {}, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\r\n          },\r\n        });\r\n        this.fetchUsers(); // 刷新用户列表\r\n        this.fetchAdmins(); // 刷新管理员列表\r\n      }\r\n    },\r\n    async deleteUser(userId) {\r\n      if (this.isSuperAdmin) {\r\n        try {\r\n          await axios.delete(`${API}/users/${userId}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`,\r\n            },\r\n          });\r\n          this.fetchUsers(); // 刷新用户列表\r\n          this.fetchAdmins(); // 刷新管理员列表\r\n        } catch (error) {\r\n          handleApiError(error);\r\n        }\r\n      }\r\n    },\r\n    viewOrderDetails(orderId) {\r\n      this.$router.push({ name: 'OrderDetail', params: { orderId } });\r\n    },\r\n    formatDate(dateString) {\r\n      const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\r\n      return new Date(dateString).toLocaleDateString('zh-CN', options);\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    if (this.isAdmin || this.isSuperAdmin) {\r\n      this.fetchUsers();\r\n      this.fetchAdmins();\r\n    }\r\n  }\r\n\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.discover {\r\n  padding: 20px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n}\r\n\r\n.title {\r\n  font-size: 24px;\r\n  color: #333;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.button-group {\r\n  text-align: center;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.admin-button,\r\n.article-button,\r\n.close-button,\r\n.action-button {\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n  margin: 5px;\r\n}\r\n\r\n.admin-button:hover,\r\n.article-button:hover,\r\n.close-button:hover,\r\n.action-button:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.admin-panel {\r\n  border: 1px solid #ccc;\r\n  padding: 15px;\r\n  margin-top: 20px;\r\n  border-radius: 8px;\r\n  background-color: #fff;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh3 {\r\n  text-align: center;\r\n  margin-bottom: 15px;\r\n}\r\n\r\nh4 {\r\n  margin-top: 10px;\r\n  color: #555;\r\n}\r\n\r\n.list {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\n.list li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 8px 0;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.list li:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n/* 按钮 */\r\n.admin-button,\r\n.article-button,\r\n.close-button,\r\n.action-button {\r\n  background: linear-gradient(135deg, #007bff, #0056b3);\r\n  color: white;\r\n  border: none;\r\n  padding: 15px 30px;\r\n  /* 增大按钮的内边距 */\r\n  border-radius: 8px;\r\n  /* 增加圆角 */\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  margin: 5px;\r\n  font-size: 18px;\r\n  /* 增大字体大小 */\r\n  box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);\r\n}\r\n\r\n.admin-button:hover,\r\n.article-button:hover,\r\n.close-button:hover,\r\n.action-button:hover {\r\n  background: linear-gradient(135deg, #0056b3, #004494);\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 12px rgba(0, 123, 255, 0.3);\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}