{"ast":null,"code":"const API = process.env.VUE_APP_API_URL;\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nexport default {\n  data() {\n    return {\n      orders: [],\n      // 存储所有订单信息\n      showDialog: false,\n      dialogMessage: '',\n      lastActionTime: 0,\n      // 记录上一次操作的时间戳\n      loading: false,\n      // 状态显示文本\n      statusText: {\n        '0': '待处理',\n        '1': '处理中',\n        '2': '已完成',\n        '3': '已取消'\n      }\n    };\n  },\n  mounted() {\n    this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${API}/canteen/orders`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        console.log('获取到的订单数据:', response.data);\n        this.orders = response.data.orders;\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        ElMessage.error('获取订单列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async handleButtonClick(order) {\n      if (!this.canPerformAction(order)) {\n        ElMessage.warning('操作太频繁，请稍后再试');\n        return;\n      }\n      try {\n        let newStatus;\n        const currentStatus = parseInt(order.status);\n        switch (currentStatus) {\n          case 0:\n            // pending\n            newStatus = 1; // confirmed\n            break;\n          case 1:\n            // confirmed\n            newStatus = 2; // completed\n            break;\n          case 2:\n            // completed\n            newStatus = 3; // cancelled\n            break;\n          default:\n            ElMessage.error(`当前状态 ${this.statusText[order.status]} 无法进行操作`);\n            return;\n        }\n        await this.updateOrderStatus(order, newStatus);\n        // 操作成功后刷新订单列表\n        await this.fetchOrders();\n      } catch (error) {\n        console.error('操作失败:', error);\n        ElMessage.error('操作失败，请重试');\n      }\n    },\n    canPerformAction(order) {\n      const now = Date.now();\n      // 如果是第一次操作，或者距离上次操作超过3秒\n      if (!order.lastActionTime || now - order.lastActionTime > 3000) {\n        return true;\n      }\n      return false;\n    },\n    async updateOrderStatus(order, status) {\n      try {\n        console.log('Updating order status:', {\n          orderId: order.id,\n          status: status\n        });\n        await axios.put(`${API}/canteen/orders/${order.id}`, {\n          status\n        }, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        ElMessage.success(`订单状态已更新为${this.statusText[status]}`);\n        order.lastActionTime = Date.now();\n        order.status = status; // 更新本地状态\n        await this.fetchOrders(); // 刷新订单列表\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        ElMessage.error(error.response?.data?.message || '更新订单状态失败，请重试');\n        throw error;\n      }\n    },\n    async deleteOrder(orderId) {\n      try {\n        await axios.delete(`${API}/canteen/orders/${orderId}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        ElMessage.success('订单已删除');\n        this.orders = this.orders.filter(order => order.id !== orderId);\n      } catch (error) {\n        console.error('删除订单失败:', error);\n        throw error;\n      }\n    },\n    closeDialog() {\n      this.showDialog = false;\n      this.dialogMessage = '';\n    },\n    formatDate(dateString) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(dateString).toLocaleDateString('zh-CN', options);\n    }\n  }\n};","map":{"version":3,"names":["API","process","env","VUE_APP_API_URL","axios","ElMessage","data","orders","showDialog","dialogMessage","lastActionTime","loading","statusText","mounted","fetchOrders","methods","response","get","headers","localStorage","getItem","console","log","error","handleButtonClick","order","canPerformAction","warning","newStatus","currentStatus","parseInt","status","updateOrderStatus","now","Date","orderId","id","put","success","message","deleteOrder","delete","Authorization","filter","closeDialog","formatDate","dateString","options","year","month","day","hour","minute","toLocaleDateString"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\OrderManagement.vue"],"sourcesContent":["<template>\n    <div class=\"order-management\">\n      <h2>订单管理</h2>\n  \n      <div v-if=\"orders.length > 0\">\n        <table>\n          <thead>\n            <tr>\n              <th>订单 ID</th>\n              <th>用户</th>\n              <th>邮箱</th>\n              <th>总价格</th>\n              <th>创建时间</th>\n              <th>状态</th>\n              <th>详细内容</th>\n              <th>操作</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"order in orders\" :key=\"order.id\">\n              <td>{{ order.id }}</td>\n              <td>{{ order.username }}</td>\n              <td>{{ order.email }}</td>\n              <td>{{ order.total_price }} 元</td>\n              <td>{{ formatDate(order.created_at) }}</td>\n              <td>{{ statusText[order.status] }}</td>\n              <td>\n                <ul>\n                  <li v-for=\"item in order.items\" :key=\"item.menu_item_id\">\n                    {{ item.name }} ({{ item.quantity }}): {{ item.total }} 元\n                  </li>\n                </ul>\n              </td>\n              <td class=\"order-actions\">\n                <button \n                  v-if=\"parseInt(order.status) === 0\" \n                  class=\"btn-confirm\"\n                  @click=\"handleButtonClick(order)\"\n                >开始处理</button>\n  \n                <button \n                  v-if=\"parseInt(order.status) === 1\" \n                  class=\"btn-complete\"\n                  @click=\"handleButtonClick(order)\"\n                >完成订单</button>\n  \n                <button \n                  v-if=\"parseInt(order.status) === 2\" \n                  class=\"btn-delete\"\n                  @click=\"handleButtonClick(order)\"\n                >取消订单</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n  \n      <div v-else>\n        <p class=\"empty-message\">没有找到订单。</p>\n      </div>\n\n      <!-- 对话框 -->\n      <div v-if=\"showDialog\" class=\"dialog-overlay\">\n        <div class=\"dialog\">\n          <p>{{ dialogMessage }}</p>\n          <button @click=\"closeDialog\">确定</button>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  const API = process.env.VUE_APP_API_URL;\n  import axios from 'axios';\n  import { ElMessage } from 'element-plus';\n  \n  export default {\n    data() {\n      return {\n        orders: [], // 存储所有订单信息\n        showDialog: false,\n        dialogMessage: '',\n        lastActionTime: 0, // 记录上一次操作的时间戳\n        loading: false,\n        // 状态显示文本\n        statusText: {\n          '0': '待处理',\n          '1': '处理中',\n          '2': '已完成',\n          '3': '已取消'\n        }\n      };\n    },\n    mounted() {\n      this.fetchOrders(); // 加载所有订单\n    },\n    methods: {\n      async fetchOrders() {\n        try {\n          this.loading = true;\n          const response = await axios.get(`${API}/canteen/orders`, {\n            headers: {\n              'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n            }\n          });\n          console.log('获取到的订单数据:', response.data);  \n          this.orders = response.data.orders;\n        } catch (error) {\n          console.error('获取订单列表失败:', error);\n          ElMessage.error('获取订单列表失败');\n        } finally {\n          this.loading = false;\n        }\n      },\n      \n      async handleButtonClick(order) {\n        if (!this.canPerformAction(order)) {\n          ElMessage.warning('操作太频繁，请稍后再试');\n          return;\n        }\n\n        try {\n          let newStatus;\n          const currentStatus = parseInt(order.status);\n          switch (currentStatus) {\n            case 0:  // pending\n              newStatus = 1;  // confirmed\n              break;\n            case 1:  // confirmed\n              newStatus = 2;  // completed\n              break;\n            case 2:  // completed\n              newStatus = 3;  // cancelled\n              break;\n            default:\n              ElMessage.error(`当前状态 ${this.statusText[order.status]} 无法进行操作`);\n              return;\n          }\n\n          await this.updateOrderStatus(order, newStatus);\n          // 操作成功后刷新订单列表\n          await this.fetchOrders();\n        } catch (error) {\n          console.error('操作失败:', error);\n          ElMessage.error('操作失败，请重试');\n        }\n      },\n\n      canPerformAction(order) {\n        const now = Date.now();\n        // 如果是第一次操作，或者距离上次操作超过3秒\n        if (!order.lastActionTime || now - order.lastActionTime > 3000) {\n          return true;\n        }\n        return false;\n      },\n\n      async updateOrderStatus(order, status) {\n        try {\n          console.log('Updating order status:', { orderId: order.id, status: status });\n          await axios.put(\n            `${API}/canteen/orders/${order.id}`, \n            { status }, \n            {\n              headers: {\n                'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n                'Content-Type': 'application/json'\n              }\n            }\n          );\n          \n          ElMessage.success(`订单状态已更新为${this.statusText[status]}`);\n          order.lastActionTime = Date.now();\n          order.status = status; // 更新本地状态\n          await this.fetchOrders(); // 刷新订单列表\n        } catch (error) {\n          console.error('更新订单状态失败:', error);\n          ElMessage.error(error.response?.data?.message || '更新订单状态失败，请重试');\n          throw error;\n        }\n      },\n\n      async deleteOrder(orderId) {\n        try {\n          await axios.delete(`${API}/canteen/orders/${orderId}`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`\n            }\n          });\n          ElMessage.success('订单已删除');\n          this.orders = this.orders.filter(order => order.id !== orderId);\n        } catch (error) {\n          console.error('删除订单失败:', error);\n          throw error;\n        }\n      },\n\n      closeDialog() {\n        this.showDialog = false;\n        this.dialogMessage = '';\n      },\n\n      formatDate(dateString) {\n        const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\n        return new Date(dateString).toLocaleDateString('zh-CN', options);\n      }\n    }\n  };\n  </script>\n  \n  <style scoped>\n  .order-management {\n    padding: 20px;\n  }\n\n  h2 {\n    color: #303133;\n    margin-bottom: 20px;\n  }\n\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 20px;\n    background-color: white;\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  }\n\n  th, td {\n    padding: 12px 15px;\n    text-align: left;\n    border-bottom: 1px solid #EBEEF5;\n  }\n\n  th {\n    background-color: #F5F7FA;\n    color: #606266;\n    font-weight: 500;\n  }\n\n  tr:hover {\n    background-color: #F5F7FA;\n  }\n\n  button {\n    padding: 6px 12px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: all 0.3s;\n    margin: 0 5px;\n  }\n\n  button:hover {\n    opacity: 0.8;\n  }\n\n  .dialog-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1000;\n  }\n\n  .dialog {\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n    text-align: center;\n  }\n\n  .dialog p {\n    margin-bottom: 15px;\n    color: #606266;\n  }\n\n  .dialog button {\n    background-color: #409EFF;\n    color: white;\n    padding: 8px 20px;\n  }\n\n  .order-actions {\n    display: flex;\n    gap: 8px;\n  }\n\n  .btn-confirm {\n    background-color: #67C23A;\n    color: white;\n  }\n\n  .btn-complete {\n    background-color: #409EFF;\n    color: white;\n  }\n\n  .btn-delete {\n    background-color: #F56C6C;\n    color: white;\n  }\n\n  .empty-message {\n    text-align: center;\n    color: #909399;\n    margin-top: 40px;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n\n  li {\n    margin: 5px 0;\n    color: #606266;\n  }\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}