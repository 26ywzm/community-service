{"ast":null,"code":"import axios from 'axios';\nconst API = process.env.VUE_APP_API_URL;\nexport const verifyAuth = async () => {\n  try {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      return {\n        valid: false,\n        reason: 'no-token'\n      };\n    }\n    const response = await axios.get(`${API}/verify`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.data.valid) {\n      // 如果角色不匹配，更新为正确的角色\n      if (response.data.correctRole) {\n        localStorage.setItem('userRole', response.data.correctRole);\n        return {\n          valid: false,\n          reason: 'role-mismatch',\n          newRole: response.data.correctRole\n        };\n      } else {\n        // 如果验证完全失败，清除所有认证信息\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userRole');\n        localStorage.removeItem('username');\n        localStorage.removeItem('userId');\n        localStorage.removeItem('email');\n        return {\n          valid: false,\n          reason: 'invalid-token'\n        };\n      }\n    }\n    return {\n      valid: true,\n      role: response.data.role\n    };\n  } catch (error) {\n    console.error('验证失败:', error);\n    if (error.response && error.response.status === 401) {\n      // 只在401错误时清除认证信息\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('username');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('email');\n      return {\n        valid: false,\n        reason: 'unauthorized'\n      };\n    }\n    // 其他错误（如网络错误）不做处理\n    return {\n      valid: true\n    };\n  }\n};","map":{"version":3,"names":["axios","API","process","env","VUE_APP_API_URL","verifyAuth","token","localStorage","getItem","valid","reason","response","get","headers","Authorization","data","correctRole","setItem","newRole","removeItem","role","error","console","status"],"sources":["C:/Users/拯救者/Desktop/text/community-service/src/utils/auth.js"],"sourcesContent":["import axios from 'axios';\n\nconst API = process.env.VUE_APP_API_URL;\n\nexport const verifyAuth = async () => {\n  try {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      return { valid: false, reason: 'no-token' };\n    }\n\n    const response = await axios.get(`${API}/verify`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.data.valid) {\n      // 如果角色不匹配，更新为正确的角色\n      if (response.data.correctRole) {\n        localStorage.setItem('userRole', response.data.correctRole);\n        return { valid: false, reason: 'role-mismatch', newRole: response.data.correctRole };\n      } else {\n        // 如果验证完全失败，清除所有认证信息\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userRole');\n        localStorage.removeItem('username');\n        localStorage.removeItem('userId');\n        localStorage.removeItem('email');\n        return { valid: false, reason: 'invalid-token' };\n      }\n    }\n\n    return { valid: true, role: response.data.role };\n  } catch (error) {\n    console.error('验证失败:', error);\n    if (error.response && error.response.status === 401) {\n      // 只在401错误时清除认证信息\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('username');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('email');\n      return { valid: false, reason: 'unauthorized' };\n    }\n    // 其他错误（如网络错误）不做处理\n    return { valid: true };\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe;AAEvC,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAI,CAACF,KAAK,EAAE;MACV,OAAO;QAAEG,KAAK,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAW,CAAC;IAC7C;IAEA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,GAAGX,GAAG,SAAS,EAAE;MAChDY,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUR,KAAK;MAChC;IACF,CAAC,CAAC;IAEF,IAAI,CAACK,QAAQ,CAACI,IAAI,CAACN,KAAK,EAAE;MACxB;MACA,IAAIE,QAAQ,CAACI,IAAI,CAACC,WAAW,EAAE;QAC7BT,YAAY,CAACU,OAAO,CAAC,UAAU,EAAEN,QAAQ,CAACI,IAAI,CAACC,WAAW,CAAC;QAC3D,OAAO;UAAEP,KAAK,EAAE,KAAK;UAAEC,MAAM,EAAE,eAAe;UAAEQ,OAAO,EAAEP,QAAQ,CAACI,IAAI,CAACC;QAAY,CAAC;MACtF,CAAC,MAAM;QACL;QACAT,YAAY,CAACY,UAAU,CAAC,WAAW,CAAC;QACpCZ,YAAY,CAACY,UAAU,CAAC,UAAU,CAAC;QACnCZ,YAAY,CAACY,UAAU,CAAC,UAAU,CAAC;QACnCZ,YAAY,CAACY,UAAU,CAAC,QAAQ,CAAC;QACjCZ,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;QAChC,OAAO;UAAEV,KAAK,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAgB,CAAC;MAClD;IACF;IAEA,OAAO;MAAED,KAAK,EAAE,IAAI;MAAEW,IAAI,EAAET,QAAQ,CAACI,IAAI,CAACK;IAAK,CAAC;EAClD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;IAC7B,IAAIA,KAAK,CAACV,QAAQ,IAAIU,KAAK,CAACV,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;MACnD;MACAhB,YAAY,CAACY,UAAU,CAAC,WAAW,CAAC;MACpCZ,YAAY,CAACY,UAAU,CAAC,UAAU,CAAC;MACnCZ,YAAY,CAACY,UAAU,CAAC,UAAU,CAAC;MACnCZ,YAAY,CAACY,UAAU,CAAC,QAAQ,CAAC;MACjCZ,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;MAChC,OAAO;QAAEV,KAAK,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAe,CAAC;IACjD;IACA;IACA,OAAO;MAAED,KAAK,EAAE;IAAK,CAAC;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}