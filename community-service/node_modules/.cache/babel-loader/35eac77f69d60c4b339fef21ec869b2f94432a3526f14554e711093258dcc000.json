{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = process.env.VUE_APP_BASE_URL;\nexport default {\n  data() {\n    return {\n      users: [],\n      // 用户列表\n      selectedUser: null,\n      // 当前选择的用户\n      selectedMessage: null,\n      // 当前选择要回复的消息\n      chatMessages: [],\n      // 当前用户的聊天记录\n      adminReply: '',\n      // 管理员输入的回复内容\n      message: {\n        show: false,\n        content: '',\n        type: 'success'\n      },\n      isSending: false // 防止重复发送\n    };\n  },\n  mounted() {\n    this.fetchUsers(); // 获取用户列表\n    this.fetchChatMessages(); // 获取所有聊天记录\n  },\n  methods: {\n    // 显示提示消息\n    showMessage(content, type) {\n      this.message = {\n        content,\n        type,\n        show: true\n      };\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/canteen/users`);\n        this.users = response.data;\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        this.showMessage('获取用户列表失败，请稍后重试', 'error');\n      }\n    },\n    // 选择与某个用户对话\n    async selectUser(user) {\n      this.selectedUser = this.selectedUser?.id === user.id ? null : user;\n      this.selectedMessage = null; // 清除选中的消息\n      this.adminReply = ''; // 清空回复框\n      this.fetchChatMessages(this.selectedUser?.id);\n    },\n    // 选择要回复的消息\n    selectMessage(message) {\n      if (message.admin_reply) {\n        this.showMessage('该消息已经回复过了', 'info');\n        return;\n      }\n      this.selectedMessage = message;\n      this.adminReply = ''; // 清空回复框\n    },\n    // 取消回复\n    cancelReply() {\n      this.selectedMessage = null;\n      this.adminReply = '';\n    },\n    // 获取聊天记录\n    async fetchChatMessages(userId = null) {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/canteen/feedback`);\n        let feedbacks = response.data;\n\n        // 如果选择了特定用户，只显示该用户的消息\n        if (userId) {\n          feedbacks = feedbacks.filter(msg => msg.user_id === userId);\n        }\n        this.chatMessages = feedbacks.map(msg => ({\n          ...msg,\n          isAdmin: msg.admin_reply !== null\n        }));\n      } catch (error) {\n        console.error('获取聊天记录失败:', error);\n        this.showMessage('获取聊天记录失败，请稍后重试', 'error');\n      }\n    },\n    // 发送管理员回复\n    async sendReply() {\n      if (this.isSending || !this.adminReply.trim() || !this.selectedMessage) {\n        this.showMessage('请选择要回复的消息并输入回复内容', 'error');\n        return;\n      }\n      this.isSending = true;\n      try {\n        await axios.put(`${BASE_URL}/api/canteen/feedback/${this.selectedMessage.id}/reply`, {\n          admin_reply: this.adminReply.trim()\n        });\n        this.showMessage('回复成功', 'success');\n        this.adminReply = ''; // 清空输入框\n        this.selectedMessage = null; // 清除选中的消息\n        await this.fetchChatMessages(this.selectedUser?.id); // 重新获取聊天记录\n      } catch (error) {\n        console.error('发送回复失败:', error);\n        this.showMessage('发送回复失败，请稍后重试', 'error');\n      } finally {\n        this.isSending = false;\n      }\n    },\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n    }\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","VUE_APP_BASE_URL","data","users","selectedUser","selectedMessage","chatMessages","adminReply","message","show","content","type","isSending","mounted","fetchUsers","fetchChatMessages","methods","showMessage","setTimeout","response","get","error","console","selectUser","user","id","selectMessage","admin_reply","cancelReply","userId","feedbacks","filter","msg","user_id","map","isAdmin","sendReply","trim","put","formatTimestamp","timestamp","date","Date","toLocaleDateString","toLocaleTimeString"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\ManageFeedback.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <div class=\"user-list\">\n      <h3>用户列表</h3>\n      <ul>\n        <!-- 显示所有用户，管理员可以点击查看与他们的对话 -->\n        <li v-for=\"user in users\" :key=\"user.id\" @click=\"selectUser(user)\"\n            :class=\"{ active: selectedUser && selectedUser.id === user.id }\">\n          {{ user.username }}\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"chat-box\">\n      <!-- 如果选定了用户，显示与该用户的对话，否则显示所有用户的聊天记录 -->\n      <h3>{{ selectedUser ? `与 ${selectedUser.username} 的对话` : '所有用户聊天记录' }}</h3>\n      <div class=\"messages\">\n        <div v-for=\"message in chatMessages\" :key=\"message.id\" \n             :class=\"['message', message.isAdmin ? 'admin' : 'user']\"\n             @click=\"selectMessage(message)\">\n          <div class=\"message-content\">{{ message.message }}</div>\n          <div class=\"message-reply\" v-if=\"message.admin_reply\">\n            <strong>管理员回复：</strong> {{ message.admin_reply }}\n          </div>\n          <div class=\"timestamp\">{{ formatTimestamp(message.created_at) }}</div>\n        </div>\n      </div>\n\n      <!-- 管理员回复区域 -->\n      <div class=\"reply-area\" v-if=\"selectedMessage\">\n        <div class=\"selected-message\">\n          正在回复: {{ selectedMessage.message }}\n        </div>\n        <textarea v-model=\"adminReply\" placeholder=\"输入回复...\" rows=\"3\"></textarea>\n        <button @click=\"sendReply\" :disabled=\"isSending\">\n          {{ isSending ? '发送中...' : '发送' }}\n        </button>\n        <button @click=\"cancelReply\" class=\"cancel-btn\">取消回复</button>\n      </div>\n    </div>\n\n    <!-- 提示消息 -->\n    <div v-if=\"message.show\" :class=\"['message-toast', message.type]\">\n      {{ message.content }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nconst BASE_URL = process.env.VUE_APP_BASE_URL;\n\nexport default {\n  data() {\n    return {\n      users: [],  // 用户列表\n      selectedUser: null,  // 当前选择的用户\n      selectedMessage: null, // 当前选择要回复的消息\n      chatMessages: [],  // 当前用户的聊天记录\n      adminReply: '',  // 管理员输入的回复内容\n      message: {\n        show: false,\n        content: '',\n        type: 'success'\n      },\n      isSending: false  // 防止重复发送\n    };\n  },\n\n  mounted() {\n    this.fetchUsers();  // 获取用户列表\n    this.fetchChatMessages(); // 获取所有聊天记录\n  },\n\n  methods: {\n    // 显示提示消息\n    showMessage(content, type) {\n      this.message = {\n        content,\n        type,\n        show: true\n      };\n\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/canteen/users`);\n        this.users = response.data;\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        this.showMessage('获取用户列表失败，请稍后重试', 'error');\n      }\n    },\n\n    // 选择与某个用户对话\n    async selectUser(user) {\n      this.selectedUser = this.selectedUser?.id === user.id ? null : user;\n      this.selectedMessage = null; // 清除选中的消息\n      this.adminReply = ''; // 清空回复框\n      this.fetchChatMessages(this.selectedUser?.id);\n    },\n\n    // 选择要回复的消息\n    selectMessage(message) {\n      if (message.admin_reply) {\n        this.showMessage('该消息已经回复过了', 'info');\n        return;\n      }\n      this.selectedMessage = message;\n      this.adminReply = ''; // 清空回复框\n    },\n\n    // 取消回复\n    cancelReply() {\n      this.selectedMessage = null;\n      this.adminReply = '';\n    },\n\n    // 获取聊天记录\n    async fetchChatMessages(userId = null) {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/canteen/feedback`);\n        let feedbacks = response.data;\n\n        // 如果选择了特定用户，只显示该用户的消息\n        if (userId) {\n          feedbacks = feedbacks.filter(msg => msg.user_id === userId);\n        }\n\n        this.chatMessages = feedbacks.map(msg => ({\n          ...msg,\n          isAdmin: msg.admin_reply !== null\n        }));\n      } catch (error) {\n        console.error('获取聊天记录失败:', error);\n        this.showMessage('获取聊天记录失败，请稍后重试', 'error');\n      }\n    },\n\n    // 发送管理员回复\n    async sendReply() {\n      if (this.isSending || !this.adminReply.trim() || !this.selectedMessage) {\n        this.showMessage('请选择要回复的消息并输入回复内容', 'error');\n        return;\n      }\n\n      this.isSending = true;\n\n      try {\n        await axios.put(`${BASE_URL}/api/canteen/feedback/${this.selectedMessage.id}/reply`, {\n          admin_reply: this.adminReply.trim()\n        });\n\n        this.showMessage('回复成功', 'success');\n        this.adminReply = '';  // 清空输入框\n        this.selectedMessage = null; // 清除选中的消息\n        await this.fetchChatMessages(this.selectedUser?.id);  // 重新获取聊天记录\n      } catch (error) {\n        console.error('发送回复失败:', error);\n        this.showMessage('发送回复失败，请稍后重试', 'error');\n      } finally {\n        this.isSending = false;\n      }\n    },\n\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  justify-content: space-between;\n  padding: 20px;\n  height: calc(100vh - 100px);\n}\n\n.user-list {\n  width: 25%;\n  border-right: 1px solid #ddd;\n  padding-right: 20px;\n}\n\n.user-list ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.user-list li {\n  padding: 10px;\n  cursor: pointer;\n  border-bottom: 1px solid #eee;\n  transition: all 0.3s ease;\n}\n\n.user-list li:hover {\n  background-color: #f5f5f5;\n}\n\n.user-list li.active {\n  background-color: #e3f2fd;\n  border-radius: 4px;\n}\n\n.chat-box {\n  width: 70%;\n  display: flex;\n  flex-direction: column;\n  padding-left: 20px;\n}\n\n.messages {\n  flex: 1;\n  overflow-y: auto;\n  margin-bottom: 20px;\n  padding: 10px;\n}\n\n.message {\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 15px;\n  max-width: 80%;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.message:hover {\n  transform: translateX(5px);\n}\n\n.message.admin {\n  background-color: #e3f2fd;\n  margin-left: auto;\n}\n\n.message.user {\n  background-color: #f5f5f5;\n  margin-right: auto;\n}\n\n.message-content {\n  font-size: 14px;\n  margin-bottom: 5px;\n}\n\n.message-reply {\n  font-size: 14px;\n  margin-top: 8px;\n  padding-top: 8px;\n  border-top: 1px solid #ddd;\n}\n\n.timestamp {\n  font-size: 12px;\n  color: #888;\n  margin-top: 5px;\n}\n\n.reply-area {\n  background-color: #f8f9fa;\n  padding: 15px;\n  border-radius: 8px;\n  margin-top: 10px;\n}\n\n.selected-message {\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 10px;\n  padding: 8px;\n  background-color: #fff;\n  border-radius: 4px;\n}\n\ntextarea {\n  width: 100%;\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 10px;\n  resize: vertical;\n  font-size: 14px;\n}\n\nbutton {\n  padding: 8px 16px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-right: 10px;\n}\n\nbutton:hover:not(:disabled) {\n  background-color: #45a049;\n  transform: translateY(-1px);\n}\n\nbutton:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.cancel-btn {\n  background-color: #f44336;\n}\n\n.cancel-btn:hover {\n  background-color: #d32f2f;\n}\n\n.message-toast {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  padding: 12px 24px;\n  border-radius: 4px;\n  color: white;\n  animation: slideIn 0.3s ease-out;\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n}\n\n.message-toast.success {\n  background-color: #4CAF50;\n}\n\n.message-toast.error {\n  background-color: #f44336;\n}\n\n.message-toast.info {\n  background-color: #2196F3;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}