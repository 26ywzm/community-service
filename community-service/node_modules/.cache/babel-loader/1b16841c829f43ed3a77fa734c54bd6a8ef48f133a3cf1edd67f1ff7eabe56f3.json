{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nconst API = 'http://localhost:3000/api/auth'; // 直接定义 API 地址\n\nexport default {\n  data() {\n    return {\n      orders: [],\n      loading: false,\n      processingOrders: [],\n      statusOptions: {\n        0: '待处理',\n        1: '处理中',\n        2: '已完成',\n        3: '已取消'\n      },\n      statusFilter: '',\n      pagination: {\n        total: 0,\n        current_page: 1,\n        per_page: 10\n      }\n    };\n  },\n  watch: {\n    statusFilter(newValue) {\n      this.fetchOrders();\n    }\n  },\n  mounted() {\n    this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${API}/canteen/orders`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          },\n          params: {\n            page: this.pagination.current_page,\n            limit: this.pagination.per_page,\n            status: this.statusFilter || undefined\n          }\n        });\n\n        // 处理订单数据，确保状态是数字类型\n        this.orders = response.data.orders.map(order => ({\n          ...order,\n          status: parseInt(order.status)\n        }));\n\n        // 更新分页信息\n        if (response.data.pagination) {\n          this.pagination = response.data.pagination;\n        }\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        ElMessage.error('获取订单列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateOrderStatus(orderId, newStatus) {\n      try {\n        this.processingOrders.push(orderId);\n        await axios.put(`${API}/canteen/orders/${orderId}`, {\n          status: newStatus\n        }, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n\n        // 更新本地订单状态\n        const order = this.orders.find(o => o.id === orderId);\n        if (order) {\n          order.status = newStatus;\n        }\n        ElMessage.success('订单状态更新成功');\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        ElMessage.error('更新订单状态失败');\n        // 如果更新失败，重新获取订单列表\n        await this.fetchOrders();\n      } finally {\n        const index = this.processingOrders.indexOf(orderId);\n        if (index > -1) {\n          this.processingOrders.splice(index, 1);\n        }\n      }\n    },\n    async deleteOrder(orderId) {\n      try {\n        this.processingOrders.push(orderId);\n        await ElMessageBox.confirm('确定要删除这个订单吗？此操作不可恢复。', '警告', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        await axios.delete(`${API}/canteen/orders/${orderId}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        await this.fetchOrders();\n        ElMessage.success('订单删除成功');\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error('删除订单失败:', error);\n          ElMessage.error('删除订单失败');\n        }\n      } finally {\n        const index = this.processingOrders.indexOf(orderId);\n        if (index > -1) {\n          this.processingOrders.splice(index, 1);\n        }\n      }\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return {\n        date: date.toLocaleDateString('zh-CN', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit'\n        }),\n        time: date.toLocaleTimeString('zh-CN', {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      };\n    },\n    getStatusType(status) {\n      switch (status) {\n        case 0:\n          return 'danger';\n        case 1:\n          return 'warning';\n        case 2:\n          return 'success';\n        default:\n          return 'info';\n      }\n    },\n    isProcessing(orderId) {\n      // 检查是否有正在处理的订单\n      return this.processingOrders.includes(orderId);\n    },\n    handlePageChange(page) {\n      this.pagination.current_page = page;\n      this.fetchOrders();\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","ElMessageBox","API","data","orders","loading","processingOrders","statusOptions","statusFilter","pagination","total","current_page","per_page","watch","newValue","fetchOrders","mounted","methods","response","get","headers","localStorage","getItem","params","page","limit","status","undefined","map","order","parseInt","error","console","updateOrderStatus","orderId","newStatus","push","put","find","o","id","success","index","indexOf","splice","deleteOrder","confirm","confirmButtonText","cancelButtonText","type","delete","formatDate","dateString","date","Date","toLocaleDateString","year","month","day","time","toLocaleTimeString","hour","minute","getStatusType","isProcessing","includes","handlePageChange"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\OrderManagement.vue"],"sourcesContent":["<template>\n  <div class=\"order-management\">\n    <div class=\"order-header\">\n      <h2>订单管理</h2>\n      <div class=\"filters\">\n        <el-select v-model=\"statusFilter\" placeholder=\"订单状态\" clearable>\n          <el-option v-for=\"(label, value) in statusOptions\" :key=\"value\" :label=\"label\" :value=\"value\" />\n        </el-select>\n      </div>\n    </div>\n\n    <div class=\"orders-container\" v-loading=\"loading\">\n      <div v-for=\"order in orders\" :key=\"order.id\" class=\"order-card\">\n        <div class=\"order-header\">\n          <div class=\"order-info\">\n            <span class=\"order-id\">订单 #{{ order.id }}</span>\n            <el-tag :type=\"getStatusType(order.status)\" size=\"small\">\n              {{ statusOptions[order.status] }}\n            </el-tag>\n          </div>\n          <div class=\"order-date\">{{ formatDate(order.created_at) }}</div>\n        </div>\n\n        <div class=\"user-info\">\n          <div class=\"info-item\">\n            <span class=\"label\">用户名:</span>\n            <span class=\"value\">{{ order.username }}</span>\n          </div>\n          <div class=\"info-item\">\n            <span class=\"label\">邮箱:</span>\n            <span class=\"value\">{{ order.email }}</span>\n          </div>\n        </div>\n\n        <div class=\"order-items\">\n          <div v-for=\"item in order.items\" :key=\"item.menu_item_id\" class=\"order-item\">\n            <div class=\"item-info\">\n              <span class=\"item-name\">{{ item.name }}</span>\n              <div class=\"item-details\">\n                <span class=\"item-quantity\">数量: {{ item.quantity }}</span>\n                <span class=\"item-price\">单价: ¥{{ item.price }}</span>\n                <span class=\"item-total\">小计: ¥{{ (item.quantity * item.price).toFixed(2) }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"order-footer\">\n          <div class=\"total-price\">\n            总计: <span class=\"price\">¥{{ order.total_price }}</span>\n          </div>\n          <div class=\"actions\">\n            <el-select \n              v-model=\"order.status\" \n              size=\"small\" \n              @change=\"(value) => updateOrderStatus(order.id, value)\"\n              :disabled=\"isProcessing(order.id)\"\n              placeholder=\"更改状态\"\n            >\n              <el-option \n                v-for=\"(label, value) in statusOptions\" \n                :key=\"value\" \n                :label=\"label\" \n                :value=\"parseInt(value)\"\n              />\n            </el-select>\n            <el-button \n              type=\"danger\" \n              size=\"small\" \n              @click=\"deleteOrder(order.id)\"\n              :disabled=\"isProcessing(order.id)\"\n            >\n              删除订单\n            </el-button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"pagination-container\">\n      <el-pagination\n        v-if=\"pagination.total > 0\"\n        :current-page=\"pagination.current_page\"\n        :page-size=\"pagination.per_page\"\n        :total=\"pagination.total\"\n        @current-change=\"handlePageChange\"\n        layout=\"prev, pager, next\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage, ElMessageBox } from 'element-plus';\n\nconst API = 'http://localhost:3000/api/auth';  // 直接定义 API 地址\n\nexport default {\n  data() {\n    return {\n      orders: [],\n      loading: false,\n      processingOrders: [],\n      statusOptions: {\n        0: '待处理',\n        1: '处理中',\n        2: '已完成',\n        3: '已取消'\n      },\n      statusFilter: '',\n      pagination: {\n        total: 0,\n        current_page: 1,\n        per_page: 10\n      }\n    };\n  },\n  watch: {\n    statusFilter(newValue) {\n      this.fetchOrders();\n    }\n  },\n  mounted() {\n    this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${API}/canteen/orders`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          },\n          params: {\n            page: this.pagination.current_page,\n            limit: this.pagination.per_page,\n            status: this.statusFilter || undefined\n          }\n        });\n        \n        // 处理订单数据，确保状态是数字类型\n        this.orders = response.data.orders.map(order => ({\n          ...order,\n          status: parseInt(order.status)\n        }));\n        \n        // 更新分页信息\n        if (response.data.pagination) {\n          this.pagination = response.data.pagination;\n        }\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        ElMessage.error('获取订单列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    async updateOrderStatus(orderId, newStatus) {\n      try {\n        this.processingOrders.push(orderId);\n        await axios.put(`${API}/canteen/orders/${orderId}`, \n          { status: newStatus },\n          {\n            headers: {\n              'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n            }\n          }\n        );\n        \n        // 更新本地订单状态\n        const order = this.orders.find(o => o.id === orderId);\n        if (order) {\n          order.status = newStatus;\n        }\n        \n        ElMessage.success('订单状态更新成功');\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        ElMessage.error('更新订单状态失败');\n        // 如果更新失败，重新获取订单列表\n        await this.fetchOrders();\n      } finally {\n        const index = this.processingOrders.indexOf(orderId);\n        if (index > -1) {\n          this.processingOrders.splice(index, 1);\n        }\n      }\n    },\n\n    async deleteOrder(orderId) {\n      try {\n        this.processingOrders.push(orderId);\n        await ElMessageBox.confirm(\n          '确定要删除这个订单吗？此操作不可恢复。',\n          '警告',\n          {\n            confirmButtonText: '确定',\n            cancelButtonText: '取消',\n            type: 'warning',\n          }\n        );\n\n        await axios.delete(`${API}/canteen/orders/${orderId}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        \n        await this.fetchOrders();\n        ElMessage.success('订单删除成功');\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error('删除订单失败:', error);\n          ElMessage.error('删除订单失败');\n        }\n      } finally {\n        const index = this.processingOrders.indexOf(orderId);\n        if (index > -1) {\n          this.processingOrders.splice(index, 1);\n        }\n      }\n    },\n\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return {\n        date: date.toLocaleDateString('zh-CN', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit'\n        }),\n        time: date.toLocaleTimeString('zh-CN', {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      };\n    },\n\n    getStatusType(status) {\n      switch (status) {\n        case 0:\n          return 'danger';\n        case 1:\n          return 'warning';\n        case 2:\n          return 'success';\n        default:\n          return 'info';\n      }\n    },\n\n    isProcessing(orderId) {\n      // 检查是否有正在处理的订单\n      return this.processingOrders.includes(orderId);\n    },\n\n    handlePageChange(page) {\n      this.pagination.current_page = page;\n      this.fetchOrders();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.order-management {\n  padding: 20px;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.order-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.orders-container {\n  display: grid;\n  gap: 20px;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n}\n\n.order-card {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.order-card .order-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.order-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.order-id {\n  font-weight: bold;\n  color: #303133;\n}\n\n.order-date {\n  color: #909399;\n  font-size: 0.9em;\n}\n\n.user-info {\n  background-color: #f8f9fa;\n  padding: 12px;\n  border-radius: 6px;\n  margin-bottom: 8px;\n}\n\n.info-item {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 4px;\n}\n\n.info-item:last-child {\n  margin-bottom: 0;\n}\n\n.label {\n  color: #606266;\n  min-width: 60px;\n}\n\n.value {\n  color: #303133;\n  word-break: break-all;\n}\n\n.order-items {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.order-item {\n  background-color: #f8f9fa;\n  border-radius: 6px;\n  padding: 12px;\n}\n\n.item-info {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.item-name {\n  font-weight: bold;\n  color: #303133;\n}\n\n.item-details {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  font-size: 0.9em;\n  color: #606266;\n}\n\n.item-total {\n  color: #409EFF;\n  font-weight: 500;\n}\n\n.order-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 8px;\n  flex-wrap: wrap;\n  gap: 12px;\n}\n\n.total-price {\n  font-size: 1.1em;\n  color: #606266;\n}\n\n.total-price .price {\n  color: #409EFF;\n  font-weight: bold;\n}\n\n.actions {\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n\n.pagination-container {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n}\n\n@media (max-width: 768px) {\n  .order-management {\n    padding: 10px;\n  }\n\n  .orders-container {\n    grid-template-columns: 1fr;\n  }\n\n  .order-card {\n    padding: 12px;\n  }\n\n  .actions {\n    width: 100%;\n    justify-content: space-between;\n  }\n\n  .el-select {\n    flex: 1;\n    margin-right: 8px;\n  }\n\n  .info-item {\n    flex-direction: column;\n    gap: 4px;\n  }\n\n  .label {\n    min-width: auto;\n  }\n\n  .order-header {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  .filters {\n    width: 100%;\n  }\n\n  .el-select {\n    width: 100%;\n  }\n}\n</style>"],"mappings":";AA6FA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,SAAS,EAAEC,YAAW,QAAS,cAAc;AAEtD,MAAMC,GAAE,GAAI,gCAAgC,EAAG;;AAE/C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,KAAK;MACdC,gBAAgB,EAAE,EAAE;MACpBC,aAAa,EAAE;QACb,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE;MACL,CAAC;MACDC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE;QACVC,KAAK,EAAE,CAAC;QACRC,YAAY,EAAE,CAAC;QACfC,QAAQ,EAAE;MACZ;IACF,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLL,YAAYA,CAACM,QAAQ,EAAE;MACrB,IAAI,CAACC,WAAW,CAAC,CAAC;IACpB;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACD,WAAW,CAAC,CAAC,EAAE;EACtB,CAAC;EACDE,OAAO,EAAE;IACP,MAAMF,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,IAAI,CAACV,OAAM,GAAI,IAAI;QACnB,MAAMa,QAAO,GAAI,MAAMnB,KAAK,CAACoB,GAAG,CAAC,GAAGjB,GAAG,iBAAiB,EAAE;UACxDkB,OAAO,EAAE;YACP,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;UAC9D,CAAC;UACDC,MAAM,EAAE;YACNC,IAAI,EAAE,IAAI,CAACf,UAAU,CAACE,YAAY;YAClCc,KAAK,EAAE,IAAI,CAAChB,UAAU,CAACG,QAAQ;YAC/Bc,MAAM,EAAE,IAAI,CAAClB,YAAW,IAAKmB;UAC/B;QACF,CAAC,CAAC;;QAEF;QACA,IAAI,CAACvB,MAAK,GAAIc,QAAQ,CAACf,IAAI,CAACC,MAAM,CAACwB,GAAG,CAACC,KAAI,KAAM;UAC/C,GAAGA,KAAK;UACRH,MAAM,EAAEI,QAAQ,CAACD,KAAK,CAACH,MAAM;QAC/B,CAAC,CAAC,CAAC;;QAEH;QACA,IAAIR,QAAQ,CAACf,IAAI,CAACM,UAAU,EAAE;UAC5B,IAAI,CAACA,UAAS,GAAIS,QAAQ,CAACf,IAAI,CAACM,UAAU;QAC5C;MACF,EAAE,OAAOsB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjC/B,SAAS,CAAC+B,KAAK,CAAC,UAAU,CAAC;MAC7B,UAAU;QACR,IAAI,CAAC1B,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED,MAAM4B,iBAAiBA,CAACC,OAAO,EAAEC,SAAS,EAAE;MAC1C,IAAI;QACF,IAAI,CAAC7B,gBAAgB,CAAC8B,IAAI,CAACF,OAAO,CAAC;QACnC,MAAMnC,KAAK,CAACsC,GAAG,CAAC,GAAGnC,GAAG,mBAAmBgC,OAAO,EAAE,EAChD;UAAER,MAAM,EAAES;QAAU,CAAC,EACrB;UACEf,OAAO,EAAE;YACP,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;UAC9D;QACF,CACF,CAAC;;QAED;QACA,MAAMO,KAAI,GAAI,IAAI,CAACzB,MAAM,CAACkC,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAMN,OAAO,CAAC;QACrD,IAAIL,KAAK,EAAE;UACTA,KAAK,CAACH,MAAK,GAAIS,SAAS;QAC1B;QAEAnC,SAAS,CAACyC,OAAO,CAAC,UAAU,CAAC;MAC/B,EAAE,OAAOV,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjC/B,SAAS,CAAC+B,KAAK,CAAC,UAAU,CAAC;QAC3B;QACA,MAAM,IAAI,CAAChB,WAAW,CAAC,CAAC;MAC1B,UAAU;QACR,MAAM2B,KAAI,GAAI,IAAI,CAACpC,gBAAgB,CAACqC,OAAO,CAACT,OAAO,CAAC;QACpD,IAAIQ,KAAI,GAAI,CAAC,CAAC,EAAE;UACd,IAAI,CAACpC,gBAAgB,CAACsC,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;QACxC;MACF;IACF,CAAC;IAED,MAAMG,WAAWA,CAACX,OAAO,EAAE;MACzB,IAAI;QACF,IAAI,CAAC5B,gBAAgB,CAAC8B,IAAI,CAACF,OAAO,CAAC;QACnC,MAAMjC,YAAY,CAAC6C,OAAO,CACxB,qBAAqB,EACrB,IAAI,EACJ;UACEC,iBAAiB,EAAE,IAAI;UACvBC,gBAAgB,EAAE,IAAI;UACtBC,IAAI,EAAE;QACR,CACF,CAAC;QAED,MAAMlD,KAAK,CAACmD,MAAM,CAAC,GAAGhD,GAAG,mBAAmBgC,OAAO,EAAE,EAAE;UACrDd,OAAO,EAAE;YACP,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;UAC9D;QACF,CAAC,CAAC;QAEF,MAAM,IAAI,CAACP,WAAW,CAAC,CAAC;QACxBf,SAAS,CAACyC,OAAO,CAAC,QAAQ,CAAC;MAC7B,EAAE,OAAOV,KAAK,EAAE;QACd,IAAIA,KAAI,KAAM,QAAQ,EAAE;UACtBC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;UAC/B/B,SAAS,CAAC+B,KAAK,CAAC,QAAQ,CAAC;QAC3B;MACF,UAAU;QACR,MAAMW,KAAI,GAAI,IAAI,CAACpC,gBAAgB,CAACqC,OAAO,CAACT,OAAO,CAAC;QACpD,IAAIQ,KAAI,GAAI,CAAC,CAAC,EAAE;UACd,IAAI,CAACpC,gBAAgB,CAACsC,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;QACxC;MACF;IACF,CAAC;IAEDS,UAAUA,CAACC,UAAU,EAAE;MACrB,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,UAAU,CAAC;MACjC,OAAO;QACLC,IAAI,EAAEA,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;UACrCC,IAAI,EAAE,SAAS;UACfC,KAAK,EAAE,SAAS;UAChBC,GAAG,EAAE;QACP,CAAC,CAAC;QACFC,IAAI,EAAEN,IAAI,CAACO,kBAAkB,CAAC,OAAO,EAAE;UACrCC,IAAI,EAAE,SAAS;UACfC,MAAM,EAAE;QACV,CAAC;MACH,CAAC;IACH,CAAC;IAEDC,aAAaA,CAACrC,MAAM,EAAE;MACpB,QAAQA,MAAM;QACZ,KAAK,CAAC;UACJ,OAAO,QAAQ;QACjB,KAAK,CAAC;UACJ,OAAO,SAAS;QAClB,KAAK,CAAC;UACJ,OAAO,SAAS;QAClB;UACE,OAAO,MAAM;MACjB;IACF,CAAC;IAEDsC,YAAYA,CAAC9B,OAAO,EAAE;MACpB;MACA,OAAO,IAAI,CAAC5B,gBAAgB,CAAC2D,QAAQ,CAAC/B,OAAO,CAAC;IAChD,CAAC;IAEDgC,gBAAgBA,CAAC1C,IAAI,EAAE;MACrB,IAAI,CAACf,UAAU,CAACE,YAAW,GAAIa,IAAI;MACnC,IAAI,CAACT,WAAW,CAAC,CAAC;IACpB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}