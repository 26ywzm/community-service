{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport { adminAuth } from '@/mixins/adminAuth';\nconst API = process.env.VUE_APP_BASE_URL;\nexport default {\n  name: 'AdminManageVotes',\n  mixins: [adminAuth],\n  data() {\n    return {\n      votes: [],\n      loading: false,\n      showCreateForm: false,\n      newVote: {\n        title: '',\n        description: '',\n        options: ['', '']\n      }\n    };\n  },\n  mounted() {\n    if (this.checkAdminAuth()) {\n      this.fetchVotes();\n    }\n  },\n  methods: {\n    async fetchVotes() {\n      this.loading = true;\n      try {\n        console.log('开始获取投票列表');\n        const response = await axios.get(`${API}/api/canteen/votes`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        console.log('获取到的投票数据:', response.data);\n\n        // 确保每个投票都有选项数组\n        this.votes = response.data.map(vote => ({\n          ...vote,\n          options: Array.isArray(vote.options) ? vote.options : []\n        }));\n        console.log('处理后的投票数据:', this.votes);\n      } catch (error) {\n        console.error('获取投票失败:', error);\n        console.error('错误详情:', error.response?.data || error.message);\n        ElMessage.error('获取投票列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async deleteVote(voteId) {\n      if (!confirm('确定要删除这个投票吗？此操作不可恢复，所有投票记录都将被删除。')) {\n        return;\n      }\n      try {\n        console.log(`开始删除投票 ID: ${voteId}`);\n        await axios.delete(`${API}/api/canteen/votes/${voteId}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        ElMessage.success('投票删除成功');\n        // 从列表中移除已删除的投票\n        this.votes = this.votes.filter(vote => vote.id !== voteId);\n      } catch (error) {\n        console.error('删除投票失败:', error);\n        console.error('错误详情:', error.response?.data || error.message);\n        if (error.response?.status === 401) {\n          ElMessage.error('权限不足，请确保您已登录并具有管理员权限');\n        } else if (error.response?.data?.message) {\n          ElMessage.error(error.response.data.message);\n        } else {\n          ElMessage.error('删除投票失败，请稍后重试');\n        }\n      }\n    },\n    addOption() {\n      this.newVote.options.push('');\n    },\n    removeOption(index) {\n      if (this.newVote.options.length > 2) {\n        this.newVote.options.splice(index, 1);\n      } else {\n        ElMessage.warning('至少需要两个选项');\n      }\n    },\n    async submitNewVote() {\n      if (!this.validateForm()) {\n        return;\n      }\n      try {\n        console.log('准备提交的投票数据:', this.newVote);\n        const response = await axios.post(`${API}/api/canteen/votes`, {\n          ...this.newVote,\n          options: this.newVote.options.filter(opt => opt.trim()) // 过滤空选项\n        }, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        console.log('创建投票响应:', response.data);\n        ElMessage.success('投票创建成功');\n        this.showCreateForm = false;\n        this.resetForm();\n        this.fetchVotes();\n      } catch (error) {\n        console.error('创建投票失败:', error);\n        console.error('错误详情:', error.response?.data || error.message);\n        ElMessage.error(error.response?.data?.message || '创建投票失败');\n      }\n    },\n    validateForm() {\n      if (!this.newVote.title.trim()) {\n        ElMessage.warning('请输入投票标题');\n        return false;\n      }\n      if (!this.newVote.description.trim()) {\n        ElMessage.warning('请输入投票描述');\n        return false;\n      }\n      if (this.newVote.options.some(option => !option.trim())) {\n        ElMessage.warning('请填写所有选项');\n        return false;\n      }\n      return true;\n    },\n    resetForm() {\n      this.newVote = {\n        title: '',\n        description: '',\n        options: ['', '']\n      };\n    },\n    cancelCreate() {\n      this.showCreateForm = false;\n      this.resetForm();\n    },\n    getPercentage(count, total) {\n      if (!total) return 0;\n      return count / total * 100;\n    },\n    getBarColor(index) {\n      // 预定义一些好看的颜色\n      const colors = ['#409EFF',\n      // 蓝色\n      '#67C23A',\n      // 绿色\n      '#E6A23C',\n      // 橙色\n      '#F56C6C',\n      // 红色\n      '#909399' // 灰色\n      ];\n      return colors[index % colors.length];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}