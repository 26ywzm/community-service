{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios'; // 导入 axios\nconst API = process.env.VUE_APP_API_URL;\nexport default {\n  data() {\n    return {\n      users: [],\n      // 所有用户列表\n      selectedUser: null,\n      // 当前选中的用户\n      chatMessages: [],\n      // 当前用户的留言记录\n      selectedMessage: null,\n      // 当前选中的留言\n      adminReply: '',\n      // 管理员的回复内容\n      isSending: false,\n      // 是否正在发送消息\n      message: {\n        show: false,\n        content: '',\n        type: ''\n      } // 消息提示\n    };\n  },\n  methods: {\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        const response = await axios.get(`${API}/users`, {\n          headers\n        });\n        this.users = response.data;\n      } catch (error) {\n        alert('获取用户列表失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 选择用户，查看留言记录\n    selectUser(user) {\n      this.selectedUser = this.selectedUser?.id === user.id ? null : user;\n      this.selectedMessage = null; // 清除选中的消息\n      this.adminReply = ''; // 清空回复框\n      this.fetchUserMessages(this.selectedUser?.id); // 获取该用户的留言记录\n    },\n    // 获取用户留言记录\n    async fetchUserMessages(userId) {\n      if (!userId) {\n        console.log('未选择用户');\n        return;\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        const response = await axios.get(`${API}/feedback/${userId}`, {\n          headers\n        });\n        this.chatMessages = response.data.map(msg => ({\n          ...msg,\n          isAdmin: msg.admin_reply !== null\n        }));\n      } catch (error) {\n        alert('获取留言记录失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 选择要回复的留言\n    selectMessage(message) {\n      this.selectedMessage = message;\n      this.adminReply = ''; // 清空回复内容\n    },\n    // 发送消息\n    async sendMessage() {\n      if (!this.adminReply.trim()) {\n        alert('请输入回复内容');\n        return;\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        if (this.selectedMessage) {\n          // 回复特定留言\n          await axios.put(`${API}/feedback/${this.selectedMessage.id}/reply`, {\n            admin_reply: this.adminReply\n          }, {\n            headers\n          });\n        } else if (this.selectedUser) {\n          // 发送新消息\n          await axios.post(`${API}/feedback/admin-message`, {\n            user_id: this.selectedUser.id,\n            message: this.adminReply\n          }, {\n            headers\n          });\n        }\n        alert('消息发送成功');\n        await this.fetchUserMessages(this.selectedUser.id);\n        this.adminReply = '';\n        this.selectedMessage = null;\n      } catch (error) {\n        alert('发送消息失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 取消回复\n    cancelReply() {\n      this.selectedMessage = null;\n      this.adminReply = '';\n    },\n    // 删除留言\n    async deleteMessage(message) {\n      if (!confirm('确定要删除这条留言吗？')) return;\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        await axios.delete(`${API}/feedback/${message.id}`, {\n          headers\n        });\n        alert('留言已删除');\n        await this.fetchUserMessages(this.selectedUser.id);\n      } catch (error) {\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 删除整个用户的对话\n    async deleteUserConversation() {\n      if (!confirm('确定要删除与该用户的所有留言吗？')) {\n        return;\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        await axios.delete(`${API}/feedback`, {\n          data: {\n            user_id: this.selectedUser.id\n          },\n          headers\n        });\n        alert('该用户的留言已删除');\n        this.selectedUser = null; // 清空选中的用户\n        this.chatMessages = []; // 清空聊天记录\n      } catch (error) {\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 显示消息提示\n    showMessage(content, type) {\n      this.message.content = content;\n      this.message.type = type;\n      this.message.show = true;\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    }\n  },\n  mounted() {\n    // 检查用户角色\n    const userRole = localStorage.getItem('userRole');\n    if (userRole !== 'admin' && userRole !== 'super_admin') {\n      this.$router.push('/');\n      return;\n    }\n    // 只获取用户列表，不自动获取留言\n    this.fetchUsers();\n    this.chatMessages = []; // 初始化为空数组\n  }\n};","map":{"version":3,"names":["axios","API","process","env","VUE_APP_API_URL","data","users","selectedUser","chatMessages","selectedMessage","adminReply","isSending","message","show","content","type","methods","fetchUsers","token","localStorage","getItem","userRole","$router","push","headers","response","get","error","alert","selectUser","user","id","fetchUserMessages","userId","console","log","map","msg","isAdmin","admin_reply","selectMessage","sendMessage","trim","put","post","user_id","cancelReply","deleteMessage","confirm","delete","deleteUserConversation","showMessage","setTimeout","formatTimestamp","timestamp","date","Date","toLocaleString","mounted"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\ManageFeedback.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 用户列表 -->\n    <div class=\"user-list\">\n      <h3>用户列表</h3>\n      <ul>\n        <li v-for=\"user in users\" :key=\"user.id\" @click=\"selectUser(user)\"\n            :class=\"{ active: selectedUser && selectedUser.id === user.id }\">\n          {{ user.username }}\n        </li>\n      </ul>\n    </div>\n\n    <!-- 留言记录 -->\n    <div class=\"chat-box\">\n      <h3>{{ selectedUser ? `与 ${selectedUser.username} 的留言记录` : '所有用户留言记录' }}</h3>\n      <div class=\"messages\">\n        <div v-for=\"message in chatMessages\" :key=\"message.id\" \n             :class=\"['message', message.isAdmin ? 'admin' : 'user']\">\n          <div class=\"message-header\">\n            <span class=\"username\">{{ message.username }}</span>\n            <div class=\"message-actions\">\n              <button class=\"action-btn delete\" @click=\"deleteMessage(message)\">\n                删除\n              </button>\n              <button v-if=\"!message.admin_reply\" \n                      class=\"action-btn reply\" \n                      @click=\"selectMessage(message)\">\n                回复\n              </button>\n            </div>\n          </div>\n          <div class=\"message-content\">{{ message.message }}</div>\n          <div class=\"message-reply\" v-if=\"message.admin_reply\">\n            <strong>管理员回复：</strong> {{ message.admin_reply }}\n          </div>\n          <div class=\"timestamp\">{{ formatTimestamp(message.created_at) }}</div>\n        </div>\n      </div>\n\n      <!-- 管理员回复区域 -->\n      <div class=\"reply-area\">\n        <div v-if=\"selectedMessage\" class=\"selected-message\">\n          正在回复: {{ selectedMessage.message }}\n          <button @click=\"cancelReply\" class=\"cancel-btn small\">取消回复</button>\n        </div>\n        <div class=\"input-area\">\n          <textarea v-model=\"adminReply\" \n                    :placeholder=\"selectedMessage ? '输入回复...' : (selectedUser ? '发送新消息给该用户...' : '请先选择一个用户')\" \n                    rows=\"3\"\n                    :disabled=\"!selectedUser && !selectedMessage\"></textarea>\n          <div class=\"button-group\">\n            <button @click=\"sendMessage\" \n                    :disabled=\"isSending || !adminReply.trim() || (!selectedUser && !selectedMessage)\">\n              {{ isSending ? '发送中...' : '发送' }}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <!-- 删除对话按钮 -->\n      <div v-if=\"selectedUser\" class=\"delete-conversation-btn\">\n        <button @click=\"deleteUserConversation\">\n          删除该用户的所有留言\n        </button>\n      </div>\n    </div>\n\n    <!-- 提示消息 -->\n    <div v-if=\"message.show\" :class=\"['message-toast', message.type]\">\n      {{ message.content }}\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';  // 导入 axios\nconst API = process.env.VUE_APP_API_URL;\nexport default {\n  data() {\n    return {\n      users: [],  // 所有用户列表\n      selectedUser: null,  // 当前选中的用户\n      chatMessages: [],  // 当前用户的留言记录\n      selectedMessage: null,  // 当前选中的留言\n      adminReply: '',  // 管理员的回复内容\n      isSending: false,  // 是否正在发送消息\n      message: { show: false, content: '', type: '' }  // 消息提示\n    };\n  },\n  methods: {\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        const response = await axios.get(`${API}/users`, { headers });\n        this.users = response.data;\n      } catch (error) {\n        alert('获取用户列表失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 选择用户，查看留言记录\n    selectUser(user) {\n      this.selectedUser = this.selectedUser?.id === user.id ? null : user;\n      this.selectedMessage = null; // 清除选中的消息\n      this.adminReply = ''; // 清空回复框\n      this.fetchUserMessages(this.selectedUser?.id);  // 获取该用户的留言记录\n    },\n\n    // 获取用户留言记录\n    async fetchUserMessages(userId) {\n      if (!userId) {\n        console.log('未选择用户');\n        return;\n      }\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        const response = await axios.get(`${API}/feedback/${userId}`, { headers });\n        this.chatMessages = response.data.map(msg => ({\n          ...msg,\n          isAdmin: msg.admin_reply !== null\n        }));\n      } catch (error) {\n        alert('获取留言记录失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 选择要回复的留言\n    selectMessage(message) {\n      this.selectedMessage = message;\n      this.adminReply = '';  // 清空回复内容\n    },\n\n    // 发送消息\n    async sendMessage() {\n      if (!this.adminReply.trim()) {\n        alert('请输入回复内容');\n        return;\n      }\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        \n        if (this.selectedMessage) {\n          // 回复特定留言\n          await axios.put(`${API}/feedback/${this.selectedMessage.id}/reply`, \n            { admin_reply: this.adminReply },\n            { headers }\n          );\n        } else if (this.selectedUser) {\n          // 发送新消息\n          await axios.post(`${API}/feedback/admin-message`, {\n            user_id: this.selectedUser.id,\n            message: this.adminReply\n          }, { headers });\n        }\n\n        alert('消息发送成功');\n        await this.fetchUserMessages(this.selectedUser.id);\n        this.adminReply = '';\n        this.selectedMessage = null;\n      } catch (error) {\n        alert('发送消息失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 取消回复\n    cancelReply() {\n      this.selectedMessage = null;\n      this.adminReply = '';\n    },\n\n    // 删除留言\n    async deleteMessage(message) {\n      if (!confirm('确定要删除这条留言吗？')) return;\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        await axios.delete(`${API}/feedback/${message.id}`, { headers });\n        alert('留言已删除');\n        await this.fetchUserMessages(this.selectedUser.id);\n      } catch (error) {\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 删除整个用户的对话\n    async deleteUserConversation() {\n      if (!confirm('确定要删除与该用户的所有留言吗？')) {\n        return;\n      }\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        await axios.delete(`${API}/feedback`, {\n          data: { user_id: this.selectedUser.id },\n          headers\n        });\n\n        alert('该用户的留言已删除');\n        this.selectedUser = null;  // 清空选中的用户\n        this.chatMessages = [];  // 清空聊天记录\n      } catch (error) {\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 显示消息提示\n    showMessage(content, type) {\n      this.message.content = content;\n      this.message.type = type;\n      this.message.show = true;\n\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    }\n  },\n\n  mounted() {\n    // 检查用户角色\n    const userRole = localStorage.getItem('userRole');\n    if (userRole !== 'admin' && userRole !== 'super_admin') {\n      this.$router.push('/');\n      return;\n    }\n    // 只获取用户列表，不自动获取留言\n    this.fetchUsers();\n    this.chatMessages = [];  // 初始化为空数组\n  }\n};\n</script>\n\n\n<style scoped>\n/* 容器布局 */\n.chat-container {\n  display: flex;\n  gap: 20px;\n  padding: 20px;\n}\n\n.user-list {\n  width: 25%;\n}\n\n.chat-box {\n  width: 70%;\n}\n\n/* 用户列表 */\n.user-list ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.user-list li {\n  padding: 10px;\n  cursor: pointer;\n}\n\n.user-list li.active {\n  background-color: #f0f0f0;\n}\n\n/* 留言记录 */\n.messages {\n  margin-bottom: 20px;\n}\n\n.message {\n  padding: 12px;\n  margin-bottom: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.message.admin {\n  background-color: #e0f7fa;\n}\n\n.message.user {\n  background-color: #fff3e0;\n}\n\n.message-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  font-weight: bold;\n}\n\n.message-actions button {\n  margin-left: 10px;\n}\n\n.message-content {\n  font-size: 14px;\n}\n\n.message-reply {\n  margin-top: 10px;\n  font-size: 14px;\n  color: #00796b;\n}\n\n.timestamp {\n  font-size: 12px;\n  color: gray;\n}\n\n/* 回复区域 */\n.reply-area {\n  margin-top: 20px;\n}\n\n.input-area {\n  display: flex;\n  gap: 10px;\n}\n\ntextarea {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.button-group {\n  margin-top: 10px;\n  text-align: right;\n}\n\n/* 删除按钮 */\n.delete-conversation-btn {\n  margin-top: 20px;\n  text-align: right;\n}\n\n.delete-conversation-btn button {\n  padding: 10px 20px;\n  background-color: #f44336;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.delete-conversation-btn button:hover {\n  background-color: #d32f2f;\n}\n\n/* 消息提示 */\n.message-toast {\n  position: fixed;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #333;\n  color: white;\n  padding: 10px;\n  border-radius: 4px;\n  font-size: 14px;\n  display: inline-block;\n}\n\n.message-toast.success {\n  background-color: #4caf50;\n}\n\n.message-toast.error {\n  background-color: #f44336;\n}\n\n/* 小屏幕适配 */\n@media (max-width: 768px) {\n  .chat-container {\n    flex-direction: column;\n  }\n\n  .user-list {\n    width: 100%;\n    margin-bottom: 20px;\n  }\n\n  .chat-box {\n    width: 100%;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}