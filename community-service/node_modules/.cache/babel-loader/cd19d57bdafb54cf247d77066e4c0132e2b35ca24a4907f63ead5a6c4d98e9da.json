{"ast":null,"code":"import { isObject, isPromise, isFunction, getRootScrollTop, setRootScrollTop } from \"../utils/index.mjs\";\nfunction isEmptyValue(value) {\n  if (Array.isArray(value)) {\n    return !value.length;\n  }\n  if (value === 0) {\n    return false;\n  }\n  return !value;\n}\nfunction runSyncRule(value, rule) {\n  if (isEmptyValue(value)) {\n    if (rule.required) {\n      return false;\n    }\n    if (rule.validateEmpty === false) {\n      return true;\n    }\n  }\n  if (rule.pattern && !rule.pattern.test(String(value))) {\n    return false;\n  }\n  return true;\n}\nfunction runRuleValidator(value, rule) {\n  return new Promise(resolve => {\n    const returnVal = rule.validator(value, rule);\n    if (isPromise(returnVal)) {\n      returnVal.then(resolve);\n      return;\n    }\n    resolve(returnVal);\n  });\n}\nfunction getRuleMessage(value, rule) {\n  const {\n    message\n  } = rule;\n  if (isFunction(message)) {\n    return message(value, rule);\n  }\n  return message || \"\";\n}\nfunction startComposing({\n  target\n}) {\n  target.composing = true;\n}\nfunction endComposing({\n  target\n}) {\n  if (target.composing) {\n    target.composing = false;\n    target.dispatchEvent(new Event(\"input\"));\n  }\n}\nfunction resizeTextarea(input, autosize) {\n  const scrollTop = getRootScrollTop();\n  input.style.height = \"auto\";\n  let height = input.scrollHeight;\n  if (isObject(autosize)) {\n    const {\n      maxHeight,\n      minHeight\n    } = autosize;\n    if (maxHeight !== void 0) {\n      height = Math.min(height, maxHeight);\n    }\n    if (minHeight !== void 0) {\n      height = Math.max(height, minHeight);\n    }\n  }\n  if (height) {\n    input.style.height = `${height}px`;\n    setRootScrollTop(scrollTop);\n  }\n}\nfunction mapInputType(type, inputmode) {\n  if (type === \"number\") {\n    type = \"text\";\n    inputmode != null ? inputmode : inputmode = \"decimal\";\n  }\n  if (type === \"digit\") {\n    type = \"tel\";\n    inputmode != null ? inputmode : inputmode = \"numeric\";\n  }\n  return {\n    type,\n    inputmode\n  };\n}\nfunction getStringLength(str) {\n  return [...str].length;\n}\nfunction cutString(str, maxlength) {\n  return [...str].slice(0, maxlength).join(\"\");\n}\nexport { cutString, endComposing, getRuleMessage, getStringLength, isEmptyValue, mapInputType, resizeTextarea, runRuleValidator, runSyncRule, startComposing };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}