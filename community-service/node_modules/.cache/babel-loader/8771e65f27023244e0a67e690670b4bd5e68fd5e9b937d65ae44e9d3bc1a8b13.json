{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nconst API = 'http://localhost:3000/api/auth'; // 直接定义 API 地址\n\nexport default {\n  data() {\n    return {\n      orders: [],\n      // 存储所有订单信息\n      showDialog: false,\n      dialogMessage: '',\n      lastActionTime: 0,\n      // 记录上一次操作的时间戳\n      loading: false,\n      // 状态显示文本\n      statusText: {\n        'pending': '待处理',\n        'confirmed': '处理中',\n        'completed': '已完成',\n        'cancelled': '已取消'\n      },\n      // 状态映射\n      statusMap: {\n        'pending': 'pending',\n        'confirmed': 'confirmed',\n        'completed': 'completed',\n        'cancelled': 'cancelled'\n      }\n    };\n  },\n  mounted() {\n    this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${API}/canteen/orders`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        console.log('获取到的订单数据:', response.data);\n\n        // 处理订单数据\n        this.orders = response.data.orders.map(order => ({\n          ...order,\n          lastActionTime: 0,\n          items: order.items || [] // 确保 items 存在\n        }));\n\n        // 更新分页信息\n        if (response.data.pagination) {\n          this.pagination = response.data.pagination;\n        }\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        ElMessage.error('获取订单列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async handleButtonClick(order) {\n      if (!this.canPerformAction(order)) {\n        ElMessage.warning('操作太频繁，请稍后再试');\n        return;\n      }\n      try {\n        let newStatus;\n        const currentStatus = order.status;\n        switch (currentStatus) {\n          case 'pending':\n            newStatus = 'confirmed';\n            break;\n          case 'confirmed':\n            newStatus = 'completed';\n            break;\n          default:\n            ElMessage.error(`当前状态 ${this.statusText[order.status]} 无法进行操作`);\n            return;\n        }\n        await this.updateOrderStatus(order, newStatus);\n        // 操作成功后刷新订单列表\n        await this.fetchOrders();\n      } catch (error) {\n        console.error('操作失败:', error);\n        ElMessage.error('操作失败，请重试');\n      }\n    },\n    canPerformAction(order) {\n      const now = Date.now();\n      // 如果是第一次操作，或者距离上次操作超过3秒\n      if (!order.lastActionTime || now - order.lastActionTime > 3000) {\n        return true;\n      }\n      return false;\n    },\n    async updateOrderStatus(order, status) {\n      try {\n        console.log('Updating order status:', {\n          orderId: order.id,\n          status: status\n        });\n        await axios.put(`${API}/canteen/orders/${order.id}`, {\n          status\n        }, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        ElMessage.success(`订单状态已更新为${this.statusText[status]}`);\n        order.lastActionTime = Date.now(); // 更新最后操作时间\n        order.status = status; // 更新本地状态\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        ElMessage.error(error.response?.data?.message || '更新订单状态失败，请重试');\n        throw error;\n      }\n    },\n    async handleDeleteOrder(order) {\n      try {\n        if (!confirm('确定要删除这个订单吗？此操作不可撤销。')) {\n          return;\n        }\n        await axios.delete(`${API}/canteen/orders/${order.id}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        ElMessage.success('订单已删除');\n        // 从列表中移除该订单\n        this.orders = this.orders.filter(o => o.id !== order.id);\n      } catch (error) {\n        console.error('删除订单失败:', error);\n        ElMessage.error(error.response?.data?.message || '删除订单失败，请重试');\n      }\n    },\n    closeDialog() {\n      this.showDialog = false;\n      this.dialogMessage = '';\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return {\n        date: date.toLocaleDateString('zh-CN', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit'\n        }),\n        time: date.toLocaleTimeString('zh-CN', {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","API","data","orders","showDialog","dialogMessage","lastActionTime","loading","statusText","statusMap","mounted","fetchOrders","methods","response","get","headers","localStorage","getItem","console","log","map","order","items","pagination","error","handleButtonClick","canPerformAction","warning","newStatus","currentStatus","status","updateOrderStatus","now","Date","orderId","id","put","success","message","handleDeleteOrder","confirm","delete","filter","o","closeDialog","formatDate","dateString","date","toLocaleDateString","year","month","day","time","toLocaleTimeString","hour","minute"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\OrderManagement.vue"],"sourcesContent":["<template>\n  <div class=\"order-management\">\n    <h2>订单管理</h2>\n    <div v-if=\"loading\" class=\"loading\">加载中...</div>\n    <div v-else>\n      <!-- 订单卡片布局 -->\n      <div class=\"order-cards\">\n        <div v-for=\"order in orders\" :key=\"order.id\" class=\"order-card\">\n          <h3>订单ID: {{ order.id }}</h3>\n          <div class=\"order-info\">\n            <div class=\"user-info\">\n              <div>{{ order.username }}</div>\n              <div class=\"email\">{{ order.email }}</div>\n            </div>\n            <div class=\"order-items\">\n              <div v-for=\"item in order.items\" :key=\"item.menu_item_id\" class=\"order-item\">\n                <span class=\"item-name\">{{ item.name }}</span>\n                <div class=\"item-details\">\n                  <span>数量: {{ item.quantity }}</span>\n                  <span>单价: ¥{{ item.price }}</span>\n                  <span>小计: ¥{{ item.quantity * item.price }}</span>\n                </div>\n              </div>\n            </div>\n            <div class=\"price\">总价: ¥{{ order.total_price }}</div>\n            <div class=\"status\">\n              <span :class=\"['status-tag', 'status-' + statusMap[order.status]]\">\n                {{ statusText[order.status] || '未知状态' }}\n              </span>\n            </div>\n            <div class=\"time-info\">\n              <div>{{ formatDate(order.created_at).date }}</div>\n              <div class=\"time\">{{ formatDate(order.created_at).time }}</div>\n            </div>\n            <div class=\"order-actions\">\n              <button \n                v-if=\"order.status === 'pending'\" \n                class=\"btn-confirm\"\n                @click=\"handleButtonClick(order)\"\n              >开始处理</button>\n              <button \n                v-if=\"order.status === 'confirmed'\" \n                class=\"btn-complete\"\n                @click=\"handleButtonClick(order)\"\n              >完成订单</button>\n              <button \n                v-if=\"order.status === 'completed'\" \n                class=\"btn-delete\"\n                @click=\"handleDeleteOrder(order)\"\n              >删除订单</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div v-if=\"orders.length === 0 && !loading\">\n      <p class=\"empty-message\">没有找到订单。</p>\n    </div>\n\n    <!-- 对话框 -->\n    <div v-if=\"showDialog\" class=\"dialog-overlay\">\n      <div class=\"dialog\">\n        <p>{{ dialogMessage }}</p>\n        <button @click=\"closeDialog\">确定</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\n\nconst API = 'http://localhost:3000/api/auth';  // 直接定义 API 地址\n\nexport default {\n  data() {\n    return {\n      orders: [], // 存储所有订单信息\n      showDialog: false,\n      dialogMessage: '',\n      lastActionTime: 0, // 记录上一次操作的时间戳\n      loading: false,\n      // 状态显示文本\n      statusText: {\n        'pending': '待处理',\n        'confirmed': '处理中',\n        'completed': '已完成',\n        'cancelled': '已取消'\n      },\n      // 状态映射\n      statusMap: {\n        'pending': 'pending',\n        'confirmed': 'confirmed',\n        'completed': 'completed',\n        'cancelled': 'cancelled'\n      }\n    };\n  },\n  mounted() {\n    this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${API}/canteen/orders`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        console.log('获取到的订单数据:', response.data);\n        \n        // 处理订单数据\n        this.orders = response.data.orders.map(order => ({\n          ...order,\n          lastActionTime: 0,\n          items: order.items || [] // 确保 items 存在\n        }));\n        \n        // 更新分页信息\n        if (response.data.pagination) {\n          this.pagination = response.data.pagination;\n        }\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        ElMessage.error('获取订单列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    async handleButtonClick(order) {\n      if (!this.canPerformAction(order)) {\n        ElMessage.warning('操作太频繁，请稍后再试');\n        return;\n      }\n\n      try {\n        let newStatus;\n        const currentStatus = order.status;\n        switch (currentStatus) {\n          case 'pending':\n            newStatus = 'confirmed';\n            break;\n          case 'confirmed':\n            newStatus = 'completed';\n            break;\n          default:\n            ElMessage.error(`当前状态 ${this.statusText[order.status]} 无法进行操作`);\n            return;\n        }\n\n        await this.updateOrderStatus(order, newStatus);\n        // 操作成功后刷新订单列表\n        await this.fetchOrders();\n      } catch (error) {\n        console.error('操作失败:', error);\n        ElMessage.error('操作失败，请重试');\n      }\n    },\n\n    canPerformAction(order) {\n      const now = Date.now();\n      // 如果是第一次操作，或者距离上次操作超过3秒\n      if (!order.lastActionTime || now - order.lastActionTime > 3000) {\n        return true;\n      }\n      return false;\n    },\n\n    async updateOrderStatus(order, status) {\n      try {\n        console.log('Updating order status:', { orderId: order.id, status: status });\n        await axios.put(\n          `${API}/canteen/orders/${order.id}`, \n          { status }, \n          {\n            headers: {\n              'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n              'Content-Type': 'application/json'\n            }\n          }\n        );\n        \n        ElMessage.success(`订单状态已更新为${this.statusText[status]}`);\n        order.lastActionTime = Date.now(); // 更新最后操作时间\n        order.status = status; // 更新本地状态\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        ElMessage.error(error.response?.data?.message || '更新订单状态失败，请重试');\n        throw error;\n      }\n    },\n\n    async handleDeleteOrder(order) {\n      try {\n        if (!confirm('确定要删除这个订单吗？此操作不可撤销。')) {\n          return;\n        }\n        \n        await axios.delete(`${API}/canteen/orders/${order.id}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        \n        ElMessage.success('订单已删除');\n        // 从列表中移除该订单\n        this.orders = this.orders.filter(o => o.id !== order.id);\n      } catch (error) {\n        console.error('删除订单失败:', error);\n        ElMessage.error(error.response?.data?.message || '删除订单失败，请重试');\n      }\n    },\n\n    closeDialog() {\n      this.showDialog = false;\n      this.dialogMessage = '';\n    },\n\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return {\n        date: date.toLocaleDateString('zh-CN', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit'\n        }),\n        time: date.toLocaleTimeString('zh-CN', {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      };\n    }\n  }\n};\n</script>\n\n<style scoped>\n.order-management {\n  padding: 16px;\n}\n\nh2 {\n  color: #303133;\n  margin-bottom: 16px;\n  font-size: 24px;\n}\n\n.order-cards {\n  display: flex;\n  flex-wrap: wrap; /* 允许换行 */\n  gap: 16px;\n  justify-content: flex-start; /* 所有订单对齐到左边 */\n}\n\n.order-card {\n  background-color: white;\n  border-radius: 8px;\n  padding: 16px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n  width: 300px; /* 固定宽度 */\n  box-sizing: border-box;\n  flex-grow: 1; /* 允许订单卡片在没有足够空间时扩展 */\n}\n\n.order-info {\n  margin-top: 16px;\n}\n\n.order-items {\n  padding: 8px 0;\n}\n\n.order-item {\n  background-color: #f8f9fa;\n  padding: 8px;\n  margin-bottom: 8px;\n}\n\n.item-info {\n  display: flex;\n  flex-direction: column; /* 垂直排列 */\n  gap: 4px; /* 为每个信息项提供间距 */\n}\n\n.item-name {\n  font-weight: bold;\n  color: #303133;\n}\n\n.item-details {\n  font-size: 14px;\n  color: #606266;\n}\n\n.item-quantity,\n.item-price,\n.item-total {\n  margin-bottom: 4px; /* 让数量、单价和小计之间有间距 */\n}\n\n.price {\n  font-weight: bold;\n  margin-top: 12px;\n}\n\n.status-tag {\n  padding: 2px 6px;\n  border-radius: 4px;\n  font-size: 12px;\n}\n\n.status-pending {\n  background-color: #e6a23c;\n}\n\n.status-confirmed {\n  background-color: #409eff;\n}\n\n.status-completed {\n  background-color: #67c23a;\n}\n\n.status-cancelled {\n  background-color: #f56c6c;\n}\n\n.time-info {\n  display: flex;\n  flex-direction: column;\n  margin-top: 8px;\n}\n\n.time {\n  font-size: 14px;\n  color: #909399;\n}\n\n.order-actions {\n  margin-top: 12px;\n  display: flex;\n  gap: 8px;\n  flex-direction: column;\n}\n\nbutton {\n  padding: 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: 0.3s;\n  margin: 4px 0;\n  font-size: 14px;\n  width: 100%;\n}\n\n.btn-confirm {\n  background-color: #67C23A;\n  color: white;\n}\n\n.btn-complete {\n  background-color: #409EFF;\n  color: white;\n}\n\n.btn-delete {\n  background-color: #F56C6C;\n  color: white;\n}\n\n.empty-message {\n  text-align: center;\n  color: #909399;\n  margin-top: 40px;\n}\n\n/* Mobile Optimization */\n@media screen and (max-width: 768px) {\n  table {\n    display: none; /* 隐藏桌面端表格 */\n  }\n\n  .order-cards {\n    flex-direction: column; /* 垂直排列 */\n    align-items: flex-start; /* 所有订单左对齐 */\n    gap: 16px; /* 提供一定的间距 */\n  }\n\n  .order-card {\n    width: 100%; /* 在小屏幕上每个订单卡片宽度占满父容器 */\n    flex-grow: 0; /* 不扩展 */\n    margin-bottom: 16px;\n  }\n\n  .order-info {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .user-info {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 8px; /* 用户信息之间有间距 */\n  }\n\n  .email {\n    font-size: 14px;\n    color: #909399;\n  }\n\n  .item-info {\n    gap: 6px;\n  }\n\n  .item-name {\n    font-size: 16px;\n    color: #303133;\n  }\n\n  .item-details {\n    font-size: 12px;\n    color: #606266;\n  }\n\n  .item-quantity,\n  .item-price,\n  .item-total {\n    font-size: 13px;\n  }\n\n  .btn-confirm,\n  .btn-complete,\n  .btn-delete {\n    width: 100%;\n    padding: 12px;\n  }\n\n  .empty-message {\n    font-size: 14px;\n  }\n}\n\n/* Large screen optimization (above 768px) */\n@media screen and (min-width: 769px) {\n  .order-cards {\n    flex-wrap: wrap;\n    gap: 16px;\n  }\n\n  .order-card {\n    width: 300px; /* 固定宽度 */\n    flex-grow: 1; /* 自动填充空间 */\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}