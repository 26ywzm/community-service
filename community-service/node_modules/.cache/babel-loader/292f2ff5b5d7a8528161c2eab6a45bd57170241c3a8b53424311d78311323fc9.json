{"ast":null,"code":"import { defineComponent, createVNode as _createVNode } from \"vue\";\nimport { isDef, truthProp, makeArrayProp, makeStringProp, createNamespace } from \"../utils/index.mjs\";\nimport { Cell } from \"../cell/index.mjs\";\nconst [name, bem, t] = createNamespace(\"coupon-cell\");\nconst couponCellProps = {\n  title: String,\n  border: truthProp,\n  editable: truthProp,\n  coupons: makeArrayProp(),\n  currency: makeStringProp(\"\\xA5\"),\n  chosenCoupon: {\n    type: [Number, Array],\n    default: -1\n  }\n};\nconst getValue = coupon => {\n  const {\n    value,\n    denominations\n  } = coupon;\n  if (isDef(value)) {\n    return value;\n  }\n  if (isDef(denominations)) {\n    return denominations;\n  }\n  return 0;\n};\nfunction formatValue({\n  coupons,\n  chosenCoupon,\n  currency\n}) {\n  let value = 0;\n  let isExist = false;\n  (Array.isArray(chosenCoupon) ? chosenCoupon : [chosenCoupon]).forEach(i => {\n    const coupon = coupons[+i];\n    if (coupon) {\n      isExist = true;\n      value += getValue(coupon);\n    }\n  });\n  if (isExist) {\n    return `-${currency} ${(value / 100).toFixed(2)}`;\n  }\n  return coupons.length === 0 ? t(\"noCoupon\") : t(\"count\", coupons.length);\n}\nvar stdin_default = defineComponent({\n  name,\n  props: couponCellProps,\n  setup(props) {\n    return () => {\n      const selected = Array.isArray(props.chosenCoupon) ? props.chosenCoupon.length : props.coupons[+props.chosenCoupon];\n      return _createVNode(Cell, {\n        \"class\": bem(),\n        \"value\": formatValue(props),\n        \"title\": props.title || t(\"title\"),\n        \"border\": props.border,\n        \"isLink\": props.editable,\n        \"valueClass\": bem(\"value\", {\n          selected\n        })\n      }, null);\n    };\n  }\n});\nexport { couponCellProps, stdin_default as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}