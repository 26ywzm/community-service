{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"user-list\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  class: \"chat-box\"\n};\nconst _hoisted_5 = {\n  class: \"messages\"\n};\nconst _hoisted_6 = {\n  class: \"message-content\"\n};\nconst _hoisted_7 = {\n  class: \"timestamp\"\n};\nconst _hoisted_8 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"用户列表\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [_createCommentVNode(\" 显示所有用户，管理员可以点击查看与他们的对话 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.users, user => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: user.id,\n      onClick: $event => $options.selectUser(user)\n    }, _toDisplayString(user.username), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 如果选定了用户，显示与该用户的对话，否则显示所有用户的聊天记录 \"), _createElementVNode(\"h3\", null, _toDisplayString($data.selectedUser ? `与 ${$data.selectedUser.username} 的对话` : '所有用户聊天记录'), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chatMessages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: _normalizeClass(['message', message.isAdmin ? 'admin' : 'user'])\n    }, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString(message.message), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, _toDisplayString($options.formatTimestamp(message.created_at)), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 管理员回复区域 \"), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.adminReply = $event),\n    placeholder: \"输入回复...\",\n    rows: \"3\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.adminReply]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.sendReply && $options.sendReply(...args)),\n    disabled: $data.isSending\n  }, \"发送\", 8 /* PROPS */, _hoisted_8)]), _createCommentVNode(\" 提示消息 \"), $data.message.show ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass(['message', $data.message.type])\n  }, _toDisplayString($data.message.content), 3 /* TEXT, CLASS */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_Fragment","_renderList","$data","users","user","key","id","onClick","$event","$options","selectUser","username","_hoisted_3","_hoisted_4","_toDisplayString","selectedUser","_hoisted_5","chatMessages","message","_normalizeClass","isAdmin","_hoisted_6","_hoisted_7","formatTimestamp","created_at","_cache","adminReply","placeholder","rows","args","sendReply","disabled","isSending","_hoisted_8","show","type","content"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\ManageFeedback.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n  <div class=\"user-list\">\n    <h3>用户列表</h3>\n    <ul>\n      <!-- 显示所有用户，管理员可以点击查看与他们的对话 -->\n      <li v-for=\"user in users\" :key=\"user.id\" @click=\"selectUser(user)\">\n        {{ user.username }}\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"chat-box\">\n    <!-- 如果选定了用户，显示与该用户的对话，否则显示所有用户的聊天记录 -->\n    <h3>{{ selectedUser ? `与 ${selectedUser.username} 的对话` : '所有用户聊天记录' }}</h3>\n    <div class=\"messages\">\n      <div v-for=\"message in chatMessages\" :key=\"message.id\" :class=\"['message', message.isAdmin ? 'admin' : 'user']\">\n        <div class=\"message-content\">{{ message.message }}</div>\n        <div class=\"timestamp\">{{ formatTimestamp(message.created_at) }}</div>\n      </div>\n    </div>\n\n    <!-- 管理员回复区域 -->\n    <textarea v-model=\"adminReply\" placeholder=\"输入回复...\" rows=\"3\"></textarea>\n    <button @click=\"sendReply\" :disabled=\"isSending\">发送</button>\n  </div>\n\n  <!-- 提示消息 -->\n  <div v-if=\"message.show\" :class=\"['message', message.type]\">\n    {{ message.content }}\n  </div>\n</div>\n</template>\n\n<script>\nimport axios from 'axios';\nconst BASE_URL = process.env.VUE_APP_BASE_URL;\n\nexport default {\n  data() {\n    return {\n      users: [],  // 用户列表\n      selectedUser: null,  // 当前选择的用户\n      chatMessages: [],  // 当前用户的聊天记录\n      adminReply: '',  // 管理员输入的回复内容\n      message: {\n        show: false,\n        content: '',\n        type: 'success'\n      },\n      isSending: false  // 防止重复发送\n    };\n  },\n  mounted() {\n    this.fetchUsers();  // 获取用户列表\n  },\n  methods: {\n    // 显示提示消息\n    showMessage(content, type) {\n  this.message = {\n    content,\n    type,\n    show: true\n  };\n\n  setTimeout(() => {\n    this.message.show = false;\n  }, 3000);\n},\n\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/canteen/users`);\n        this.users = response.data;\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        this.showMessage('获取用户列表失败，请稍后重试', 'error');\n      }\n    },\n\n    // 选择与某个用户对话\nasync selectUser(user) {\n  this.selectedUser = user;\n  this.fetchChatMessages(user.id);  // 获取该用户的聊天记录\n},\n\n    // 获取与选定用户的聊天记录\nasync fetchChatMessages(userId = null) {\n  try {\n    // 获取所有聊天记录\n    const response = await axios.get(`${BASE_URL}/api/canteen/feedback`);\n    const feedbacks = response.data;\n\n    // 如果管理员选择了某个用户，则过滤该用户的聊天记录\n    if (userId) {\n      this.chatMessages = feedbacks.filter(msg => msg.user_id === userId);\n    } else {\n      // 如果没有选择用户，显示所有聊天记录\n      this.chatMessages = feedbacks;\n    }\n\n    // 这里区分是管理员回复的消息还是用户发送的消息\n    this.chatMessages = this.chatMessages.map(msg => ({\n      ...msg,\n      isAdmin: msg.user_id !== userId  // 区分管理员和用户的消息\n    }));\n  } catch (error) {\n    console.error('获取聊天记录失败:', error);\n    this.showMessage('获取聊天记录失败，请稍后重试', 'error');\n  }\n},\n\n    // 发送管理员回复\n    async sendReply() {\n  if (this.isSending || !this.adminReply.trim()) return;\n\n  this.isSending = true;\n\n  try {\n    const response = await axios.post(`${BASE_URL}/api/canteen/feedback/reply`, {\n      feedbackId: this.selectedMessage.id,  // 回复的留言ID\n      adminReply: this.adminReply.trim()  // 管理员的回复内容\n    });\n\n    this.showMessage('回复成功', 'success');\n    this.adminReply = '';  // 清空输入框\n    this.fetchChatMessages(this.selectedUser.id);  // 重新获取聊天记录\n  } catch (error) {\n    console.error('发送回复失败:', error);\n    this.showMessage('发送回复失败，请稍后重试', 'error');\n  } finally {\n    this.isSending = false;\n  }\n},\n\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n  const date = new Date(timestamp);\n  return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n}\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  justify-content: space-between;\n  padding: 20px;\n}\n\n.user-list {\n  width: 25%;\n}\n\n.user-list ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.user-list li {\n  padding: 10px;\n  cursor: pointer;\n  border-bottom: 1px solid #ccc;\n}\n\n.user-list li:hover {\n  background-color: #f0f0f0;\n}\n\n.chat-box {\n  width: 70%;\n  display: flex;\n  flex-direction: column;\n}\n\n.messages {\n  flex: 1;\n  overflow-y: auto;\n  margin-bottom: 10px;\n}\n\n.message {\n  padding: 10px;\n  border-radius: 8px;\n  margin-bottom: 10px;\n  max-width: 70%;\n}\n\n.message.admin {\n  background-color: #e0f7fa;\n  margin-left: auto;\n  text-align: right;\n}\n\n.message.user {\n  background-color: #e8e8e8;\n  margin-right: auto;\n}\n\n.message-content {\n  font-size: 14px;\n}\n\n.timestamp {\n  font-size: 12px;\n  color: #888;\n}\n\ntextarea {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 10px;\n  resize: vertical;\n}\n\nbutton {\n  padding: 8px 16px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.message {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  padding: 10px 20px;\n  border-radius: 4px;\n  color: white;\n  animation: slideIn 0.3s ease-out;\n}\n\n.message.success {\n  background-color: #4CAF50;\n}\n\n.message.error {\n  background-color: #f44336;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EACtBA,KAAK,EAAC;AAAW;mBAFxB;;EAYOA,KAAK,EAAC;AAAU;;EAGdA,KAAK,EAAC;AAAU;;EAEZA,KAAK,EAAC;AAAiB;;EACvBA,KAAK,EAAC;AAAW;mBAlB9B;;uBACEC,mBAAA,CA8BI,OA9BJC,UA8BI,GA7BJC,mBAAA,CAQM,OARNC,UAQM,G,0BAPJD,mBAAA,CAAa,YAAT,MAAI,sBACRA,mBAAA,CAKK,aAJHE,mBAAA,4BAA+B,G,kBAC/BJ,mBAAA,CAEKK,SAAA,QARXC,WAAA,CAMyBC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAfT,mBAAA,CAEK;MAFsBU,GAAG,EAAED,IAAI,CAACE,EAAE;MAAGC,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU,CAACN,IAAI;wBAC3DA,IAAI,CAACO,QAAQ,wBAPxBC,UAAA;sCAYEf,mBAAA,CAaM,OAbNgB,UAaM,GAZJd,mBAAA,qCAAwC,EACxCF,mBAAA,CAA2E,YAAAiB,gBAAA,CAApEZ,KAAA,CAAAa,YAAY,QAAQb,KAAA,CAAAa,YAAY,CAACJ,QAAQ,qCAChDd,mBAAA,CAKM,OALNmB,UAKM,I,kBAJJrB,mBAAA,CAGMK,SAAA,QAnBZC,WAAA,CAgB6BC,KAAA,CAAAe,YAAY,EAAvBC,OAAO;yBAAnBvB,mBAAA,CAGM;MAHgCU,GAAG,EAAEa,OAAO,CAACZ,EAAE;MAAGZ,KAAK,EAhBnEyB,eAAA,aAgBiFD,OAAO,CAACE,OAAO;QACxFvB,mBAAA,CAAwD,OAAxDwB,UAAwD,EAAAP,gBAAA,CAAxBI,OAAO,CAACA,OAAO,kBAC/CrB,mBAAA,CAAsE,OAAtEyB,UAAsE,EAAAR,gBAAA,CAA5CL,QAAA,CAAAc,eAAe,CAACL,OAAO,CAACM,UAAU,kB;oCAIhEzB,mBAAA,aAAgB,E,gBAChBF,mBAAA,CAAyE;IAvB7E,uBAAA4B,MAAA,QAAAA,MAAA,MAAAjB,MAAA,IAuBuBN,KAAA,CAAAwB,UAAU,GAAAlB,MAAA;IAAEmB,WAAW,EAAC,SAAS;IAACC,IAAI,EAAC;iDAAvC1B,KAAA,CAAAwB,UAAU,E,GAC7B7B,mBAAA,CAA4D;IAAnDU,OAAK,EAAAkB,MAAA,QAAAA,MAAA,UAAAI,IAAA,KAAEpB,QAAA,CAAAqB,SAAA,IAAArB,QAAA,CAAAqB,SAAA,IAAAD,IAAA,CAAS;IAAGE,QAAQ,EAAE7B,KAAA,CAAA8B;KAAW,IAAE,iBAxBvDC,UAAA,E,GA2BElC,mBAAA,UAAa,EACFG,KAAA,CAAAgB,OAAO,CAACgB,IAAI,I,cAAvBvC,mBAAA,CAEM;IA9BRU,GAAA;IA4B4BX,KAAK,EA5BjCyB,eAAA,aA4B+CjB,KAAA,CAAAgB,OAAO,CAACiB,IAAI;sBACpDjC,KAAA,CAAAgB,OAAO,CAACkB,OAAO,2BA7BtBrC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}