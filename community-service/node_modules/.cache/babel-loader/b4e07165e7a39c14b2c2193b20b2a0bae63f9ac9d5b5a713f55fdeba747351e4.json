{"ast":null,"code":"import axios from 'axios';\nconst API = process.env.VUE_APP_API_URL;\nexport const verifyAuth = async () => {\n  try {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      return {\n        valid: false,\n        reason: 'no-token'\n      };\n    }\n    const response = await axios.get(`${API}/verify`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.data.valid) {\n      // 如果角色不匹配，更新为正确的角色\n      if (response.data.correctRole) {\n        localStorage.setItem('userRole', response.data.correctRole);\n        return {\n          valid: false,\n          reason: 'role-mismatch',\n          newRole: response.data.correctRole\n        };\n      } else {\n        // 如果验证完全失败，清除所有认证信息\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userRole');\n        localStorage.removeItem('username');\n        localStorage.removeItem('userId');\n        localStorage.removeItem('email');\n        return {\n          valid: false,\n          reason: 'invalid-token'\n        };\n      }\n    }\n    return {\n      valid: true,\n      role: response.data.role\n    };\n  } catch (error) {\n    console.error('验证失败:', error);\n    if (error.response && error.response.status === 401) {\n      // 只在401错误时清除认证信息\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('username');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('email');\n      return {\n        valid: false,\n        reason: 'unauthorized'\n      };\n    }\n    // 其他错误（如网络错误）不做处理\n    return {\n      valid: true\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}