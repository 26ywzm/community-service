{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nconst BASE_URL = process.env.VUE_APP_BASE_URL;\nexport default {\n  data() {\n    return {\n      menuItems: [],\n      // 菜单数据\n      cart: [],\n      // 购物车数据\n      imageCache: new Map() // 添加图片缓存\n    };\n  },\n  async mounted() {\n    await this.fetchMenuItems(); // 加载可用的菜单项\n  },\n  methods: {\n    async fetchMenuItems() {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/auth/canteen/menu`);\n        this.menuItems = response.data.map(item => ({\n          ...item,\n          quantity: 1\n        })); // 添加 quantity 字段并设置默认值为1\n        // 预加载所有图片\n        for (const item of this.menuItems) {\n          await this.loadImage(item);\n        }\n      } catch (error) {\n        console.error('获取菜单失败:', error);\n      }\n    },\n    async loadImage(item) {\n      if (!item.image_url) return;\n      item.blobUrl = await this.getImageUrl(item.image_url);\n    },\n    addToCart(item) {\n      // 检查购物车中是否已经存在该菜品\n      const existingItem = this.cart.find(cartItem => cartItem.id === item.id);\n      if (existingItem) {\n        existingItem.quantity += item.quantity; // 更新数量\n      } else {\n        this.cart.push({\n          ...item\n        });\n      }\n      item.quantity = 1; // 重置输入框为1\n      alert(`${item.name} 已加入购物车！`);\n    },\n    removeFromCart(index) {\n      this.cart.splice(index, 1); // 从购物车中删除指定索引的菜品\n      alert('菜品已从购物车中删除！');\n    },\n    async checkout() {\n      const orders = this.cart.map(cartItem => ({\n        menuItemId: cartItem.id,\n        quantity: cartItem.quantity,\n        price: cartItem.price\n      }));\n      if (orders.length === 0) {\n        alert('请至少选择一项菜品！');\n        return;\n      }\n      try {\n        console.log('Orders being sent:', orders);\n        const response = await axios.post(`${BASE_URL}/api/auth/canteen/order`, {\n          items: orders\n        }, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        alert(response.data.message || '结账成功！');\n        this.$router.push(`/order/${response.data.orderId}`);\n      } catch (error) {\n        console.error('结账失败:', error);\n        alert('结账失败，请重试。');\n      }\n    },\n    async getImageUrl(path) {\n      if (!path) return '';\n      if (path.startsWith('http')) {\n        return path;\n      }\n\n      // 检查缓存\n      if (this.imageCache.has(path)) {\n        return this.imageCache.get(path);\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        const uploadPath = path.startsWith('/uploads/') ? path : `/uploads/${path}`;\n        const baseUrl = process.env.VUE_APP_BASE_URL || 'http://localhost:3000';\n        const response = await fetch(`${baseUrl}${uploadPath}`, {\n          headers\n        });\n        const blob = await response.blob();\n        const blobUrl = URL.createObjectURL(blob);\n\n        // 存入缓存\n        this.imageCache.set(path, blobUrl);\n        return blobUrl;\n      } catch (error) {\n        console.error('加载图片失败:', error);\n        return '';\n      }\n    },\n    decrementQuantity(item) {\n      if (item.quantity > 1) {\n        item.quantity--;\n      }\n    },\n    incrementQuantity(item) {\n      item.quantity++;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}