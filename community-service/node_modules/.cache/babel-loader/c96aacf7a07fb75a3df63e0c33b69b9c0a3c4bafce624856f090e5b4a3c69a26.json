{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = process.env.VUE_APP_BASE_URL;\nexport default {\n  data() {\n    return {\n      users: [],\n      // 用户列表\n      selectedUser: null,\n      // 当前选择的用户\n      selectedMessage: null,\n      // 当前选择要回复的消息\n      chatMessages: [],\n      // 当前用户的聊天记录\n      adminReply: '',\n      // 管理员输入的回复内容\n      message: {\n        show: false,\n        content: '',\n        type: 'success'\n      },\n      isSending: false // 防止重复发送\n    };\n  },\n  mounted() {\n    this.fetchUsers(); // 获取用户列表\n    this.fetchChatMessages(); // 获取所有聊天记录\n  },\n  methods: {\n    // 显示提示消息\n    showMessage(content, type) {\n      this.message = {\n        content,\n        type,\n        show: true\n      };\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/canteen/users`);\n        this.users = response.data;\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        this.showMessage('获取用户列表失败，请稍后重试', 'error');\n      }\n    },\n    // 选择与某个用户对话\n    async selectUser(user) {\n      this.selectedUser = this.selectedUser?.id === user.id ? null : user;\n      this.selectedMessage = null; // 清除选中的消息\n      this.adminReply = ''; // 清空回复框\n      this.fetchChatMessages(this.selectedUser?.id);\n    },\n    // 选择要回复的消息\n    selectMessage(message) {\n      if (message.admin_reply) {\n        this.showMessage('该消息已经回复过了', 'info');\n        return;\n      }\n      this.selectedMessage = message;\n      this.adminReply = ''; // 清空回复框\n    },\n    // 取消回复\n    cancelReply() {\n      this.selectedMessage = null;\n      this.adminReply = '';\n    },\n    // 发送消息（包括回复和新消息）\n    async sendMessage() {\n      if (this.isSending || !this.adminReply.trim()) return;\n      if (!this.selectedUser && !this.selectedMessage) {\n        this.showMessage('请先选择用户或要回复的消息', 'error');\n        return;\n      }\n      this.isSending = true;\n      try {\n        if (this.selectedMessage) {\n          // 回复已有消息\n          await axios.put(`${BASE_URL}/api/canteen/feedback/${this.selectedMessage.id}/reply`, {\n            admin_reply: this.adminReply.trim()\n          });\n        } else {\n          // 发送新消息，使用与用户提交留言相同的接口\n          await axios.post(`${BASE_URL}/api/canteen/feedback`, {\n            user_id: this.selectedUser.id,\n            message: this.adminReply.trim()\n          });\n        }\n        this.showMessage('发送成功', 'success');\n        this.adminReply = ''; // 清空输入框\n        this.selectedMessage = null; // 清除选中的消息\n        await this.fetchChatMessages(this.selectedUser?.id); // 重新获取聊天记录\n      } catch (error) {\n        console.error('发送失败:', error);\n        this.showMessage('发送失败，请稍后重试', 'error');\n      } finally {\n        this.isSending = false;\n      }\n    },\n    // 删除留言\n    async deleteMessage(message) {\n      if (!confirm('确定要删除这条留言吗？')) {\n        return;\n      }\n      try {\n        const userId = localStorage.getItem('userId');\n        const userRole = localStorage.getItem('userRole'); // 修改这里，从 role 改为 userRole\n\n        console.log('删除留言:', {\n          messageId: message.id,\n          userId,\n          userRole,\n          isAdmin: userRole === 'admin'\n        });\n        await axios.delete(`${BASE_URL}/api/canteen/feedback/${message.id}`, {\n          data: {\n            user_id: userId,\n            is_admin: userRole === 'admin'\n          }\n        });\n        this.showMessage('留言已删除', 'success');\n        await this.fetchChatMessages(this.selectedUser?.id);\n      } catch (error) {\n        console.error('删除留言失败:', error);\n        this.showMessage(error.response?.data?.message || '删除失败，请稍后重试', 'error');\n      }\n    },\n    // 获取聊天记录\n    async fetchChatMessages(userId = null) {\n      try {\n        let response;\n        if (userId) {\n          // 如果选择了特定用户，获取该用户的消息\n          response = await axios.get(`${BASE_URL}/api/canteen/feedbacks?user_id=${userId}`);\n          this.chatMessages = response.data.feedbacks || [];\n        } else {\n          // 否则获取所有消息\n          response = await axios.get(`${BASE_URL}/api/canteen/feedback`);\n          this.chatMessages = response.data || [];\n        }\n\n        // 处理消息，标记是否为管理员消息\n        this.chatMessages = this.chatMessages.map(msg => ({\n          ...msg,\n          isAdmin: msg.admin_reply !== null\n        }));\n      } catch (error) {\n        console.error('获取聊天记录失败:', error);\n        this.showMessage('获取聊天记录失败，请稍后重试', 'error');\n      }\n    },\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n    }\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","VUE_APP_BASE_URL","data","users","selectedUser","selectedMessage","chatMessages","adminReply","message","show","content","type","isSending","mounted","fetchUsers","fetchChatMessages","methods","showMessage","setTimeout","response","get","error","console","selectUser","user","id","selectMessage","admin_reply","cancelReply","sendMessage","trim","put","post","user_id","deleteMessage","confirm","userId","localStorage","getItem","userRole","log","messageId","isAdmin","delete","is_admin","feedbacks","map","msg","formatTimestamp","timestamp","date","Date","toLocaleDateString","toLocaleTimeString"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\ManageFeedback.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <div class=\"user-list\">\n      <h3>用户列表</h3>\n      <ul>\n        <!-- 显示所有用户，管理员可以点击查看与他们的对话 -->\n        <li v-for=\"user in users\" :key=\"user.id\" @click=\"selectUser(user)\"\n            :class=\"{ active: selectedUser && selectedUser.id === user.id }\">\n          {{ user.username }}\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"chat-box\">\n      <!-- 如果选定了用户，显示与该用户的对话，否则显示所有用户的聊天记录 -->\n      <h3>{{ selectedUser ? `与 ${selectedUser.username} 的对话` : '所有用户聊天记录' }}</h3>\n      <div class=\"messages\">\n        <div v-for=\"message in chatMessages\" :key=\"message.id\" \n             :class=\"['message', message.isAdmin ? 'admin' : 'user']\">\n          <div class=\"message-header\">\n            <span class=\"username\">{{ message.username }}</span>\n            <div class=\"message-actions\">\n              <button class=\"action-btn delete\" @click=\"deleteMessage(message)\">\n                删除\n              </button>\n              <button v-if=\"!message.admin_reply\" \n                      class=\"action-btn reply\" \n                      @click=\"selectMessage(message)\">\n                回复\n              </button>\n            </div>\n          </div>\n          <div class=\"message-content\">{{ message.message }}</div>\n          <div class=\"message-reply\" v-if=\"message.admin_reply\">\n            <strong>管理员回复：</strong> {{ message.admin_reply }}\n          </div>\n          <div class=\"timestamp\">{{ formatTimestamp(message.created_at) }}</div>\n        </div>\n      </div>\n\n      <!-- 管理员回复区域 -->\n      <div class=\"reply-area\">\n        <div v-if=\"selectedMessage\" class=\"selected-message\">\n          正在回复: {{ selectedMessage.message }}\n          <button @click=\"cancelReply\" class=\"cancel-btn small\">取消回复</button>\n        </div>\n        <div class=\"input-area\">\n          <textarea v-model=\"adminReply\" \n                    :placeholder=\"selectedMessage ? '输入回复...' : (selectedUser ? '发送新消息给该用户...' : '请先选择一个用户')\" \n                    rows=\"3\"\n                    :disabled=\"!selectedUser && !selectedMessage\"></textarea>\n          <div class=\"button-group\">\n            <button @click=\"sendMessage\" \n                    :disabled=\"isSending || !adminReply.trim() || (!selectedUser && !selectedMessage)\">\n              {{ isSending ? '发送中...' : '发送' }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 提示消息 -->\n    <div v-if=\"message.show\" :class=\"['message-toast', message.type]\">\n      {{ message.content }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nconst BASE_URL = process.env.VUE_APP_BASE_URL;\n\nexport default {\n  data() {\n    return {\n      users: [],  // 用户列表\n      selectedUser: null,  // 当前选择的用户\n      selectedMessage: null, // 当前选择要回复的消息\n      chatMessages: [],  // 当前用户的聊天记录\n      adminReply: '',  // 管理员输入的回复内容\n      message: {\n        show: false,\n        content: '',\n        type: 'success'\n      },\n      isSending: false  // 防止重复发送\n    };\n  },\n\n  mounted() {\n    this.fetchUsers();  // 获取用户列表\n    this.fetchChatMessages(); // 获取所有聊天记录\n  },\n\n  methods: {\n    // 显示提示消息\n    showMessage(content, type) {\n      this.message = {\n        content,\n        type,\n        show: true\n      };\n\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${BASE_URL}/api/canteen/users`);\n        this.users = response.data;\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        this.showMessage('获取用户列表失败，请稍后重试', 'error');\n      }\n    },\n\n    // 选择与某个用户对话\n    async selectUser(user) {\n      this.selectedUser = this.selectedUser?.id === user.id ? null : user;\n      this.selectedMessage = null; // 清除选中的消息\n      this.adminReply = ''; // 清空回复框\n      this.fetchChatMessages(this.selectedUser?.id);\n    },\n\n    // 选择要回复的消息\n    selectMessage(message) {\n      if (message.admin_reply) {\n        this.showMessage('该消息已经回复过了', 'info');\n        return;\n      }\n      this.selectedMessage = message;\n      this.adminReply = ''; // 清空回复框\n    },\n\n    // 取消回复\n    cancelReply() {\n      this.selectedMessage = null;\n      this.adminReply = '';\n    },\n\n    // 发送消息（包括回复和新消息）\n    async sendMessage() {\n      if (this.isSending || !this.adminReply.trim()) return;\n      if (!this.selectedUser && !this.selectedMessage) {\n        this.showMessage('请先选择用户或要回复的消息', 'error');\n        return;\n      }\n\n      this.isSending = true;\n\n      try {\n        if (this.selectedMessage) {\n          // 回复已有消息\n          await axios.put(`${BASE_URL}/api/canteen/feedback/${this.selectedMessage.id}/reply`, {\n            admin_reply: this.adminReply.trim()\n          });\n        } else {\n          // 发送新消息，使用与用户提交留言相同的接口\n          await axios.post(`${BASE_URL}/api/canteen/feedback`, {\n            user_id: this.selectedUser.id,\n            message: this.adminReply.trim()\n          });\n        }\n\n        this.showMessage('发送成功', 'success');\n        this.adminReply = '';  // 清空输入框\n        this.selectedMessage = null; // 清除选中的消息\n        await this.fetchChatMessages(this.selectedUser?.id);  // 重新获取聊天记录\n      } catch (error) {\n        console.error('发送失败:', error);\n        this.showMessage('发送失败，请稍后重试', 'error');\n      } finally {\n        this.isSending = false;\n      }\n    },\n\n    // 删除留言\n    async deleteMessage(message) {\n      if (!confirm('确定要删除这条留言吗？')) {\n        return;\n      }\n\n      try {\n        const userId = localStorage.getItem('userId');\n        const userRole = localStorage.getItem('userRole'); // 修改这里，从 role 改为 userRole\n        \n        console.log('删除留言:', {\n          messageId: message.id,\n          userId,\n          userRole,\n          isAdmin: userRole === 'admin'\n        });\n        \n        await axios.delete(`${BASE_URL}/api/canteen/feedback/${message.id}`, {\n          data: {\n            user_id: userId,\n            is_admin: userRole === 'admin'\n          }\n        });\n        \n        this.showMessage('留言已删除', 'success');\n        await this.fetchChatMessages(this.selectedUser?.id);\n      } catch (error) {\n        console.error('删除留言失败:', error);\n        this.showMessage(\n          error.response?.data?.message || '删除失败，请稍后重试', \n          'error'\n        );\n      }\n    },\n\n    // 获取聊天记录\n    async fetchChatMessages(userId = null) {\n      try {\n        let response;\n        if (userId) {\n          // 如果选择了特定用户，获取该用户的消息\n          response = await axios.get(`${BASE_URL}/api/canteen/feedbacks?user_id=${userId}`);\n          this.chatMessages = response.data.feedbacks || [];\n        } else {\n          // 否则获取所有消息\n          response = await axios.get(`${BASE_URL}/api/canteen/feedback`);\n          this.chatMessages = response.data || [];\n        }\n\n        // 处理消息，标记是否为管理员消息\n        this.chatMessages = this.chatMessages.map(msg => ({\n          ...msg,\n          isAdmin: msg.admin_reply !== null\n        }));\n      } catch (error) {\n        console.error('获取聊天记录失败:', error);\n        this.showMessage('获取聊天记录失败，请稍后重试', 'error');\n      }\n    },\n\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  justify-content: space-between;\n  padding: 20px;\n  height: calc(100vh - 100px);\n}\n\n.user-list {\n  width: 25%;\n  border-right: 1px solid #ddd;\n  padding-right: 20px;\n}\n\n.user-list ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.user-list li {\n  padding: 10px;\n  cursor: pointer;\n  border-bottom: 1px solid #eee;\n  transition: all 0.3s ease;\n}\n\n.user-list li:hover {\n  background-color: #f5f5f5;\n}\n\n.user-list li.active {\n  background-color: #e3f2fd;\n  border-radius: 4px;\n}\n\n.chat-box {\n  width: 70%;\n  display: flex;\n  flex-direction: column;\n  padding-left: 20px;\n}\n\n.messages {\n  flex: 1;\n  overflow-y: auto;\n  margin-bottom: 20px;\n  padding: 10px;\n}\n\n.message {\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 15px;\n  max-width: 80%;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.message:hover {\n  transform: translateX(5px);\n}\n\n.message.admin {\n  background-color: #e3f2fd;\n  margin-left: auto;\n}\n\n.message.user {\n  background-color: #f5f5f5;\n  margin-right: auto;\n}\n\n.message-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.username {\n  font-weight: bold;\n  color: #666;\n}\n\n.message-actions {\n  display: flex;\n  gap: 8px;\n}\n\n.action-btn {\n  padding: 4px 8px;\n  font-size: 12px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.action-btn:hover {\n  transform: translateY(-1px);\n}\n\n.action-btn.delete {\n  background-color: #ff5252;\n  color: white;\n}\n\n.action-btn.delete:hover {\n  background-color: #ff1744;\n}\n\n.action-btn.reply {\n  background-color: #2196F3;\n  color: white;\n}\n\n.action-btn.reply:hover {\n  background-color: #1976D2;\n}\n\n.message-content {\n  font-size: 14px;\n  margin-bottom: 5px;\n}\n\n.message-reply {\n  font-size: 14px;\n  margin-top: 8px;\n  padding-top: 8px;\n  border-top: 1px solid #ddd;\n}\n\n.timestamp {\n  font-size: 12px;\n  color: #888;\n  margin-top: 5px;\n}\n\n.reply-area {\n  background-color: #f8f9fa;\n  padding: 15px;\n  border-radius: 8px;\n  margin-top: 10px;\n}\n\n.selected-message {\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 10px;\n  padding: 8px;\n  background-color: #fff;\n  border-radius: 4px;\n}\n\n.input-area {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\ntextarea {\n  width: 100%;\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 10px;\n  resize: vertical;\n  font-size: 14px;\n}\n\n.button-group {\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n}\n\nbutton {\n  padding: 8px 16px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-right: 10px;\n}\n\nbutton:hover:not(:disabled) {\n  background-color: #45a049;\n  transform: translateY(-1px);\n}\n\nbutton:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.cancel-btn {\n  background-color: #f44336;\n}\n\n.cancel-btn:hover {\n  background-color: #d32f2f;\n}\n\n.cancel-btn.small {\n  padding: 4px 8px;\n  font-size: 12px;\n  margin-left: 10px;\n}\n\n.message-toast {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  padding: 12px 24px;\n  border-radius: 4px;\n  color: white;\n  animation: slideIn 0.3s ease-out;\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n}\n\n.message-toast.success {\n  background-color: #4CAF50;\n}\n\n.message-toast.error {\n  background-color: #f44336;\n}\n\n.message-toast.info {\n  background-color: #2196F3;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}