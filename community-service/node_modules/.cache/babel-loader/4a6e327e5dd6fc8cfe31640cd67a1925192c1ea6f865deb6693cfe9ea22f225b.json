{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      orders: [] // 存储所有订单信息\n    };\n  },\n  mounted() {\n    this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await axios.get('http://localhost:3000/api/auth/canteen/orders', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.orders = response.data;\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        alert('获取订单列表失败，请重试。');\n      }\n    },\n    async updateOrderStatus(orderId, status) {\n      try {\n        await axios.put(`http://localhost:3000/api/auth/canteen/orders/${orderId}`, {\n          status\n        }, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        alert('订单状态已更新');\n        this.fetchOrders(); // 重新获取订单列表\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        alert('更新订单状态失败，请重试。');\n      }\n    },\n    async deleteOrder(orderId) {\n      try {\n        await axios.delete(`http://localhost:3000/api/auth/canteen/orders/${orderId}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        alert('订单已删除');\n        this.fetchOrders(); // 重新获取订单列表\n      } catch (error) {\n        console.error('删除订单失败:', error);\n        alert('删除订单失败，请重试。');\n      }\n    },\n    formatDate(dateString) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(dateString).toLocaleDateString('zh-CN', options);\n    }\n  }\n};","map":{"version":3,"names":["axios","data","orders","mounted","fetchOrders","methods","response","get","headers","Authorization","localStorage","getItem","error","console","alert","updateOrderStatus","orderId","status","put","deleteOrder","delete","formatDate","dateString","options","year","month","day","hour","minute","Date","toLocaleDateString"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\OrderManagement.vue"],"sourcesContent":["<template>\r\n    <div class=\"order-management\">\r\n      <h2>订单管理</h2>\r\n  \r\n      <div v-if=\"orders.length > 0\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>订单 ID</th>\r\n              <th>用户</th>\r\n              <th>邮箱</th>\r\n              <th>总价格</th>\r\n              <th>创建时间</th>\r\n              <th>状态</th>\r\n              <th>详细内容</th>\r\n              <th>操作</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"order in orders\" :key=\"order.id\">\r\n              <td>{{ order.id }}</td>\r\n              <td>{{ order.username }}</td>\r\n              <td>{{ order.email }}</td>\r\n              <td>{{ order.total_price }} 元</td>\r\n              <td>{{ formatDate(order.created_at) }}</td>\r\n              <td>{{ order.status }}</td>\r\n              <td>\r\n                <ul>\r\n                  <li v-for=\"item in order.items\" :key=\"item.menu_item_id\">\r\n                    {{ item.name }} ({{ item.quantity }}): {{ item.total }} 元\r\n                  </li>\r\n                </ul>\r\n              </td>\r\n              <td>\r\n                <button @click=\"updateOrderStatus(order.id, 'confirmed')\">确定订单</button>\r\n                <button @click=\"updateOrderStatus(order.id, 'completed')\">完成订单</button>\r\n                <button @click=\"deleteOrder(order.id)\">删除订单</button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n  \r\n      <div v-else>\r\n        <p>没有找到订单。</p>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        orders: [] // 存储所有订单信息\r\n      };\r\n    },\r\n    mounted() {\r\n      this.fetchOrders(); // 加载所有订单\r\n    },\r\n    methods: {\r\n      async fetchOrders() {\r\n        try {\r\n          const response = await axios.get('http://localhost:3000/api/auth/canteen/orders', {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`,\r\n            },\r\n          });\r\n          this.orders = response.data;\r\n        } catch (error) {\r\n          console.error('获取订单列表失败:', error);\r\n          alert('获取订单列表失败，请重试。');\r\n        }\r\n      },\r\n      async updateOrderStatus(orderId, status) {\r\n        try {\r\n          await axios.put(`http://localhost:3000/api/auth/canteen/orders/${orderId}`, { status }, {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`,\r\n            },\r\n          });\r\n          alert('订单状态已更新');\r\n          this.fetchOrders(); // 重新获取订单列表\r\n        } catch (error) {\r\n          console.error('更新订单状态失败:', error);\r\n          alert('更新订单状态失败，请重试。');\r\n        }\r\n      },\r\n      async deleteOrder(orderId) {\r\n        try {\r\n          await axios.delete(`http://localhost:3000/api/auth/canteen/orders/${orderId}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('authToken')}`,\r\n            },\r\n          });\r\n          alert('订单已删除');\r\n          this.fetchOrders(); // 重新获取订单列表\r\n        } catch (error) {\r\n          console.error('删除订单失败:', error);\r\n          alert('删除订单失败，请重试。');\r\n        }\r\n      },\r\n      formatDate(dateString) {\r\n        const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\r\n        return new Date(dateString).toLocaleDateString('zh-CN', options);\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .order-management {\r\n    padding: 20px;\r\n  }\r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n  }\r\n  th, td {\r\n    border: 1px solid #ddd;\r\n    padding: 8px;\r\n  }\r\n  th {\r\n    background-color: #f2f2f2;\r\n  }\r\n  button {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    border: none;\r\n    padding: 5px 10px;\r\n    cursor: pointer;\r\n    border-radius: 3px;\r\n    margin-right: 5px;\r\n  }\r\n  button:hover {\r\n    background-color: #45a049;\r\n  }\r\n  </style>"],"mappings":"AAkDE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAC,CAAE;IACb,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE;EACtB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMN,KAAK,CAACO,GAAG,CAAC,+CAA+C,EAAE;UAChFC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;UAC5D;QACF,CAAC,CAAC;QACF,IAAI,CAACT,MAAK,GAAII,QAAQ,CAACL,IAAI;MAC7B,EAAE,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjCE,KAAK,CAAC,eAAe,CAAC;MACxB;IACF,CAAC;IACD,MAAMC,iBAAiBA,CAACC,OAAO,EAAEC,MAAM,EAAE;MACvC,IAAI;QACF,MAAMjB,KAAK,CAACkB,GAAG,CAAC,iDAAiDF,OAAO,EAAE,EAAE;UAAEC;QAAO,CAAC,EAAE;UACtFT,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;UAC5D;QACF,CAAC,CAAC;QACFG,KAAK,CAAC,SAAS,CAAC;QAChB,IAAI,CAACV,WAAW,CAAC,CAAC,EAAE;MACtB,EAAE,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjCE,KAAK,CAAC,eAAe,CAAC;MACxB;IACF,CAAC;IACD,MAAMK,WAAWA,CAACH,OAAO,EAAE;MACzB,IAAI;QACF,MAAMhB,KAAK,CAACoB,MAAM,CAAC,iDAAiDJ,OAAO,EAAE,EAAE;UAC7ER,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;UAC5D;QACF,CAAC,CAAC;QACFG,KAAK,CAAC,OAAO,CAAC;QACd,IAAI,CAACV,WAAW,CAAC,CAAC,EAAE;MACtB,EAAE,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;QAC/BE,KAAK,CAAC,aAAa,CAAC;MACtB;IACF,CAAC;IACDO,UAAUA,CAACC,UAAU,EAAE;MACrB,MAAMC,OAAM,GAAI;QAAEC,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE,MAAM;QAAEC,GAAG,EAAE,SAAS;QAAEC,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAU,CAAC;MACtG,OAAO,IAAIC,IAAI,CAACP,UAAU,CAAC,CAACQ,kBAAkB,CAAC,OAAO,EAAEP,OAAO,CAAC;IAClE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}