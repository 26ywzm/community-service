{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport { handleApiError } from '../utils/errorHandler';\nconst API = process.env.VUE_APP_API_URL;\nexport default {\n  data() {\n    return {\n      menuItems: [],\n      newItem: {\n        name: '',\n        price: '',\n        image_url: '',\n        description: ''\n      },\n      imageFile: null,\n      isEditing: false,\n      imageCache: new Map() // 添加图片缓存\n    };\n  },\n  mounted() {\n    this.fetchMenuItems(); // 加载菜品数据\n  },\n  methods: {\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // 只检查文件类型\n      if (!file.type.startsWith('image/')) {\n        alert('请上传图片文件');\n        this.$refs.fileInput.value = '';\n        return;\n      }\n      this.imageFile = file;\n    },\n    async fetchMenuItems() {\n      try {\n        const response = await axios.get(`${API}/canteen/menu`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.menuItems = response.data; // 获取菜品数据\n        // 预加载所有图片\n        for (const item of this.menuItems) {\n          await this.loadImage(item);\n        }\n      } catch (error) {\n        handleApiError(error);\n      }\n    },\n    async addMenuItem() {\n      const formData = new FormData();\n      formData.append('name', this.newItem.name);\n      formData.append('price', this.newItem.price);\n      formData.append('image_url', this.newItem.image_url);\n      formData.append('description', this.newItem.description);\n      if (this.imageFile) {\n        formData.append('image', this.imageFile);\n      }\n      try {\n        await axios.post(`${API}/canteen/menu`, formData, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n            'Content-Type': 'multipart/form-data'\n          },\n          withCredentials: true\n        });\n        this.fetchMenuItems(); // 刷新菜单列表\n        this.resetForm();\n      } catch (error) {\n        console.error('添加菜品失败:', error);\n        alert('添加菜品失败，请重试');\n      }\n    },\n    async deleteMenuItem(itemId) {\n      try {\n        await axios.delete(`${API}/canteen/menu/${itemId}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        this.fetchMenuItems(); // 刷新菜单列表\n      } catch (error) {\n        handleApiError(error, {\n          suppressAuthError: true,\n          customErrorHandler: () => {\n            alert('删除菜品失败，请重试');\n          }\n        });\n      }\n    },\n    editMenuItem(item) {\n      this.newItem = {\n        ...item\n      };\n      this.isEditing = true; // 设置为编辑状态\n    },\n    async updateMenuItem() {\n      const formData = new FormData();\n      formData.append('name', this.newItem.name);\n      formData.append('price', this.newItem.price);\n      formData.append('image_url', this.newItem.image_url);\n      formData.append('description', this.newItem.description);\n      if (this.imageFile) {\n        formData.append('image', this.imageFile); // 添加文件到formData\n      }\n      try {\n        await axios.put(`${API}/canteen/menu/${this.newItem.id}`, formData, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        this.fetchMenuItems(); // 刷新菜单列表\n        this.resetForm();\n      } catch (error) {\n        handleApiError(error, {\n          suppressAuthError: true,\n          customErrorHandler: () => {\n            alert('更新菜品失败，请重试');\n          }\n        });\n      }\n    },\n    cancelEdit() {\n      this.resetForm(); // 清空表单\n    },\n    resetForm() {\n      this.isEditing = false;\n      this.newItem = {\n        name: '',\n        price: '',\n        image_url: '',\n        description: ''\n      };\n      this.imageFile = null; // 重置文件字段\n      this.$refs.fileInput.value = ''; // 清空文件输入\n    },\n    async loadImage(item) {\n      if (!item.image_url) return;\n      item.blobUrl = await this.getImageUrl(item.image_url);\n    },\n    async getImageUrl(path) {\n      if (!path) return '';\n      if (path.startsWith('http')) {\n        return path;\n      }\n\n      // 检查缓存\n      if (this.imageCache.has(path)) {\n        return this.imageCache.get(path);\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        const uploadPath = path.startsWith('/uploads/') ? path : `/uploads/${path}`;\n        const baseUrl = process.env.VUE_APP_BASE_URL || 'http://localhost:3000';\n        const response = await fetch(`${baseUrl}${uploadPath}`, {\n          headers\n        });\n        const blob = await response.blob();\n        const blobUrl = URL.createObjectURL(blob);\n\n        // 存入缓存\n        this.imageCache.set(path, blobUrl);\n        return blobUrl;\n      } catch (error) {\n        console.error('加载图片失败:', error);\n        return '';\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}