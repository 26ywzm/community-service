{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nconst API = VUE_APP_BASE_URL; // 直接定义 API 地址\n\nexport default {\n  data() {\n    return {\n      orders: [],\n      // 存储所有订单信息\n      showDialog: false,\n      dialogMessage: '',\n      lastActionTime: 0,\n      // 记录上一次操作的时间戳\n      loading: false,\n      // 状态显示文本\n      statusText: {\n        0: '待处理',\n        1: '处理中',\n        2: '已完成',\n        3: '已取消'\n      }\n    };\n  },\n  mounted() {\n    this.fetchOrders(); // 加载所有订单\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${API}/canteen/orders`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        console.log('获取到的订单数据:', response.data);\n\n        // 处理订单数据\n        this.orders = response.data.orders.map(order => ({\n          ...order,\n          lastActionTime: 0,\n          items: order.items || [] // 确保 items 存在\n        }));\n\n        // 更新分页信息\n        if (response.data.pagination) {\n          this.pagination = response.data.pagination;\n        }\n      } catch (error) {\n        console.error('获取订单列表失败:', error);\n        ElMessage.error('获取订单列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async handleButtonClick(order) {\n      if (!this.canPerformAction(order)) {\n        ElMessage.warning('操作太频繁，请稍后再试');\n        return;\n      }\n      try {\n        let newStatus;\n        const currentStatus = parseInt(order.status);\n        switch (currentStatus) {\n          case 0:\n            // pending\n            newStatus = 1; // confirmed\n            break;\n          case 1:\n            // confirmed\n            newStatus = 2; // completed\n            break;\n          default:\n            ElMessage.error(`当前状态 ${this.statusText[order.status]} 无法进行操作`);\n            return;\n        }\n        await this.updateOrderStatus(order, newStatus);\n        // 操作成功后刷新订单列表\n        await this.fetchOrders();\n      } catch (error) {\n        console.error('操作失败:', error);\n        ElMessage.error('操作失败，请重试');\n      }\n    },\n    canPerformAction(order) {\n      const now = Date.now();\n      // 如果是第一次操作，或者距离上次操作超过3秒\n      if (!order.lastActionTime || now - order.lastActionTime > 3000) {\n        return true;\n      }\n      return false;\n    },\n    async updateOrderStatus(order, status) {\n      try {\n        console.log('Updating order status:', {\n          orderId: order.id,\n          status: status\n        });\n        await axios.put(`${API}/canteen/orders/${order.id}`, {\n          status\n        }, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        ElMessage.success(`订单状态已更新为${this.statusText[status]}`);\n        order.lastActionTime = Date.now(); // 更新最后操作时间\n        order.status = status; // 更新本地状态\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        ElMessage.error(error.response?.data?.message || '更新订单状态失败，请重试');\n        throw error;\n      }\n    },\n    async handleDeleteOrder(order) {\n      try {\n        if (!confirm('确定要删除这个订单吗？此操作不可撤销。')) {\n          return;\n        }\n        await axios.delete(`${API}/canteen/orders/${order.id}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        ElMessage.success('订单已删除');\n        // 从列表中移除该订单\n        this.orders = this.orders.filter(o => o.id !== order.id);\n      } catch (error) {\n        console.error('删除订单失败:', error);\n        ElMessage.error(error.response?.data?.message || '删除订单失败，请重试');\n      }\n    },\n    closeDialog() {\n      this.showDialog = false;\n      this.dialogMessage = '';\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return {\n        date: date.toLocaleDateString('zh-CN', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit'\n        }),\n        time: date.toLocaleTimeString('zh-CN', {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","API","VUE_APP_BASE_URL","data","orders","showDialog","dialogMessage","lastActionTime","loading","statusText","mounted","fetchOrders","methods","response","get","headers","localStorage","getItem","console","log","map","order","items","pagination","error","handleButtonClick","canPerformAction","warning","newStatus","currentStatus","parseInt","status","updateOrderStatus","now","Date","orderId","id","put","success","message","handleDeleteOrder","confirm","delete","filter","o","closeDialog","formatDate","dateString","date","toLocaleDateString","year","month","day","time","toLocaleTimeString","hour","minute"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\OrderManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"order-management\">\r\n    <h2>订单管理</h2>\r\n    <div v-if=\"loading\" class=\"loading\">加载中...</div>\r\n    <div v-else>\r\n      <!-- 订单卡片布局 -->\r\n      <div class=\"order-cards\">\r\n        <div v-for=\"order in orders\" :key=\"order.id\" class=\"order-card\">\r\n          <h3>订单ID: {{ order.id }}</h3>\r\n          <div class=\"order-info\">\r\n            <div class=\"user-info\">\r\n              <div>{{ order.username }}</div>\r\n              <div class=\"email\">{{ order.email }}</div>\r\n            </div>\r\n            <div class=\"order-items\">\r\n              <div v-for=\"item in order.items\" :key=\"item.menu_item_id\" class=\"order-item\">\r\n                <span class=\"item-name\">{{ item.name }}</span>\r\n                <div class=\"item-details\">\r\n                  <span>数量: {{ item.quantity }}</span>\r\n                  <span>单价: ¥{{ item.price }}</span>\r\n                  <span>小计: ¥{{ item.quantity * item.price }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"price\">总价: ¥{{ order.total_price }}</div>\r\n            <div class=\"status\">\r\n              <span :class=\"['status-tag', 'status-' + order.status]\">\r\n                {{ statusText[order.status] }}\r\n              </span>\r\n            </div>\r\n            <div class=\"time-info\">\r\n              <div>{{ formatDate(order.created_at).date }}</div>\r\n              <div class=\"time\">{{ formatDate(order.created_at).time }}</div>\r\n            </div>\r\n            <div class=\"order-actions\">\r\n              <button \r\n                v-if=\"parseInt(order.status) === 0\" \r\n                class=\"btn-confirm\"\r\n                @click=\"handleButtonClick(order)\"\r\n              >开始处理</button>\r\n              <button \r\n                v-if=\"parseInt(order.status) === 1\" \r\n                class=\"btn-complete\"\r\n                @click=\"handleButtonClick(order)\"\r\n              >完成订单</button>\r\n              <button \r\n                v-if=\"parseInt(order.status) === 2\" \r\n                class=\"btn-delete\"\r\n                @click=\"handleDeleteOrder(order)\"\r\n              >删除订单</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"orders.length === 0 && !loading\">\r\n      <p class=\"empty-message\">没有找到订单。</p>\r\n    </div>\r\n\r\n    <!-- 对话框 -->\r\n    <div v-if=\"showDialog\" class=\"dialog-overlay\">\r\n      <div class=\"dialog\">\r\n        <p>{{ dialogMessage }}</p>\r\n        <button @click=\"closeDialog\">确定</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { ElMessage } from 'element-plus';\r\n\r\nconst API = VUE_APP_BASE_URL;  // 直接定义 API 地址\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      orders: [], // 存储所有订单信息\r\n      showDialog: false,\r\n      dialogMessage: '',\r\n      lastActionTime: 0, // 记录上一次操作的时间戳\r\n      loading: false,\r\n      // 状态显示文本\r\n      statusText: {\r\n        0: '待处理',\r\n        1: '处理中',\r\n        2: '已完成',\r\n        3: '已取消'\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchOrders(); // 加载所有订单\r\n  },\r\n  methods: {\r\n    async fetchOrders() {\r\n      try {\r\n        this.loading = true;\r\n        const response = await axios.get(`${API}/canteen/orders`, {\r\n          headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n          }\r\n        });\r\n        console.log('获取到的订单数据:', response.data);\r\n        \r\n        // 处理订单数据\r\n        this.orders = response.data.orders.map(order => ({\r\n          ...order,\r\n          lastActionTime: 0,\r\n          items: order.items || [] // 确保 items 存在\r\n        }));\r\n        \r\n        // 更新分页信息\r\n        if (response.data.pagination) {\r\n          this.pagination = response.data.pagination;\r\n        }\r\n      } catch (error) {\r\n        console.error('获取订单列表失败:', error);\r\n        ElMessage.error('获取订单列表失败');\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    \r\n    async handleButtonClick(order) {\r\n      if (!this.canPerformAction(order)) {\r\n        ElMessage.warning('操作太频繁，请稍后再试');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        let newStatus;\r\n        const currentStatus = parseInt(order.status);\r\n        switch (currentStatus) {\r\n          case 0:  // pending\r\n            newStatus = 1;  // confirmed\r\n            break;\r\n          case 1:  // confirmed\r\n            newStatus = 2;  // completed\r\n            break;\r\n          default:\r\n            ElMessage.error(`当前状态 ${this.statusText[order.status]} 无法进行操作`);\r\n            return;\r\n        }\r\n\r\n        await this.updateOrderStatus(order, newStatus);\r\n        // 操作成功后刷新订单列表\r\n        await this.fetchOrders();\r\n      } catch (error) {\r\n        console.error('操作失败:', error);\r\n        ElMessage.error('操作失败，请重试');\r\n      }\r\n    },\r\n\r\n    canPerformAction(order) {\r\n      const now = Date.now();\r\n      // 如果是第一次操作，或者距离上次操作超过3秒\r\n      if (!order.lastActionTime || now - order.lastActionTime > 3000) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n\r\n    async updateOrderStatus(order, status) {\r\n      try {\r\n        console.log('Updating order status:', { orderId: order.id, status: status });\r\n        await axios.put(\r\n          `${API}/canteen/orders/${order.id}`, \r\n          { status }, \r\n          {\r\n            headers: {\r\n              'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        );\r\n        \r\n        ElMessage.success(`订单状态已更新为${this.statusText[status]}`);\r\n        order.lastActionTime = Date.now(); // 更新最后操作时间\r\n        order.status = status; // 更新本地状态\r\n      } catch (error) {\r\n        console.error('更新订单状态失败:', error);\r\n        ElMessage.error(error.response?.data?.message || '更新订单状态失败，请重试');\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async handleDeleteOrder(order) {\r\n      try {\r\n        if (!confirm('确定要删除这个订单吗？此操作不可撤销。')) {\r\n          return;\r\n        }\r\n        \r\n        await axios.delete(`${API}/canteen/orders/${order.id}`, {\r\n          headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n          }\r\n        });\r\n        \r\n        ElMessage.success('订单已删除');\r\n        // 从列表中移除该订单\r\n        this.orders = this.orders.filter(o => o.id !== order.id);\r\n      } catch (error) {\r\n        console.error('删除订单失败:', error);\r\n        ElMessage.error(error.response?.data?.message || '删除订单失败，请重试');\r\n      }\r\n    },\r\n\r\n    closeDialog() {\r\n      this.showDialog = false;\r\n      this.dialogMessage = '';\r\n    },\r\n\r\n    formatDate(dateString) {\r\n      const date = new Date(dateString);\r\n      return {\r\n        date: date.toLocaleDateString('zh-CN', {\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit'\r\n        }),\r\n        time: date.toLocaleTimeString('zh-CN', {\r\n          hour: '2-digit',\r\n          minute: '2-digit'\r\n        })\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.order-management {\r\n  padding: 16px;\r\n}\r\n\r\nh2 {\r\n  color: #303133;\r\n  margin-bottom: 16px;\r\n  font-size: 24px;\r\n}\r\n\r\n.order-cards {\r\n  display: flex;\r\n  flex-wrap: wrap; /* 允许换行 */\r\n  gap: 16px;\r\n  justify-content: flex-start; /* 所有订单对齐到左边 */\r\n}\r\n\r\n.order-card {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  padding: 16px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n  width: 300px; /* 固定宽度 */\r\n  box-sizing: border-box;\r\n  flex-grow: 1; /* 允许订单卡片在没有足够空间时扩展 */\r\n}\r\n\r\n.order-info {\r\n  margin-top: 16px;\r\n}\r\n\r\n.order-items {\r\n  padding: 8px 0;\r\n}\r\n\r\n.order-item {\r\n  background-color: #f8f9fa;\r\n  padding: 8px;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.item-info {\r\n  display: flex;\r\n  flex-direction: column; /* 垂直排列 */\r\n  gap: 4px; /* 为每个信息项提供间距 */\r\n}\r\n\r\n.item-name {\r\n  font-weight: bold;\r\n  color: #303133;\r\n}\r\n\r\n.item-details {\r\n  font-size: 14px;\r\n  color: #606266;\r\n}\r\n\r\n.item-quantity,\r\n.item-price,\r\n.item-total {\r\n  margin-bottom: 4px; /* 让数量、单价和小计之间有间距 */\r\n}\r\n\r\n.price {\r\n  font-weight: bold;\r\n  margin-top: 12px;\r\n}\r\n\r\n.status-tag {\r\n  padding: 2px 6px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n}\r\n\r\n.time-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 8px;\r\n}\r\n\r\n.time {\r\n  font-size: 14px;\r\n  color: #909399;\r\n}\r\n\r\n.order-actions {\r\n  margin-top: 12px;\r\n  display: flex;\r\n  gap: 8px;\r\n  flex-direction: column;\r\n}\r\n\r\nbutton {\r\n  padding: 8px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: 0.3s;\r\n  margin: 4px 0;\r\n  font-size: 14px;\r\n  width: 100%;\r\n}\r\n\r\n.btn-confirm {\r\n  background-color: #67C23A;\r\n  color: white;\r\n}\r\n\r\n.btn-complete {\r\n  background-color: #409EFF;\r\n  color: white;\r\n}\r\n\r\n.btn-delete {\r\n  background-color: #F56C6C;\r\n  color: white;\r\n}\r\n\r\n.empty-message {\r\n  text-align: center;\r\n  color: #909399;\r\n  margin-top: 40px;\r\n}\r\n\r\n/* Mobile Optimization */\r\n@media screen and (max-width: 768px) {\r\n  table {\r\n    display: none; /* 隐藏桌面端表格 */\r\n  }\r\n\r\n  .order-cards {\r\n    flex-direction: column; /* 垂直排列 */\r\n    align-items: flex-start; /* 所有订单左对齐 */\r\n    gap: 16px; /* 提供一定的间距 */\r\n  }\r\n\r\n  .order-card {\r\n    width: 100%; /* 在小屏幕上每个订单卡片宽度占满父容器 */\r\n    flex-grow: 0; /* 不扩展 */\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  .order-info {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .user-info {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 8px; /* 用户信息之间有间距 */\r\n  }\r\n\r\n  .email {\r\n    font-size: 14px;\r\n    color: #909399;\r\n  }\r\n\r\n  .item-info {\r\n    gap: 6px;\r\n  }\r\n\r\n  .item-name {\r\n    font-size: 16px;\r\n    color: #303133;\r\n  }\r\n\r\n  .item-details {\r\n    font-size: 12px;\r\n    color: #606266;\r\n  }\r\n\r\n  .item-quantity,\r\n  .item-price,\r\n  .item-total {\r\n    font-size: 13px;\r\n  }\r\n\r\n  .btn-confirm,\r\n  .btn-complete,\r\n  .btn-delete {\r\n    width: 100%;\r\n    padding: 12px;\r\n  }\r\n\r\n  .empty-message {\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n/* Large screen optimization (above 768px) */\r\n@media screen and (min-width: 769px) {\r\n  .order-cards {\r\n    flex-wrap: wrap;\r\n    gap: 16px;\r\n  }\r\n\r\n  .order-card {\r\n    width: 300px; /* 固定宽度 */\r\n    flex-grow: 1; /* 自动填充空间 */\r\n  }\r\n}\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}