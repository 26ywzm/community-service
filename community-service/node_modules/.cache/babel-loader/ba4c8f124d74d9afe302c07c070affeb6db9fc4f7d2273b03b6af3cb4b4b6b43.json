{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"news-detail\"\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, _toDisplayString($data.news.title), 1 /* TEXT */), $data.news.image_url ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $data.news.image_url,\n    alt: \"新闻图片\"\n  }, null, 8 /* PROPS */, _hoisted_2)) : _createCommentVNode(\"v-if\", true), $data.news.content ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, _toDisplayString($data.news.content), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 只有在有内容时才显示 \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))\n  }, \"返回\")]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$data","news","title","image_url","src","alt","_hoisted_2","_createCommentVNode","content","_hoisted_3","onClick","_cache","args","$options","goBack"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\NewsDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"news-detail\">\r\n    <h2>{{ news.title }}</h2>\r\n    <img :src=\"news.image_url\" alt=\"新闻图片\" v-if=\"news.image_url\" />\r\n    <p v-if=\"news.content\">{{ news.content }}</p> <!-- 只有在有内容时才显示 -->\r\n    <button @click=\"goBack\">返回</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      news: {}, // 新闻详情数据\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchNewsDetail();\r\n  },\r\n  methods: {\r\n    async fetchNewsDetail() {\r\n      const newsId = this.$route.params.id; // 从路由参数获取新闻 ID\r\n      try {\r\n        const response = await axios.get(`http://localhost:3000/api/auth/articles/${newsId}`); // 更新为新的 API 路径\r\n        this.news = response.data; // 获取新闻详情数据\r\n        console.log('文章详情数据:', response.data); // 调试输出\r\n      } catch (error) {\r\n        console.error('获取新闻详情失败:', error);\r\n      }\r\n    },\r\n    goBack() {\r\n      this.$router.push('/'); // 返回首页\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.news-detail {\r\n  padding: 20px;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAa;mBAD1B;;EAAAC,GAAA;AAAA;;uBACEC,mBAAA,CAKM,OALNC,UAKM,GAJJC,mBAAA,CAAyB,YAAAC,gBAAA,CAAlBC,KAAA,CAAAC,IAAI,CAACC,KAAK,kBAC2BF,KAAA,CAAAC,IAAI,CAACE,SAAS,I,cAA1DP,mBAAA,CAA8D;IAHlED,GAAA;IAGUS,GAAG,EAAEJ,KAAA,CAAAC,IAAI,CAACE,SAAS;IAAEE,GAAG,EAAC;0BAHnCC,UAAA,KAAAC,mBAAA,gBAIaP,KAAA,CAAAC,IAAI,CAACO,OAAO,I,cAArBZ,mBAAA,CAA6C,KAJjDa,UAAA,EAAAV,gBAAA,CAI8BC,KAAA,CAAAC,IAAI,CAACO,OAAO,oBAJ1CD,mBAAA,gBAIkDA,mBAAA,gBAAmB,EACjET,mBAAA,CAAmC;IAA1BY,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,MAAA,IAAAD,QAAA,CAAAC,MAAA,IAAAF,IAAA,CAAM;KAAE,IAAE,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}