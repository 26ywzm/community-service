{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { remove } from \"./util.mjs\";\nconst defaultOptions = {\n  selector: \"img\"\n};\nclass LazyContainer {\n  constructor({\n    el,\n    binding,\n    vnode,\n    lazy\n  }) {\n    this.el = null;\n    this.vnode = vnode;\n    this.binding = binding;\n    this.options = {};\n    this.lazy = lazy;\n    this.queue = [];\n    this.update({\n      el,\n      binding\n    });\n  }\n  update({\n    el,\n    binding\n  }) {\n    this.el = el;\n    this.options = Object.assign({}, defaultOptions, binding.value);\n    const imgs = this.getImgs();\n    imgs.forEach(el2 => {\n      this.lazy.add(el2, Object.assign({}, this.binding, {\n        value: {\n          src: \"dataset\" in el2 ? el2.dataset.src : el2.getAttribute(\"data-src\"),\n          error: (\"dataset\" in el2 ? el2.dataset.error : el2.getAttribute(\"data-error\")) || this.options.error,\n          loading: (\"dataset\" in el2 ? el2.dataset.loading : el2.getAttribute(\"data-loading\")) || this.options.loading\n        }\n      }), this.vnode);\n    });\n  }\n  getImgs() {\n    return Array.from(this.el.querySelectorAll(this.options.selector));\n  }\n  clear() {\n    const imgs = this.getImgs();\n    imgs.forEach(el => this.lazy.remove(el));\n    this.vnode = null;\n    this.binding = null;\n    this.lazy = null;\n  }\n}\nclass LazyContainerManager {\n  constructor({\n    lazy\n  }) {\n    this.lazy = lazy;\n    this.queue = [];\n  }\n  bind(el, binding, vnode) {\n    const container = new LazyContainer({\n      el,\n      binding,\n      vnode,\n      lazy: this.lazy\n    });\n    this.queue.push(container);\n  }\n  update(el, binding, vnode) {\n    const container = this.queue.find(item => item.el === el);\n    if (!container) return;\n    container.update({\n      el,\n      binding,\n      vnode\n    });\n  }\n  unbind(el) {\n    const container = this.queue.find(item => item.el === el);\n    if (!container) return;\n    container.clear();\n    remove(this.queue, container);\n  }\n}\nexport { LazyContainerManager as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}