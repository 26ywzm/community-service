{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\n\n// 配置API基础URL\nconst API_BASE = process.env.VUE_APP_BASE_URL;\nexport default {\n  data() {\n    return {\n      users: [],\n      // 用户列表\n      selectedUser: null,\n      // 当前选中的用户\n      chatMessages: [],\n      // 当前用户的留言列表\n      selectedMessage: null,\n      // 当前选中要回复的留言\n      adminReply: '',\n      // 管理员回复内容\n      loading: false,\n      // 加载状态\n      message: {\n        show: false,\n        content: '',\n        type: ''\n      } // 消息提示\n    };\n  },\n  methods: {\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        console.log('正在获取用户列表...');\n        const response = await axios.get(`${API_BASE}/api/canteen/users`, {\n          headers\n        });\n        console.log('获取到的用户列表:', response.data);\n        this.users = response.data || [];\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        alert('获取用户列表失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 选择用户，查看留言记录\n    selectUser(user) {\n      console.log('选择用户:', user);\n      this.selectedUser = user;\n      this.selectedMessage = null; // 清空选中的消息\n      this.adminReply = ''; // 清空回复框\n      if (user) {\n        this.fetchUserMessages(user.id);\n      } else {\n        this.chatMessages = [];\n      }\n    },\n    // 获取用户留言记录\n    async fetchUserMessages(userId) {\n      if (!userId) {\n        console.log('未选择用户');\n        return;\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        console.log('正在获取用户留言:', userId);\n        const response = await axios.get(`${API_BASE}/api/canteen/feedback/${userId}`, {\n          headers\n        });\n        console.log('获取到的留言:', response.data);\n        this.chatMessages = response.data.map(msg => ({\n          ...msg,\n          isAdmin: msg.admin_reply !== null\n        }));\n      } catch (error) {\n        console.error('获取留言记录失败:', error);\n        alert('获取留言记录失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 选择要回复的留言\n    selectMessage(message) {\n      this.selectedMessage = message;\n      this.adminReply = ''; // 清空回复内容\n    },\n    // 发送消息\n    async sendMessage() {\n      if (!this.adminReply.trim()) {\n        alert('请输入回复内容');\n        return;\n      }\n      if (!this.selectedUser && !this.selectedMessage) {\n        alert('请选择一个用户或留言进行回复');\n        return;\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        if (this.selectedMessage) {\n          // 回复特定留言\n          if (!this.selectedMessage.id) {\n            alert('无效的留言ID');\n            return;\n          }\n          console.log('正在回复留言:', {\n            id: this.selectedMessage.id,\n            content: this.adminReply\n          });\n          const response = await axios.put(`${API_BASE}/api/canteen/feedback/${this.selectedMessage.id}/reply`, {\n            admin_reply: this.adminReply\n          }, {\n            headers\n          });\n          console.log('回复响应:', response.data);\n          if (response.data.message === '回复成功') {\n            alert('回复成功');\n            // 刷新消息列表\n            if (this.selectedUser) {\n              await this.fetchUserMessages(this.selectedUser.id);\n            }\n            this.adminReply = '';\n            this.selectedMessage = null;\n          } else {\n            throw new Error(response.data.message || '回复失败');\n          }\n        } else if (this.selectedUser) {\n          // 发送新消息\n          if (!this.selectedUser.id) {\n            alert('无效的用户ID');\n            return;\n          }\n          console.log('正在发送新消息:', {\n            user_id: this.selectedUser.id,\n            message: this.adminReply\n          });\n          const response = await axios.post(`${API_BASE}/api/canteen/feedback/admin-message`, {\n            user_id: this.selectedUser.id,\n            message: this.adminReply\n          }, {\n            headers\n          });\n          console.log('发送响应:', response.data);\n          if (response.data.message) {\n            alert(response.data.message);\n            // 刷新消息列表\n            await this.fetchUserMessages(this.selectedUser.id);\n            this.adminReply = '';\n          } else {\n            throw new Error('发送失败');\n          }\n        }\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        const errorMessage = error.response?.data?.message || error.message;\n        console.error('错误详情:', errorMessage);\n        alert('发送消息失败：' + errorMessage);\n      }\n    },\n    // 取消回复\n    cancelReply() {\n      this.selectedMessage = null;\n      this.adminReply = '';\n    },\n    // 删除留言\n    async deleteMessage(message) {\n      if (!confirm('确定要删除这条留言吗？')) return;\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        console.log('正在删除留言:', message.id);\n        await axios.delete(`${API_BASE}/api/canteen/feedback/${message.id}`, {\n          headers\n        });\n        alert('留言已删除');\n        await this.fetchUserMessages(this.selectedUser.id);\n      } catch (error) {\n        console.error('删除留言失败:', error);\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 删除整个用户的对话\n    async deleteUserConversation() {\n      if (!confirm('确定要删除与该用户的所有留言吗？')) {\n        return;\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n\n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        await axios.delete(`${API_BASE}/api/canteen/feedback`, {\n          data: {\n            user_id: this.selectedUser.id\n          },\n          headers\n        });\n        alert('该用户的留言已删除');\n        this.selectedUser = null; // 清空选中的用户\n        this.chatMessages = []; // 清空聊天记录\n      } catch (error) {\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n    // 显示消息提示\n    showMessage(content, type) {\n      this.message.content = content;\n      this.message.type = type;\n      this.message.show = true;\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      if (!timestamp) return '';\n      const date = new Date(timestamp);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  },\n  async mounted() {\n    // 检查用户角色\n    const userRole = localStorage.getItem('userRole');\n    if (userRole !== 'admin' && userRole !== 'super_admin') {\n      this.$router.push('/');\n      return;\n    }\n\n    // 获取用户列表\n    this.loading = true;\n    try {\n      await this.fetchUsers();\n    } catch (error) {\n      console.error('初始化失败:', error);\n    } finally {\n      this.loading = false;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE","process","env","VUE_APP_BASE_URL","data","users","selectedUser","chatMessages","selectedMessage","adminReply","loading","message","show","content","type","methods","fetchUsers","token","localStorage","getItem","userRole","$router","push","headers","console","log","response","get","error","alert","selectUser","user","fetchUserMessages","id","userId","map","msg","isAdmin","admin_reply","selectMessage","sendMessage","trim","put","Error","user_id","post","errorMessage","cancelReply","deleteMessage","confirm","delete","deleteUserConversation","showMessage","setTimeout","formatTimestamp","timestamp","date","Date","toLocaleString","year","month","day","hour","minute","mounted"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\ManageFeedback.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 用户列表 -->\n    <div class=\"user-list\">\n      <h3>用户列表</h3>\n      <div v-if=\"loading\" class=\"loading\">\n        加载中...\n      </div>\n      <div v-else-if=\"users.length === 0\" class=\"no-users\">\n        暂无用户数据\n      </div>\n      <ul v-else>\n        <li v-for=\"user in users\" \n            :key=\"user.id\" \n            @click=\"selectUser(user)\"\n            :class=\"{ active: selectedUser && selectedUser.id === user.id }\">\n          <span class=\"username\">{{ user.username || user.email || '未命名用户' }}</span>\n          <span class=\"message-count\" v-if=\"user.messageCount\">\n            {{ user.messageCount }}\n          </span>\n        </li>\n      </ul>\n    </div>\n\n    <!-- 留言记录 -->\n    <div class=\"chat-box\">\n      <div v-if=\"!selectedUser\" class=\"no-selection\">\n        请选择一个用户查看留言记录\n      </div>\n      <template v-else>\n        <h3>与 {{ selectedUser.username || selectedUser.email || '未命名用户' }} 的留言记录</h3>\n        <div class=\"messages\">\n          <div v-if=\"loading\" class=\"loading\">\n            加载中...\n          </div>\n          <div v-else-if=\"chatMessages.length === 0\" class=\"no-messages\">\n            暂无留言记录\n          </div>\n          <template v-else>\n            <div v-for=\"message in chatMessages\" \n                 :key=\"message.id\" \n                 :class=\"['message', message.isAdmin ? 'admin' : 'user']\">\n              <div class=\"message-header\">\n                <span class=\"username\">{{ message.username }}</span>\n                <div class=\"message-actions\">\n                  <button class=\"action-btn delete\" @click=\"deleteMessage(message)\">\n                    删除\n                  </button>\n                  <button v-if=\"!message.admin_reply\" \n                          class=\"action-btn reply\" \n                          @click=\"selectMessage(message)\">\n                    回复\n                  </button>\n                </div>\n              </div>\n              <div class=\"message-content\">{{ message.message }}</div>\n              <div class=\"message-reply\" v-if=\"message.admin_reply\">\n                <strong>管理员回复：</strong> {{ message.admin_reply }}\n              </div>\n              <div class=\"timestamp\">{{ formatTimestamp(message.created_at) }}</div>\n            </div>\n          </template>\n        </div>\n\n        <!-- 管理员回复区域 -->\n        <div class=\"reply-area\">\n          <div v-if=\"selectedMessage\" class=\"selected-message\">\n            正在回复: {{ selectedMessage.message }}\n            <button @click=\"cancelReply\" class=\"cancel-btn\">取消回复</button>\n          </div>\n          <div class=\"input-area\">\n            <textarea v-model=\"adminReply\" \n                      :placeholder=\"selectedMessage ? '输入回复...' : '发送新消息给该用户...'\" \n                      rows=\"3\"></textarea>\n            <button @click=\"sendMessage\" \n                    class=\"send-btn\" \n                    :disabled=\"loading || !adminReply.trim()\">\n              {{ selectedMessage ? '发送回复' : '发送消息' }}\n            </button>\n          </div>\n        </div>\n      </template>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';\n\n// 配置API基础URL\nconst API_BASE = process.env.VUE_APP_BASE_URL;\n\nexport default {\n  data() {\n    return {\n      users: [],           // 用户列表\n      selectedUser: null,  // 当前选中的用户\n      chatMessages: [],    // 当前用户的留言列表\n      selectedMessage: null, // 当前选中要回复的留言\n      adminReply: '',      // 管理员回复内容\n      loading: false,      // 加载状态\n      message: { show: false, content: '', type: '' }  // 消息提示\n    };\n  },\n  methods: {\n    // 获取用户列表\n    async fetchUsers() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        console.log('正在获取用户列表...');\n        const response = await axios.get(`${API_BASE}/api/canteen/users`, { headers });\n        console.log('获取到的用户列表:', response.data);\n        this.users = response.data || [];\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n        alert('获取用户列表失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 选择用户，查看留言记录\n    selectUser(user) {\n      console.log('选择用户:', user);\n      this.selectedUser = user;\n      this.selectedMessage = null;  // 清空选中的消息\n      this.adminReply = '';        // 清空回复框\n      if (user) {\n        this.fetchUserMessages(user.id);\n      } else {\n        this.chatMessages = [];\n      }\n    },\n\n    // 获取用户留言记录\n    async fetchUserMessages(userId) {\n      if (!userId) {\n        console.log('未选择用户');\n        return;\n      }\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        console.log('正在获取用户留言:', userId);\n        const response = await axios.get(`${API_BASE}/api/canteen/feedback/${userId}`, { headers });\n        console.log('获取到的留言:', response.data);\n        this.chatMessages = response.data.map(msg => ({\n          ...msg,\n          isAdmin: msg.admin_reply !== null\n        }));\n      } catch (error) {\n        console.error('获取留言记录失败:', error);\n        alert('获取留言记录失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 选择要回复的留言\n    selectMessage(message) {\n      this.selectedMessage = message;\n      this.adminReply = '';  // 清空回复内容\n    },\n\n    // 发送消息\n    async sendMessage() {\n      if (!this.adminReply.trim()) {\n        alert('请输入回复内容');\n        return;\n      }\n\n      if (!this.selectedUser && !this.selectedMessage) {\n        alert('请选择一个用户或留言进行回复');\n        return;\n      }\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        \n        if (this.selectedMessage) {\n          // 回复特定留言\n          if (!this.selectedMessage.id) {\n            alert('无效的留言ID');\n            return;\n          }\n\n          console.log('正在回复留言:', {\n            id: this.selectedMessage.id,\n            content: this.adminReply\n          });\n\n          const response = await axios.put(\n            `${API_BASE}/api/canteen/feedback/${this.selectedMessage.id}/reply`, \n            { admin_reply: this.adminReply },\n            { headers }\n          );\n\n          console.log('回复响应:', response.data);\n\n          if (response.data.message === '回复成功') {\n            alert('回复成功');\n            // 刷新消息列表\n            if (this.selectedUser) {\n              await this.fetchUserMessages(this.selectedUser.id);\n            }\n            this.adminReply = '';\n            this.selectedMessage = null;\n          } else {\n            throw new Error(response.data.message || '回复失败');\n          }\n        } else if (this.selectedUser) {\n          // 发送新消息\n          if (!this.selectedUser.id) {\n            alert('无效的用户ID');\n            return;\n          }\n\n          console.log('正在发送新消息:', {\n            user_id: this.selectedUser.id,\n            message: this.adminReply\n          });\n\n          const response = await axios.post(\n            `${API_BASE}/api/canteen/feedback/admin-message`,\n            {\n              user_id: this.selectedUser.id,\n              message: this.adminReply\n            },\n            { headers }\n          );\n\n          console.log('发送响应:', response.data);\n\n          if (response.data.message) {\n            alert(response.data.message);\n            // 刷新消息列表\n            await this.fetchUserMessages(this.selectedUser.id);\n            this.adminReply = '';\n          } else {\n            throw new Error('发送失败');\n          }\n        }\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        const errorMessage = error.response?.data?.message || error.message;\n        console.error('错误详情:', errorMessage);\n        alert('发送消息失败：' + errorMessage);\n      }\n    },\n\n    // 取消回复\n    cancelReply() {\n      this.selectedMessage = null;\n      this.adminReply = '';\n    },\n\n    // 删除留言\n    async deleteMessage(message) {\n      if (!confirm('确定要删除这条留言吗？')) return;\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        console.log('正在删除留言:', message.id);\n        await axios.delete(`${API_BASE}/api/canteen/feedback/${message.id}`, { headers });\n        alert('留言已删除');\n        await this.fetchUserMessages(this.selectedUser.id);\n      } catch (error) {\n        console.error('删除留言失败:', error);\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 删除整个用户的对话\n    async deleteUserConversation() {\n      if (!confirm('确定要删除与该用户的所有留言吗？')) {\n        return;\n      }\n\n      try {\n        const token = localStorage.getItem('authToken');\n        const userRole = localStorage.getItem('userRole');\n        \n        // 验证管理员权限\n        if (userRole !== 'admin' && userRole !== 'super_admin') {\n          this.$router.push('/');\n          return;\n        }\n\n        const headers = { 'Authorization': `Bearer ${token}` };\n        await axios.delete(`${API_BASE}/api/canteen/feedback`, {\n          data: { user_id: this.selectedUser.id },\n          headers\n        });\n\n        alert('该用户的留言已删除');\n        this.selectedUser = null;  // 清空选中的用户\n        this.chatMessages = [];  // 清空聊天记录\n      } catch (error) {\n        alert('删除留言失败：' + (error.response?.data?.message || error.message));\n      }\n    },\n\n    // 显示消息提示\n    showMessage(content, type) {\n      this.message.content = content;\n      this.message.type = type;\n      this.message.show = true;\n\n      setTimeout(() => {\n        this.message.show = false;\n      }, 3000);\n    },\n\n    // 格式化时间戳\n    formatTimestamp(timestamp) {\n      if (!timestamp) return '';\n      const date = new Date(timestamp);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  },\n\n  async mounted() {\n    // 检查用户角色\n    const userRole = localStorage.getItem('userRole');\n    if (userRole !== 'admin' && userRole !== 'super_admin') {\n      this.$router.push('/');\n      return;\n    }\n\n    // 获取用户列表\n    this.loading = true;\n    try {\n      await this.fetchUsers();\n    } catch (error) {\n      console.error('初始化失败:', error);\n    } finally {\n      this.loading = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  height: 100%;\n  padding: 20px;\n  gap: 20px;\n}\n\n.user-list {\n  width: 250px;\n  border-right: 1px solid #ddd;\n  padding-right: 20px;\n}\n\n.user-list h3 {\n  margin-bottom: 15px;\n  color: #333;\n}\n\n.user-list ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.user-list li {\n  padding: 10px;\n  margin-bottom: 5px;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.user-list li:hover {\n  background-color: #f5f5f5;\n}\n\n.user-list li.active {\n  background-color: #e3f2fd;\n  color: #1976d2;\n}\n\n.message-count {\n  font-size: 12px;\n  color: #666;\n}\n\n.no-users {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n\n.chat-box {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.no-selection {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  margin-top: 20px;\n}\n\n.messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 10px;\n}\n\n.message {\n  margin-bottom: 15px;\n  padding: 10px;\n  border-radius: 4px;\n  background-color: #f5f5f5;\n}\n\n.message.admin {\n  background-color: #e3f2fd;\n}\n\n.message-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.username {\n  font-weight: bold;\n  color: #333;\n}\n\n.message-content {\n  margin: 10px 0;\n}\n\n.message-reply {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #fff;\n  border-radius: 4px;\n}\n\n.timestamp {\n  font-size: 12px;\n  color: #666;\n  text-align: right;\n}\n\n.reply-area {\n  margin-top: 20px;\n  padding-top: 20px;\n  border-top: 1px solid #ddd;\n}\n\n.input-area {\n  display: flex;\n  gap: 10px;\n}\n\ntextarea {\n  flex: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  resize: vertical;\n}\n\n.action-btn {\n  padding: 5px 10px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 12px;\n  transition: background-color 0.2s;\n}\n\n.action-btn.delete {\n  background-color: #ef5350;\n  color: white;\n}\n\n.action-btn.reply {\n  background-color: #66bb6a;\n  color: white;\n}\n\n.action-btn:hover {\n  opacity: 0.9;\n}\n\n.selected-message {\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.cancel-btn {\n  padding: 5px 10px;\n  background-color: #9e9e9e;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.send-btn {\n  padding: 10px 20px;\n  background-color: #1976d2;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.send-btn:hover {\n  background-color: #1565c0;\n}\n\n.no-messages {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n\n.loading {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}