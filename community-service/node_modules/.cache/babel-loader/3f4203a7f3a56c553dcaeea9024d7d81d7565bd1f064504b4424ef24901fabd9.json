{"ast":null,"code":"import axios from \"axios\";\nconst API = \"http://your-api-url\"; // 替换为实际 API 地址\n\nexport default {\n  data() {\n    return {\n      users: [],\n      // 普通用户列表\n      admins: [],\n      // 管理员列表\n      isSuperAdmin: true // 判断是否为超级管理员，实际根据逻辑动态设置\n    };\n  },\n  methods: {\n    // 获取用户列表\n    async fetchUsers() {\n      const response = await axios.get(`${API}/users`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('authToken')}`\n        }\n      });\n      this.users = response.data;\n    },\n    // 获取管理员列表\n    async fetchAdmins() {\n      const response = await axios.get(`${API}/admins`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('authToken')}`\n        }\n      });\n      this.admins = response.data;\n    },\n    // 提升为管理员\n    async promoteUser(userId) {\n      if (this.isSuperAdmin) {\n        await axios.post(`${API}/promote/${userId}`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        // 刷新列表\n        this.fetchUsers();\n        this.fetchAdmins();\n      }\n    },\n    // 降级为普通用户\n    async demoteUser(adminId) {\n      if (this.isSuperAdmin) {\n        await axios.post(`${API}/demote/${adminId}`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        // 刷新列表\n        this.fetchUsers();\n        this.fetchAdmins();\n      }\n    }\n  },\n  mounted() {\n    // 页面加载时获取用户和管理员列表\n    this.fetchUsers();\n    this.fetchAdmins();\n  }\n};","map":{"version":3,"names":["axios","API","data","users","admins","isSuperAdmin","methods","fetchUsers","response","get","headers","Authorization","localStorage","getItem","fetchAdmins","promoteUser","userId","post","demoteUser","adminId","mounted"],"sources":["C:\\Users\\拯救者\\Desktop\\text\\community-service\\src\\components\\DiscoverPage.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 显示用户和管理员列表 -->\n    <div>\n      <h3>用户列表</h3>\n      <ul>\n        <li v-for=\"user in users\" :key=\"user.id\">\n          {{ user.name }}\n          <!-- 提升为管理员按钮 -->\n          <button v-if=\"isSuperAdmin\" @click=\"promoteUser(user.id)\">提升为管理员</button>\n        </li>\n      </ul>\n    </div>\n    <div>\n      <h3>管理员列表</h3>\n      <ul>\n        <li v-for=\"admin in admins\" :key=\"admin.id\">\n          {{ admin.name }}\n          <!-- 降级为普通用户按钮 -->\n          <button v-if=\"isSuperAdmin\" @click=\"demoteUser(admin.id)\">降级为普通用户</button>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nconst API = \"http://your-api-url\"; // 替换为实际 API 地址\n\nexport default {\n  data() {\n    return {\n      users: [], // 普通用户列表\n      admins: [], // 管理员列表\n      isSuperAdmin: true, // 判断是否为超级管理员，实际根据逻辑动态设置\n    };\n  },\n  methods: {\n    // 获取用户列表\n    async fetchUsers() {\n      const response = await axios.get(`${API}/users`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('authToken')}`,\n        },\n      });\n      this.users = response.data;\n    },\n\n    // 获取管理员列表\n    async fetchAdmins() {\n      const response = await axios.get(`${API}/admins`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('authToken')}`,\n        },\n      });\n      this.admins = response.data;\n    },\n\n    // 提升为管理员\n    async promoteUser(userId) {\n      if (this.isSuperAdmin) {\n        await axios.post(`${API}/promote/${userId}`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\n          },\n        });\n        // 刷新列表\n        this.fetchUsers();\n        this.fetchAdmins();\n      }\n    },\n\n    // 降级为普通用户\n    async demoteUser(adminId) {\n      if (this.isSuperAdmin) {\n        await axios.post(`${API}/demote/${adminId}`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\n          },\n        });\n        // 刷新列表\n        this.fetchUsers();\n        this.fetchAdmins();\n      }\n    },\n  },\n  mounted() {\n    // 页面加载时获取用户和管理员列表\n    this.fetchUsers();\n    this.fetchAdmins();\n  },\n};\n</script>\n\n<style scoped>\n/* 添加样式以美化界面 */\nh3 {\n  color: #333;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  margin: 5px 0;\n}\n\nbutton {\n  margin-left: 10px;\n  padding: 5px 10px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":"AA2BA,OAAOA,KAAI,MAAO,OAAO;AACzB,MAAMC,GAAE,GAAI,qBAAqB,EAAE;;AAEnC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MAAE;MACXC,MAAM,EAAE,EAAE;MAAE;MACZC,YAAY,EAAE,IAAI,CAAE;IACtB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,UAAUA,CAAA,EAAG;MACjB,MAAMC,QAAO,GAAI,MAAMR,KAAK,CAACS,GAAG,CAAC,GAAGR,GAAG,QAAQ,EAAE;QAC/CS,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC5D;MACF,CAAC,CAAC;MACF,IAAI,CAACV,KAAI,GAAIK,QAAQ,CAACN,IAAI;IAC5B,CAAC;IAED;IACA,MAAMY,WAAWA,CAAA,EAAG;MAClB,MAAMN,QAAO,GAAI,MAAMR,KAAK,CAACS,GAAG,CAAC,GAAGR,GAAG,SAAS,EAAE;QAChDS,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC5D;MACF,CAAC,CAAC;MACF,IAAI,CAACT,MAAK,GAAII,QAAQ,CAACN,IAAI;IAC7B,CAAC;IAED;IACA,MAAMa,WAAWA,CAACC,MAAM,EAAE;MACxB,IAAI,IAAI,CAACX,YAAY,EAAE;QACrB,MAAML,KAAK,CAACiB,IAAI,CAAC,GAAGhB,GAAG,YAAYe,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE;UAC/CN,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;UAC5D;QACF,CAAC,CAAC;QACF;QACA,IAAI,CAACN,UAAU,CAAC,CAAC;QACjB,IAAI,CAACO,WAAW,CAAC,CAAC;MACpB;IACF,CAAC;IAED;IACA,MAAMI,UAAUA,CAACC,OAAO,EAAE;MACxB,IAAI,IAAI,CAACd,YAAY,EAAE;QACrB,MAAML,KAAK,CAACiB,IAAI,CAAC,GAAGhB,GAAG,WAAWkB,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE;UAC/CT,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;UAC5D;QACF,CAAC,CAAC;QACF;QACA,IAAI,CAACN,UAAU,CAAC,CAAC;QACjB,IAAI,CAACO,WAAW,CAAC,CAAC;MACpB;IACF;EACF,CAAC;EACDM,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACb,UAAU,CAAC,CAAC;IACjB,IAAI,CAACO,WAAW,CAAC,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}