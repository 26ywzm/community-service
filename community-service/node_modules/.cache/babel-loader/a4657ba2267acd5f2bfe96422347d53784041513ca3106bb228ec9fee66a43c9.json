{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { handleApiError } from '../utils/errorHandler';\nconst API = process.env.VUE_APP_API_URL;\nexport default {\n  name: 'UserProfile',\n  data() {\n    return {\n      isLoggedIn: !!localStorage.getItem('authToken'),\n      userInfo: {\n        username: '',\n        email: '',\n        role: '',\n        balance: 0\n      },\n      editMode: false,\n      currentPassword: '',\n      newPassword: '',\n      file: null,\n      loading: false,\n      loadError: '',\n      updateSuccess: ''\n    };\n  },\n  async created() {\n    // 从 localStorage 获取基本信息\n    const token = localStorage.getItem('authToken');\n    const role = localStorage.getItem('userRole');\n    const username = localStorage.getItem('username');\n    const email = localStorage.getItem('email');\n    if (!token) {\n      this.isLoggedIn = false;\n    } else {\n      // 立即设置基本信息\n      this.userInfo = {\n        username: username || '',\n        email: email || '',\n        role: role || ''\n      };\n\n      // 异步加载完整用户信息\n      try {\n        await this.fetchUserProfile();\n      } catch (error) {\n        console.error('Failed to fetch user profile:', error);\n        if (error.response && error.response.status === 401) {\n          this.handleUnauthorized();\n        }\n      }\n    }\n  },\n  methods: {\n    formatRole(role) {\n      const roleMap = {\n        'super_admin': '超级管理员',\n        'admin': '管理员',\n        'user': '普通用户'\n      };\n      return roleMap[role] || role;\n    },\n    async retryLoad() {\n      this.loadError = '';\n      await this.fetchUserProfile();\n    },\n    async fetchUserProfile() {\n      this.loading = true;\n      this.loadError = '';\n      try {\n        const token = localStorage.getItem('authToken');\n        if (!token) {\n          console.warn('No auth token found, using local storage data');\n          this.useLocalStorageData();\n          return;\n        }\n        const requestConfig = {\n          method: 'get',\n          url: `${API}/me`,\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        };\n        const response = await axios(requestConfig);\n        // console.log('Profile response:', {\n        //   status: response.status,\n        //   data: response.data\n        // });\n\n        if (response.data && response.data.user) {\n          this.userInfo = response.data.user;\n        } else if (response.data) {\n          this.userInfo = response.data;\n        } else {\n          throw new Error('Invalid response format');\n        }\n      } catch (error) {\n        console.error('Error fetching user profile:', error);\n        if (error.response) {\n          if (error.response.status === 401) {\n            this.handleUnauthorized();\n            return;\n          }\n          this.loadError = `加载失败: ${error.response.data.message || '服务器错误'}`;\n        } else {\n          this.loadError = '网络错误，请检查网络连接';\n        }\n        this.useLocalStorageData();\n      } finally {\n        this.loading = false;\n      }\n    },\n    useLocalStorageData() {\n      this.userInfo = {\n        username: localStorage.getItem('username') || '',\n        email: localStorage.getItem('email') || '',\n        role: localStorage.getItem('userRole') || ''\n      };\n    },\n    handleUnauthorized() {\n      // 清除所有认证信息\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('username');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('email');\n      this.isLoggedIn = false;\n    },\n    async updateProfile() {\n      this.loading = true;\n      this.updateSuccess = '';\n      try {\n        const formData = new FormData();\n        formData.append('username', this.userInfo.username);\n        formData.append('email', this.userInfo.email);\n        if (this.currentPassword) {\n          formData.append('currentPassword', this.currentPassword);\n          if (this.newPassword) {\n            formData.append('newPassword', this.newPassword);\n          }\n        }\n        if (this.file) {\n          formData.append('avatar', this.file);\n        }\n        await axios.put(`${API}/me`, formData, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        this.updateSuccess = '个人信息更新成功！';\n        this.editMode = false;\n        this.currentPassword = '';\n        this.newPassword = '';\n        this.file = null;\n        await this.fetchUserProfile();\n      } catch (error) {\n        handleApiError(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    handleFileUpload(event) {\n      this.file = event.target.files[0];\n    },\n    goToLogin() {\n      this.$router.push('/login');\n    },\n    goToRegister() {\n      this.$router.push('/register');\n    },\n    async logout() {\n      // 清除所有本地存储\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('username');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('email');\n\n      // 可选：完全清除所有本地存储\n      // localStorage.clear();\n\n      // 重定向到登录页\n      await this.$router.push('/login');\n\n      // 提示用户\n      alert('已成功退出登录');\n    },\n    cancelEdit() {\n      this.editMode = false;\n      this.currentPassword = '';\n      this.newPassword = '';\n      this.file = null;\n      this.fetchUserProfile();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}