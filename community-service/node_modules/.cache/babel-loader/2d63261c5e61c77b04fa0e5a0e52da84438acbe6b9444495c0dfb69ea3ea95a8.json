{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport { adminAuth } from '../mixins/adminAuth';\nconst API = process.env.VUE_APP_API_URL;\nexport default {\n  name: 'ArticleEditor',\n  mixins: [adminAuth],\n  data() {\n    return {\n      title: '',\n      content: '',\n      imageUrl: '',\n      category: 'newsList',\n      imageFile: null,\n      editingArticleId: null,\n      articles: [],\n      imageCache: new Map() // 添加图片缓存\n    };\n  },\n  methods: {\n    async fetchArticles(category) {\n      if (!this.checkAdminAuth()) return;\n      try {\n        const token = localStorage.getItem('authToken');\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        const response = await axios.get(`${API}/articles${category ? `?category=${category}` : ''}`, {\n          headers\n        });\n        this.articles = response.data;\n        // 预加载所有图片\n        for (const article of this.articles) {\n          await this.loadImage(article);\n        }\n      } catch (error) {\n        console.error('获取文章失败:', error);\n      }\n    },\n    async loadArticles(category) {\n      this.category = category; // 更新当前类别\n      await this.fetchArticles(category); // 获取对应类别的文章\n    },\n    handleFileUpload(event) {\n      this.imageFile = event.target.files[0];\n    },\n    async submitArticle() {\n      if (!this.checkAdminAuth()) return;\n      try {\n        const formData = new FormData();\n        formData.append('title', this.title);\n        formData.append('content', this.content);\n        formData.append('category', this.category);\n        formData.append('image_url', this.imageUrl);\n        if (this.imageFile) {\n          formData.append('image', this.imageFile);\n        }\n        const token = localStorage.getItem('authToken');\n        const headers = {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': `Bearer ${token}`\n        };\n        if (this.editingArticleId) {\n          // 编辑模式\n          await axios.put(`${API}/articles/${this.editingArticleId}`, formData, {\n            headers\n          });\n          alert('文章修改成功');\n        } else {\n          // 新建模式\n          await axios.post(`${API}/articles`, formData, {\n            headers\n          });\n          alert('文章发布成功');\n        }\n        this.resetForm();\n        this.fetchArticles();\n      } catch (error) {\n        console.error('提交文章失败:', error);\n        alert('提交失败，请重试。');\n      }\n    },\n    editArticle(article) {\n      if (!this.checkAdminAuth()) return;\n      this.title = article.title;\n      this.content = article.content;\n      this.imageUrl = article.image_url;\n      this.category = article.category;\n      this.editingArticleId = article.id;\n    },\n    async deleteArticle(articleId) {\n      if (!this.checkAdminAuth()) return;\n      if (confirm('确定要删除这篇文章吗？')) {\n        try {\n          const token = localStorage.getItem('authToken');\n          const headers = {\n            'Authorization': `Bearer ${token}`\n          };\n          await axios.delete(`${API}/articles/${articleId}`, {\n            headers\n          });\n          this.fetchArticles(); // 重新加载文章列表\n        } catch (error) {\n          console.error('删除文章失败:', error);\n          alert('删除失败，请重试。');\n        }\n      }\n    },\n    resetForm() {\n      this.title = '';\n      this.content = '';\n      this.imageUrl = '';\n      this.imageFile = null;\n      this.category = 'newsList';\n      this.editingArticleId = null;\n      this.$refs.fileInput.value = '';\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    async getImageUrl(path) {\n      if (!path) return '';\n      if (path.startsWith('http')) {\n        return path;\n      }\n\n      // 检查缓存\n      if (this.imageCache.has(path)) {\n        return this.imageCache.get(path);\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        const uploadPath = path.startsWith('/uploads/') ? path : `/uploads/${path}`;\n        const baseUrl = process.env.VUE_APP_BASE_URL || 'http://localhost:3000';\n        const response = await fetch(`${baseUrl}${uploadPath}`, {\n          headers\n        });\n        const blob = await response.blob();\n        const blobUrl = URL.createObjectURL(blob);\n\n        // 存入缓存\n        this.imageCache.set(path, blobUrl);\n        return blobUrl;\n      } catch (error) {\n        console.error('加载图片失败:', error);\n        return '';\n      }\n    },\n    async loadImage(article) {\n      if (!article.image_url) return;\n      article.blobUrl = await this.getImageUrl(article.image_url);\n    }\n  },\n  mounted() {\n    if (!this.checkAdminAuth()) {\n      this.$router.push('/');\n      return;\n    }\n    this.fetchArticles();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}